[{"C:\\dev\\stypendia\\client\\src\\index.js":"1","C:\\dev\\stypendia\\client\\src\\App.js":"2","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\Layout.js":"3","C:\\dev\\stypendia\\client\\src\\components\\Timer.js":"4","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\MainMenu.js":"5","C:\\dev\\stypendia\\client\\src\\context\\auth\\authContext.js":"6","C:\\dev\\stypendia\\client\\src\\components\\styles\\layout.styles.js":"7","C:\\dev\\stypendia\\client\\src\\pages\\index.js":"8","C:\\dev\\stypendia\\client\\src\\components\\index.js":"9","C:\\dev\\stypendia\\client\\src\\context\\index.js":"10","C:\\dev\\stypendia\\client\\src\\components\\styles\\timer.styles.js":"11","C:\\dev\\stypendia\\client\\src\\components\\styles\\mainMenu.styles.js":"12","C:\\dev\\stypendia\\client\\src\\parts\\items.js":"13","C:\\dev\\stypendia\\client\\src\\pages\\logout.js":"14","C:\\dev\\stypendia\\client\\src\\pages\\home.js":"15","C:\\dev\\stypendia\\client\\src\\pages\\protectedRoute.js":"16","C:\\dev\\stypendia\\client\\src\\pages\\404.js":"17","C:\\dev\\stypendia\\client\\src\\pages\\submit.js":"18","C:\\dev\\stypendia\\client\\src\\pages\\resetSend.js":"19","C:\\dev\\stypendia\\client\\src\\pages\\verify.js":"20","C:\\dev\\stypendia\\client\\src\\components\\subALayout.js":"21","C:\\dev\\stypendia\\client\\src\\components\\AllUsersDrafts.js":"22","C:\\dev\\stypendia\\client\\src\\components\\NewCallToAction.js":"23","C:\\dev\\stypendia\\client\\src\\components\\AllUsersSubmits.js":"24","C:\\dev\\stypendia\\client\\src\\components\\Rodo.js":"25","C:\\dev\\stypendia\\client\\src\\components\\Errors.js":"26","C:\\dev\\stypendia\\client\\src\\components\\Title.js":"27","C:\\dev\\stypendia\\client\\src\\components\\ConfirmModal.js":"28","C:\\dev\\stypendia\\client\\src\\components\\alert\\Alert.js":"29","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_I_II.js":"30","C:\\dev\\stypendia\\client\\src\\components\\submit\\Attachments.js":"31","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_III_IV.js":"32","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertContext.js":"33","C:\\dev\\stypendia\\client\\src\\context\\app\\appState.js":"34","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitContext.js":"35","C:\\dev\\stypendia\\client\\src\\context\\alert\\AlertState.js":"36","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitState.js":"37","C:\\dev\\stypendia\\client\\src\\context\\app\\appContext.js":"38","C:\\dev\\stypendia\\client\\src\\pages\\changePass.js":"39","C:\\dev\\stypendia\\client\\src\\pages\\login.js":"40","C:\\dev\\stypendia\\client\\src\\pages\\reset.js":"41","C:\\dev\\stypendia\\client\\src\\pages\\register.js":"42","C:\\dev\\stypendia\\client\\src\\pages\\resend.js":"43","C:\\dev\\stypendia\\client\\src\\pages\\profile.js":"44","C:\\dev\\stypendia\\client\\src\\components\\Nav.js":"45","C:\\dev\\stypendia\\client\\src\\context\\auth\\AuthState.js":"46","C:\\dev\\stypendia\\client\\src\\components\\styles\\rodo.styles.js":"47","C:\\dev\\stypendia\\client\\src\\components\\styles\\errors.style.js":"48","C:\\dev\\stypendia\\client\\src\\pages\\styles\\home.styles.js":"49","C:\\dev\\stypendia\\client\\src\\pages\\styles\\submit.styles.js":"50","C:\\dev\\stypendia\\client\\src\\parts\\inputs.js":"51","C:\\dev\\stypendia\\client\\src\\pages\\styles\\verify.styles.js":"52","C:\\dev\\stypendia\\client\\src\\pages\\styles\\resetSend.styles.js":"53","C:\\dev\\stypendia\\client\\src\\hooks\\useFetch.js":"54","C:\\dev\\stypendia\\client\\src\\context\\types.js":"55","C:\\dev\\stypendia\\client\\src\\utils\\mapErrors.js":"56","C:\\dev\\stypendia\\client\\src\\components\\styles\\nav.styles.js":"57","C:\\dev\\stypendia\\client\\src\\context\\auth\\authReducer.js":"58","C:\\dev\\stypendia\\client\\src\\pages\\styles\\profile.styles.js":"59","C:\\dev\\stypendia\\client\\src\\pages\\styles\\resend.styles.js":"60","C:\\dev\\stypendia\\client\\src\\pages\\styles\\register.styles.js":"61","C:\\dev\\stypendia\\client\\src\\pages\\styles\\reset.styles.js":"62","C:\\dev\\stypendia\\client\\src\\pages\\styles\\login.styles.js":"63","C:\\dev\\stypendia\\client\\src\\pages\\styles\\changePass.styles.js":"64","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitReducer.js":"65","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertReducer.js":"66","C:\\dev\\stypendia\\client\\src\\context\\app\\appReducer.js":"67","C:\\dev\\stypendia\\client\\src\\services\\index.js":"68","C:\\dev\\stypendia\\client\\src\\utils\\index.js":"69","C:\\dev\\stypendia\\client\\src\\parts\\index.js":"70","C:\\dev\\stypendia\\client\\src\\services\\fetchPdf.js":"71","C:\\dev\\stypendia\\client\\src\\utils\\capitalize.js":"72","C:\\dev\\stypendia\\client\\src\\utils\\toLocaleDate.js":"73","C:\\dev\\stypendia\\client\\src\\services\\saveRollbar.js":"74","C:\\dev\\stypendia\\client\\src\\components\\styles\\attachments.styles.js":"75","C:\\dev\\stypendia\\client\\src\\pages\\styles\\404.styles.js":"76","C:\\dev\\stypendia\\client\\src\\components\\styles\\alert.styles.js":"77","C:\\dev\\stypendia\\client\\src\\parts\\options.js":"78","C:\\dev\\stypendia\\client\\src\\pages\\styles\\logout.styles.js":"79"},{"size":220,"mtime":1608816802276,"results":"80","hashOfConfig":"81"},{"size":2013,"mtime":1612217950275,"results":"82","hashOfConfig":"81"},{"size":627,"mtime":1611270646044,"results":"83","hashOfConfig":"81"},{"size":2110,"mtime":1611958866647,"results":"84","hashOfConfig":"81"},{"size":2226,"mtime":1611954790021,"results":"85","hashOfConfig":"81"},{"size":105,"mtime":1608848462800,"results":"86","hashOfConfig":"81"},{"size":189,"mtime":1610315081054,"results":"87","hashOfConfig":"81"},{"size":637,"mtime":1611780144934,"results":"88","hashOfConfig":"81"},{"size":836,"mtime":1611865112379,"results":"89","hashOfConfig":"81"},{"size":492,"mtime":1611505707780,"results":"90","hashOfConfig":"81"},{"size":141,"mtime":1611270646045,"results":"91","hashOfConfig":"81"},{"size":317,"mtime":1610314827261,"results":"92","hashOfConfig":"81"},{"size":2634,"mtime":1611950867236,"results":"93","hashOfConfig":"81"},{"size":924,"mtime":1611505707782,"results":"94","hashOfConfig":"81"},{"size":1478,"mtime":1611505707781,"results":"95","hashOfConfig":"81"},{"size":650,"mtime":1611505707783,"results":"96","hashOfConfig":"81"},{"size":445,"mtime":1611486806346,"results":"97","hashOfConfig":"81"},{"size":2494,"mtime":1611612213100,"results":"98","hashOfConfig":"81"},{"size":4420,"mtime":1611612213099,"results":"99","hashOfConfig":"81"},{"size":3934,"mtime":1611505707786,"results":"100","hashOfConfig":"81"},{"size":657,"mtime":1611522442291,"results":"101","hashOfConfig":"81"},{"size":2063,"mtime":1611783684806,"results":"102","hashOfConfig":"81"},{"size":1511,"mtime":1611505707777,"results":"103","hashOfConfig":"81"},{"size":3186,"mtime":1611779280751,"results":"104","hashOfConfig":"81"},{"size":4432,"mtime":1610315383171,"results":"105","hashOfConfig":"81"},{"size":1837,"mtime":1611658026766,"results":"106","hashOfConfig":"81"},{"size":792,"mtime":1608799587288,"results":"107","hashOfConfig":"81"},{"size":984,"mtime":1611866897195,"results":"108","hashOfConfig":"81"},{"size":3061,"mtime":1611507026558,"results":"109","hashOfConfig":"81"},{"size":9206,"mtime":1611657672215,"results":"110","hashOfConfig":"81"},{"size":11054,"mtime":1611952944570,"results":"111","hashOfConfig":"81"},{"size":11152,"mtime":1611612213095,"results":"112","hashOfConfig":"81"},{"size":109,"mtime":1609080271356,"results":"113","hashOfConfig":"81"},{"size":750,"mtime":1611508329248,"results":"114","hashOfConfig":"81"},{"size":109,"mtime":1609777155673,"results":"115","hashOfConfig":"81"},{"size":837,"mtime":1609111776421,"results":"116","hashOfConfig":"81"},{"size":3578,"mtime":1611955413998,"results":"117","hashOfConfig":"81"},{"size":103,"mtime":1610289759632,"results":"118","hashOfConfig":"81"},{"size":4042,"mtime":1612253028851,"results":"119","hashOfConfig":"81"},{"size":4768,"mtime":1612297063670,"results":"120","hashOfConfig":"81"},{"size":4184,"mtime":1612253081360,"results":"121","hashOfConfig":"81"},{"size":5762,"mtime":1612254073615,"results":"122","hashOfConfig":"81"},{"size":3746,"mtime":1612252743163,"results":"123","hashOfConfig":"81"},{"size":4624,"mtime":1612252931478,"results":"124","hashOfConfig":"81"},{"size":3440,"mtime":1612253004536,"results":"125","hashOfConfig":"81"},{"size":2622,"mtime":1612217827775,"results":"126","hashOfConfig":"81"},{"size":239,"mtime":1610315325540,"results":"127","hashOfConfig":"81"},{"size":198,"mtime":1611952292040,"results":"128","hashOfConfig":"81"},{"size":635,"mtime":1611173262477,"results":"129","hashOfConfig":"81"},{"size":1392,"mtime":1611612213099,"results":"130","hashOfConfig":"81"},{"size":2661,"mtime":1611486806352,"results":"131","hashOfConfig":"81"},{"size":553,"mtime":1610319320735,"results":"132","hashOfConfig":"81"},{"size":420,"mtime":1610318605095,"results":"133","hashOfConfig":"81"},{"size":975,"mtime":1611955240924,"results":"134","hashOfConfig":"81"},{"size":818,"mtime":1611612213097,"results":"135","hashOfConfig":"81"},{"size":196,"mtime":1611612213100,"results":"136","hashOfConfig":"81"},{"size":431,"mtime":1611523171630,"results":"137","hashOfConfig":"81"},{"size":630,"mtime":1611270646048,"results":"138","hashOfConfig":"81"},{"size":468,"mtime":1611783401164,"results":"139","hashOfConfig":"81"},{"size":420,"mtime":1610318211002,"results":"140","hashOfConfig":"81"},{"size":627,"mtime":1611956640870,"results":"141","hashOfConfig":"81"},{"size":420,"mtime":1610318415352,"results":"142","hashOfConfig":"81"},{"size":490,"mtime":1611956719845,"results":"143","hashOfConfig":"81"},{"size":420,"mtime":1610317926565,"results":"144","hashOfConfig":"81"},{"size":904,"mtime":1611612213096,"results":"145","hashOfConfig":"81"},{"size":359,"mtime":1609111873258,"results":"146","hashOfConfig":"81"},{"size":268,"mtime":1610290118206,"results":"147","hashOfConfig":"81"},{"size":61,"mtime":1611691643696,"results":"148","hashOfConfig":"81"},{"size":89,"mtime":1611864560238,"results":"149","hashOfConfig":"81"},{"size":76,"mtime":1611505707786,"results":"150","hashOfConfig":"81"},{"size":484,"mtime":1611691599367,"results":"151","hashOfConfig":"81"},{"size":80,"mtime":1611784492621,"results":"152","hashOfConfig":"81"},{"size":112,"mtime":1611784367323,"results":"153","hashOfConfig":"81"},{"size":391,"mtime":1611508308239,"results":"154","hashOfConfig":"81"},{"size":1031,"mtime":1611953313293,"results":"155","hashOfConfig":"81"},{"size":239,"mtime":1611486806351,"results":"156","hashOfConfig":"81"},{"size":2238,"mtime":1611260018029,"results":"157","hashOfConfig":"81"},{"size":1674,"mtime":1611602148934,"results":"158","hashOfConfig":"81"},{"size":127,"mtime":1610317074882,"results":"159","hashOfConfig":"81"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"1cla2w0",{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"162"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"162"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"162"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"162"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"162"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"162"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"162"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"162"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"162"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"162"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"162"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"162"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"162"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"162"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"162"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"162"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"162"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"162"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"162"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"162"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"162"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"162"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"162"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"162"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"162"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"C:\\dev\\stypendia\\client\\src\\index.js",[],["344","345"],"C:\\dev\\stypendia\\client\\src\\App.js",["346"],"import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport Layout from './components/commonLayout/Layout';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport {\r\n  Register,\r\n  Home,\r\n  Login,\r\n  Verify,\r\n  Resend,\r\n  ResetSend,\r\n  Reset,\r\n  Logout,\r\n  ChangePass,\r\n  ProtectedRoute,\r\n  Submit,\r\n  Page404,\r\n  Profile,\r\n} from './pages';\r\nimport { AuthState, AlertState, AppState, SubmitState } from './context';\r\nimport { Alert } from './components';\r\n\r\n// axios.defaults.baseURL = 'http://localhost:5003';\r\n// axios.defaults.withCredentials = true;\r\n\r\nfunction App() {\r\n  return (\r\n    <AlertState>\r\n      <AppState>\r\n        <Router>\r\n          <AuthState>\r\n            <SubmitState>\r\n              <Layout>\r\n                <Switch>\r\n                  <Route exact path='/register' component={Register} />\r\n                  <Route exact path='/verify' component={Verify} />\r\n                  <Route exact path='/reset' component={Reset} />\r\n                  <Route exact path='/resetsend' component={ResetSend} />\r\n                  <Route exact path='/resend' component={Resend} />\r\n                  <ProtectedRoute\r\n                    exact\r\n                    path='/changepass'\r\n                    component={ChangePass}\r\n                  />\r\n                  <ProtectedRoute exact path='/' component={Home} />\r\n                  <Route exact path='/login' component={Login} />\r\n                  <ProtectedRoute exact path='/logout' component={Logout} />\r\n                  <ProtectedRoute exact path='/submit' component={Submit} />\r\n                  <ProtectedRoute exact path='/profile' component={Profile} />\r\n                  <Route path='*' component={Page404} />\r\n                </Switch>\r\n              </Layout>\r\n            </SubmitState>\r\n          </AuthState>\r\n\r\n          <Alert position={'bottom-right'} autoDeleteInterval={10000} />\r\n        </Router>\r\n      </AppState>\r\n    </AlertState>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\Layout.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Timer.js",["347"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, Icon, Label } from 'semantic-ui-react';\r\nimport { Wrapper } from './styles/timer.styles';\r\nimport { AuthContext } from '../context';\r\n\r\n\r\nconst Timer = () => {\r\n  const authContext = useContext(AuthContext);\r\n  const { isLoggedIn, logOut, user, timeLeft, setTimeLeft } = authContext;\r\n\r\n  const [color, setColor] = useState(null);\r\n  const [size, setSize] = useState('tiny');\r\n\r\n  const handleOnClick = () => {\r\n    setColor('');\r\n    setSize('tiny');\r\n    setTimeLeft(+process.env.REACT_APP_SESSION_TIMEOUT);\r\n  };\r\n\r\n  useEffect(() => {\r\n    timeLeft < +process.env.REACT_APP_SESSION_ALERT && setColor('red');\r\n    timeLeft < +process.env.REACT_APP_SESSION_ALERT && setSize('');\r\n    timeLeft > +process.env.REACT_APP_SESSION_ALERT && setColor('');\r\n    timeLeft > +process.env.REACT_APP_SESSION_ALERT && setSize('tiny');\r\n    timeLeft === 0 && logOut();\r\n    const timer =\r\n      timeLeft > 0 && setInterval(() => setTimeLeft(timeLeft - 1), 1000);\r\n    return () => clearInterval(timer);\r\n  }, [timeLeft]);\r\n\r\n  return isLoggedIn ? (\r\n    <Wrapper>\r\n      <Label className='timer' as='div' color={color} size={size} image>\r\n        <img\r\n          className='img'\r\n          src='https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'\r\n          alt='user'\r\n        />\r\n        {user?.firstName} {user?.lastName} ({user?.login})\r\n        {timeLeft < +process.env.REACT_APP_SESSION_ALERT && (\r\n          <Label.Detail>Niedługo nastąpi wylogowanie</Label.Detail>\r\n        )}\r\n        <Label.Detail>\r\n          Sesja{' '}\r\n          {timeLeft / 60 < 10\r\n            ? '0' + Math.floor(timeLeft / 60)\r\n            : Math.floor(timeLeft / 60)}\r\n          :{timeLeft % 60 < 10 ? '0' + (timeLeft % 60) : timeLeft % 60}\r\n        </Label.Detail>\r\n      </Label>\r\n      {timeLeft < +process.env.REACT_APP_SESSION_ALERT && (\r\n        <Button icon negative onClick={handleOnClick}>\r\n          <Icon name='refresh' /> Odśwież\r\n        </Button>\r\n      )}\r\n    </Wrapper>\r\n  ) : null;\r\n};\r\n\r\nexport default Timer;\r\n","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\MainMenu.js",["348"],"import React, { useContext, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { Wrapper } from '../styles/mainMenu.styles';\r\nimport { leftMenuItems, rightMenuItems } from '../../parts/items';\r\nimport { AuthContext, SubmitContext } from '../../context';\r\n\r\nconst MainMenu = () => {\r\n  const submitContext = useContext(SubmitContext);\r\n  const { setSubmitMode } = submitContext;\r\n\r\n  const [activeItem, setActiveItem] = useState('home');\r\n  const [hasOwnSub, setHasOwnSub] = useState(false);\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { isLoggedIn, logOut } = authContext;\r\n\r\n  const handleClick = (name) => {\r\n    if (name === 'logout') {logOut()}\r\n    else if (name === 'submit') {setSubmitMode('new'); setActiveItem(name)}\r\n    else setActiveItem(name);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Menu icon='labeled' className='main'>\r\n        {leftMenuItems\r\n          .filter(\r\n            (item) =>\r\n              (item.noOwnSubDisplay === !hasOwnSub ||\r\n                item.hasOwnSubDisplay === hasOwnSub) &&\r\n              item.isLoggedInDisplay === isLoggedIn\r\n          )\r\n          .map((item) => (\r\n            <Link to={item.url} key={item.id}>\r\n              <Menu.Item\r\n                as='div'\r\n                icon={item.icon}\r\n                content={item.title}\r\n                name={item.name}\r\n                active={activeItem === item.name}\r\n                onClick={() => handleClick(item.name)}\r\n              />\r\n            </Link>\r\n          ))}\r\n\r\n        <Menu.Menu position='right' className='right'>\r\n          {rightMenuItems\r\n            .filter((item) => item.isLoggedInDisplay === isLoggedIn)\r\n            .map((item) => (\r\n              <Link to={item.url} key={item.id}>\r\n                <Menu.Item\r\n                  as='div'\r\n                  icon={item.icon}\r\n                  content={item.title}\r\n                  name={item.name}\r\n                  active={activeItem === item.name}\r\n                  onClick={() => handleClick(item.name)}\r\n                />\r\n              </Link>\r\n            ))}\r\n        </Menu.Menu>\r\n      </Menu>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default MainMenu;\r\n","C:\\dev\\stypendia\\client\\src\\context\\auth\\authContext.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\layout.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\index.js",[],"C:\\dev\\stypendia\\client\\src\\components\\index.js",[],"C:\\dev\\stypendia\\client\\src\\context\\index.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\timer.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\mainMenu.styles.js",[],"C:\\dev\\stypendia\\client\\src\\parts\\items.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\logout.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\home.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\protectedRoute.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\404.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\submit.js",["349","350","351","352","353"],"import React, { useContext, useState } from 'react';\r\nimport { Grid, Menu } from 'semantic-ui-react';\r\n\r\nimport { SubA_I_II, SubA_III_IV, Attachments, Nav, Errors } from '../components';\r\nimport { Wrapper } from './styles/submit.styles';\r\nimport { SubmitContext } from '../context';\r\n\r\nconst Submit = () => {\r\n  const submitContext = useContext(SubmitContext);\r\n  const { submitMode } = submitContext;\r\n\r\n  const [activeItem, setActiveItem] = useState(1);\r\n\r\n  const renderComponent = () => {\r\n    if (activeItem > 5) setActiveItem(1);\r\n    if (activeItem < 1) setActiveItem(1);\r\n    switch (activeItem) {\r\n      case 1:\r\n        return <SubA_I_II />;\r\n      case 2:\r\n        return <SubA_III_IV />;\r\n      case 3:\r\n        return <Attachments />;\r\n      case 4:\r\n        return <SubA_III_IV />;\r\n      case 5:\r\n        return <SubA_III_IV />;\r\n\r\n      default:\r\n        return <SubA_I_II />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper submitMode={submitMode}>\r\n      <Errors/>\r\n      <Grid>\r\n        <Grid.Column width={4}>\r\n          <Menu fluid vertical tabular className='menu' >\r\n            <Menu.Item\r\n              icon='student'\r\n              name='Dane ucznia'\r\n              active={activeItem === 1}\r\n              onClick={() => setActiveItem(1)}\r\n            />\r\n            <Menu.Item\r\n              icon='university'\r\n              name='dane szkoły'\r\n              content='Dane szkoły'\r\n              active={activeItem === 2}\r\n              onClick={() => setActiveItem(2)}\r\n            />\r\n            <Menu.Item\r\n              icon='attach'\r\n              name='dane szkoły'\r\n              content='Załączniki'\r\n              active={activeItem === 3}\r\n              onClick={() => setActiveItem(3)}\r\n            />\r\n            <Menu.Item\r\n              icon='university'\r\n              name='dane szkoły'\r\n              content='Dane szkoły'\r\n              active={activeItem === 4}\r\n              onClick={() => setActiveItem(4)}\r\n            />\r\n            <Menu.Item\r\n              icon='university'\r\n              name='dane szkoły'\r\n              content='Dane szkoły'\r\n              active={activeItem === 5}\r\n              onClick={() => setActiveItem(5)}\r\n            />\r\n          </Menu>\r\n        </Grid.Column>\r\n\r\n        <Grid.Column stretched width={12}>\r\n          {renderComponent()}\r\n        <Nav activeItem={activeItem} setActiveItem={setActiveItem} />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Submit;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\resetSend.js",["354"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport {Wrapper} from './styles/resetSend.styles'\r\nimport {Title} from '../components';\r\nimport {AlertContext,AuthContext ,AppContext} from '../context';\r\nimport { resetReqInputs } from '../parts/inputs';\r\n\r\nconst ResetSend = ({ history }) => {\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    setIsLoading(true);\r\n    setErrors('');\r\n    e.preventDefault();\r\n\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`/api/v1/password/email`, newBody)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/login');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n \r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n    const handleOnChange = (e) => {\r\n      e.preventDefault();\r\n      setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n    };\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Resetowanie hasła' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Message className='msg' info size='small' floating>\r\n            <Message.Header>Resetowanie hasła</Message.Header>\r\n            <p>\r\n              Strona służy do resetowania hasła do konta. Zostanie wygenerowany\r\n              specjalny link oraz przesłany na podany adres email i będzie ważny\r\n              przez <strong>12 godzin</strong>. Jeżeli nie znajdziesz linka\r\n              sprawdź folder <strong> spam</strong> w Twojej poczcie. W\r\n              formularzu poniżej podaj nazwę użytkownika oraz email, które\r\n              podałaś/eś w trakcie rejestracji.\r\n            </p>\r\n          </Message>\r\n          <Grid columns={1} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value=''></input>\r\n                {resetReqInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        className='input'\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          className='small'\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Wyślij link'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default ResetSend;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\verify.js",["355","356"],"import axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport {AlertContext,AuthContext, AppContext} from '../context';\r\nimport { Link } from 'react-router-dom';\r\nimport { verItems } from '../parts/items';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Header,\r\n  Icon,\r\n  List,\r\n  Loader,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\n\r\nimport {Wrapper} from './styles/verify.styles'\r\nimport Title from '../components/Title';\r\n\r\nconst Verify = ({ location: { search }, history }) => {\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\r\n  isLoggedIn && history.push('/');\r\n\r\n  const [query, setQuery] = useState(search);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n\r\n    axios\r\n      .post(`/api/v1/email/verify${query}`)\r\n      .then((data) => {\r\n        setIsLoading(false);\r\n        setIsSuccess(true);\r\n        addAlert(data.data);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        addAlert(err.response.data);\r\n      });\r\n  }, [isLoggedIn]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Title content='Weryfikacja konta' />\r\n      <Loader active={isLoading} size='huge'>\r\n        Weryfikujemy\r\n      </Loader>\r\n\r\n      {!isLoading && !isSuccess && (\r\n        <Container className='msg'>\r\n          <Message error size='big' floating>\r\n            <Message.Header>Błąd weryfikacji danych</Message.Header>\r\n            <p>\r\n              Nie udało się potwierdzić konta przy użyciu tego linka. Być może\r\n              link jest już przestarzały lub uszkodzony. Możesz skorzystać z\r\n              mechanizmu ponownej wysyłki linka korzystając z tej strony:\r\n              <br />\r\n              <br />\r\n              <Link to='/resend'>\r\n                <Button primary size='large'>\r\n                  Ponownie wyślij link\r\n                </Button>\r\n              </Link>\r\n            </p>\r\n          </Message>\r\n        </Container>\r\n      )}\r\n\r\n      {!isLoading && isSuccess && (\r\n        <>\r\n          <Segment placeholder className='main' size='large'>\r\n            <Message success size='medium' floating>\r\n              <Message.Header>Potwierdzono konto!!!</Message.Header>\r\n              <p>\r\n                Udało się potwierdzić konto. Od tej chili możesz się zalogować i\r\n                złożyć wniosek.\r\n              </p>\r\n            </Message>\r\n\r\n            <List\r\n              size='large'\r\n              selection\r\n              animated\r\n              divided\r\n              verticalAlign='middle'\r\n              hor\r\n            >\r\n              {verItems.map((item) => (\r\n                <List.Item key={item.id}>\r\n                  <Link to={item.to}>\r\n                    <List.Content floated='right'>\r\n                      <Button\r\n                        size={item.button === 'Logowanie' ? 'big' : null}\r\n                        primary={item.button === 'Logowanie'}\r\n                        icon\r\n                        labelPosition='right'\r\n                      >\r\n                        {item.button}\r\n                        <Icon name='right arrow' />\r\n                      </Button>\r\n                    </List.Content>\r\n                    <List.Content verticalAlign='bottom' floated='left'>\r\n                      <Header as='h3' className='itemheader'>\r\n                        <Icon size='large' name={item.icon} /> {item.name}\r\n                      </Header>\r\n                    </List.Content>\r\n                  </Link>\r\n                </List.Item>\r\n              ))}\r\n            </List>\r\n          </Segment>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default Verify;\r\n","C:\\dev\\stypendia\\client\\src\\components\\subALayout.js",["357","358"],"import React from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Header,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\n\r\nimport Title from './Title';\r\n\r\nconst SubALayout = ({ children, leadHeader }) => {\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Title content='Nowy wniosek' />\r\n\r\n          <Segment placeholder size='large'>\r\n\r\n            <Grid\r\n              className='container'\r\n              centered\r\n              columns={2}\r\n              relaxed='very'\r\n              stackable\r\n            >\r\n              {children}\r\n            </Grid>\r\n          </Segment>\r\n\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SubALayout;\r\n","C:\\dev\\stypendia\\client\\src\\components\\AllUsersDrafts.js",["359"],"import React, { useContext, useEffect } from 'react';\r\n\r\nimport { Button, Card, Image, Label } from 'semantic-ui-react';\r\nimport NewCallToAction from './NewCallToAction';\r\nimport { AuthContext, AppContext } from '../context';\r\nimport useFetch from '../hooks/useFetch';\r\n\r\nconst AllUsersDrafts = () => {\r\n  const authContext = useContext(AuthContext);\r\n  const { resetTimeLeft } = authContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { isLoading } = appContext;\r\n\r\n  const { data } = useFetch('drafts/oneuser');\r\n\r\n  useEffect(() => {\r\n    resetTimeLeft();\r\n  }, []);\r\n\r\n  return !isLoading ? (\r\n    <>\r\n      <Card.Group itemsPerRow={5} stackable className='cards'>\r\n        {data.length > 0 ? (\r\n          data.map((s) => (\r\n            <Card key={s.id} className='card' raised>\r\n              <Card.Content textAlign='left'>\r\n                <Label\r\n                  className='label'\r\n                  // basic\r\n                  size='mini'\r\n                  content={'wersja robocza'}\r\n                  color='orange'\r\n                ></Label>\r\n                <Image\r\n                  floated='left'\r\n                  size='mini'\r\n                  src='https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'\r\n                />\r\n                <Card.Header>\r\n                  {s.pupilFirstName} {s.pupilLastName}\r\n                </Card.Header>\r\n                <Card.Meta>{s.schoolType}</Card.Meta>\r\n                <Card.Description>{s.schoolName}</Card.Description>\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                <div className='ui two buttons'>\r\n                  <Button color='orange'>Edytuj</Button>\r\n                  <Button basic color='red'>\r\n                    Usuń\r\n                  </Button>\r\n                </div>\r\n              </Card.Content>\r\n            </Card>\r\n          ))\r\n        ) : (\r\n          <NewCallToAction />\r\n        )}\r\n      </Card.Group>\r\n    </>\r\n  ) : (\r\n    <h2>Pobieramy dane...</h2>\r\n  );\r\n};\r\n\r\nexport default AllUsersDrafts;\r\n","C:\\dev\\stypendia\\client\\src\\components\\NewCallToAction.js",["360"],"import React, { useContext, useEffect} from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport {SubmitContext, AuthContext} from '../context';\r\nimport { Button, Card, Icon, } from 'semantic-ui-react';\r\n\r\nconst NewCallToAction = () => {\r\n    const authContext = useContext(AuthContext);\r\n    const { resetTimeLeft } = authContext;\r\n\r\n    const submitContext = useContext(SubmitContext);\r\n    const {setSubmitUuid, setSubmitMode } = submitContext;\r\n\r\n\r\n  const handleOnClick = (mode) => {\r\n    setSubmitMode(mode);\r\n    setSubmitUuid(null)\r\n\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    resetTimeLeft()\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Link to='/submit'>\r\n        <Card.Group\r\n          itemsPerRow={5}\r\n          stackable\r\n          centered\r\n          className='cards'\r\n          onClick={() => handleOnClick('new')}\r\n        >\r\n\r\n                <Card  className='card' raised>\r\n                  <Card.Content textAlign='center'>\r\n                    <Icon name='plus' size='big' color='black' />\r\n                    <Icon name='pencil' size='huge' color='black' />\r\n                  </Card.Content>\r\n                  <Card.Content extra>\r\n                    <Button primary size='large' icon labelPosition='right'>\r\n                      Złóż nowy wniosek\r\n                      <Icon name='right arrow' />\r\n                    </Button>\r\n                  </Card.Content>\r\n                </Card>\r\n\r\n        </Card.Group>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewCallToAction;\r\n","C:\\dev\\stypendia\\client\\src\\components\\AllUsersSubmits.js",["361"],"import React, { useContext, useEffect } from 'react';\r\nimport { SubmitContext, AuthContext, AppContext } from '../context';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Card, Icon, Image, Label } from 'semantic-ui-react';\r\nimport NewCallToAction from './NewCallToAction';\r\nimport useFetch from '../hooks/useFetch';\r\nimport { fetchPdf } from '../services';\r\n\r\nconst AllUsersSubmits = () => {\r\n  const authContext = useContext(AuthContext);\r\n  const { resetTimeLeft } = authContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { isLoading } = appContext;\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const {\r\n    setSubmitUuid,\r\n    setSubmitMode,\r\n    setCurSubmit,\r\n    setSubmitToWatch,\r\n  } = submitContext;\r\n\r\n  const { data } = useFetch('submits/usersubmits');\r\n\r\n  const handleOnClick = (uuid, mode) => {\r\n    setSubmitMode(mode);\r\n    setSubmitUuid(uuid);\r\n\r\n    if (mode === 'edit') {\r\n      setCurSubmit(uuid);\r\n    } else if (mode === 'watch') {\r\n      setSubmitToWatch(uuid);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetTimeLeft();\r\n  }, [data]);\r\n\r\n  return !isLoading ? (\r\n    <>\r\n      <Card.Group itemsPerRow={5} stackable className='cards'>\r\n        {data.length > 0 ? (\r\n          data.map((s) => (\r\n            <Card key={s.id} className='card' raised>\r\n              <Card.Content className='relative' textAlign='left'>\r\n                <Label\r\n                  className='label'\r\n                  // basic\r\n                  size='mini'\r\n                  color='grey'\r\n                  content={'oczekuje na decyzje'}\r\n                ></Label>\r\n                <Image\r\n                  floated='left'\r\n                  size='mini'\r\n                  src='https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'\r\n                />\r\n\r\n                <Card.Header>\r\n                  {s.pupilFirstName} {s.pupilLastName}\r\n                </Card.Header>\r\n                <Card.Meta>{s.schoolType}</Card.Meta>\r\n                <Card.Description>Nuner wniosku: {s.numer}</Card.Description>\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                <div className='ui three buttons'>\r\n                  <Link to='/submit'>\r\n                    <Button\r\n                      color='green'\r\n                      onClick={() => handleOnClick(s.uuid, 'watch')}\r\n                    >\r\n                      Zobacz\r\n                    </Button>\r\n                    <Button\r\n                      primary\r\n                      onClick={() => handleOnClick(s.uuid, 'edit')}\r\n                    >\r\n                      Popraw\r\n                    </Button>\r\n                  </Link>\r\n                  <Button basic color='blue' onClick={() => fetchPdf(s.numer)}>\r\n                    <Icon name='download' />\r\n                    <strong> PDF</strong>\r\n                  </Button>\r\n                </div>\r\n              </Card.Content>\r\n            </Card>\r\n          ))\r\n        ) : (\r\n          <>\r\n            <NewCallToAction />\r\n          </>\r\n        )}\r\n      </Card.Group>\r\n    </>\r\n  ) : (\r\n    <h2>Pobieramy dane...</h2>\r\n  );\r\n};\r\n\r\nexport default AllUsersSubmits;\r\n","C:\\dev\\stypendia\\client\\src\\components\\Rodo.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Errors.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Title.js",[],"C:\\dev\\stypendia\\client\\src\\components\\ConfirmModal.js",["362","363"],"import axios from 'axios';\r\nimport { useEffect } from 'react';\r\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\r\n\r\nconst ConfirmModal = ({\r\n  openConfirm,\r\n  setOpenConfirm,\r\n  title,\r\n  content,\r\n  greenButton,\r\n  redButton,\r\n  redAction,\r\n  greenAction,\r\n}) => {\r\n  const handleConfirm = () => {\r\n    axios.delete('/');\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      closeIcon\r\n      open={openConfirm}\r\n      onClose={() => setOpenConfirm(false)}\r\n      onOpen={() => setOpenConfirm(true)}\r\n    >\r\n      <Header icon='remove' content={title} />\r\n      <Modal.Content>\r\n        <p>{content}</p>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button color='green' onClick={greenAction}>\r\n          <Icon name='checkmark' /> {greenButton}\r\n        </Button>\r\n        <Button color='red' onClick={redAction}>\r\n          <Icon name='remove' />\r\n          {redButton}\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ConfirmModal;\r\n","C:\\dev\\stypendia\\client\\src\\components\\alert\\Alert.js",["364"],"import React, { useContext } from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\nimport { Wrapper } from '../styles/alert.styles';\r\n// import './Alert.css';\r\nimport AlertContext from '../../context/alert/alertContext';\r\n\r\nconst Alert = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { alerts, deleteAlert } = alertContext;\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div className={`notification-container ${props.position}`}>\r\n        {alerts.map((alert, i) => {\r\n          if (props.autoDeleteInterval) {\r\n            setInterval(() => {\r\n              deleteAlert(alert.id);\r\n            }, props.autoDeleteInterval);\r\n          }\r\n\r\n          switch (alert.resStatus) {\r\n            case 'error':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message error className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p> {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n            case 'info':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message info className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p> {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n\r\n            case 'warning':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message warning className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p> {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n\r\n            case 'success':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message success className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p> {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n\r\n            default:\r\n              break;\r\n          }\r\n        })}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_I_II.js",["365"],"import React, { useContext, useEffect } from 'react';\r\nimport { Form, Grid, Header, Label } from 'semantic-ui-react';\r\nimport SubALayout from '../subALayout';\r\n\r\nimport {AuthContext, SubmitContext }from '../../context';\r\nimport { optionsAttachment } from '../../parts/options';\r\n\r\nconst SubA_I_II = () => {\r\n  const authContext = useContext(AuthContext);\r\n  const { user, resetTimeLeft } = authContext;\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const {\r\n    newSubmit,\r\n    updateNewSubmit,\r\n    submitMode,\r\n    curSubmit,\r\n    updateCurSubmit,\r\n    submitToWatch,\r\n    submitErrors,\r\n  } = submitContext;\r\n\r\n  const handleOnChange = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (submitMode === 'edit') {\r\n      await updateCurSubmit({\r\n        ...curSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    } else if (submitMode === 'new') {\r\n      await updateNewSubmit({\r\n        ...newSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    resetTimeLeft();\r\n  }, []);\r\n\r\n  return (\r\n    <SubALayout leadHeader='CZĘŚĆ A – INFORMACJE DOTYCZĄCE UCZNIA/UCZENNICY'>\r\n      <Grid.Column className='column'>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          I. DANE OSOBOWE WNIOSKODAWCY:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              label='Imię wnioskodawcy'\r\n              name='firstName'\r\n              icon='user'\r\n              iconPosition='left'\r\n              value={user?.firstName} // usynąć znak zapytania\r\n            />\r\n            <Form.Input\r\n              icon='user'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Nazwisko wnioskodawcy'\r\n              name='lastName'\r\n              value={user?.lastName}\r\n            />\r\n\r\n            <Form.Input\r\n              className='input'\r\n              label='Email wnioskodawcy'\r\n              icon='at'\r\n              iconPosition='left'\r\n              placeholder='Podaj email wnioskodawcy'\r\n              name='phone'\r\n              value={user?.email}\r\n            />\r\n            <Form.Input\r\n              className='input'\r\n              label='Numer telefonu wnioskodawcy'\r\n              icon='phone'\r\n              iconPosition='left'\r\n              placeholder='Podaj numer telefonu wnioskodawcy'\r\n              name='phone'\r\n              onChange={(e) => handleOnChange(e)}\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.phone\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.phone\r\n                  : submitToWatch?.phone) || ''\r\n              }\r\n            />\r\n            {submitErrors?.phone && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.phone}\r\n              </Label>\r\n            )}\r\n\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              icon='box'\r\n              iconPosition='left'\r\n              label='Adres skrzynki ePuap (opcjonalnie)'\r\n              placeholder='Podaj adres ePuap (opcjonalnie)'\r\n              name='epuapAdr'\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.epuapAdr\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.epuapAdr\r\n                  : submitToWatch?.epuapAdr) || ''\r\n              }\r\n            />\r\n\r\n            <div className='select-wrapper'>\r\n              <Header className='select-header' as='h5'>\r\n                Status Wnioskodawcy\r\n              </Header>\r\n              <select\r\n                onChange={(e) => handleOnChange(e)}\r\n                name='isSelf'\r\n                value={\r\n                  (submitMode === 'edit'\r\n                    ? curSubmit?.isSelf\r\n                    : submitMode === 'new'\r\n                    ? newSubmit?.isSelf\r\n                    : submitToWatch?.isSelf) || 'default'\r\n                }\r\n              >\r\n                {optionsAttachment.map((o) => (\r\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                    {o.text}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {submitErrors?.isSelf && (\r\n                <Label basic color='red' pointing='above' className='select'>\r\n                  {submitErrors?.isSelf}\r\n                </Label>\r\n              )}\r\n            </div>\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n      <Grid.Column>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          II. DANE OSOBOWE UCZNIA:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              placeholder='Podaj PESEL ucznia'\r\n              label='PESEL ucznia'\r\n              name='pupilPesel'\r\n              icon='id card outline'\r\n              iconPosition='left'\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.pupilPesel\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilPesel\r\n                  : submitToWatch?.pupilPesel) || ''\r\n              }\r\n            />\r\n            {submitErrors?.pupilPesel && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.pupilPesel}\r\n              </Label>\r\n            )}\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              icon='user'\r\n              iconPosition='left'\r\n              label='Imię ucznia'\r\n              name='pupilFirstName'\r\n              placeholder='Podaj imię ucznia'\r\n              value={\r\n                (newSubmit.isSelf === '1'\r\n                  ? user.firstName\r\n                  : submitMode === 'edit'\r\n                  ? curSubmit?.pupilFirstName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilFirstName\r\n                  : submitToWatch?.pupilFirstName) || ''\r\n              }\r\n            />\r\n            {submitErrors?.pupilFirstName && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.pupilFirstName}\r\n              </Label>\r\n            )}\r\n\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              icon='user'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Nazwisko ucznia'\r\n              name='pupilLastName'\r\n              placeholder='Podaj nazwisko ucznia'\r\n              value={\r\n                (newSubmit.isSelf === '1'\r\n                  ? user.lastName\r\n                  : submitMode === 'edit'\r\n                  ? curSubmit?.pupilLastName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilLastName\r\n                  : submitToWatch?.pupilLastName) || ''\r\n              }\r\n            />\r\n            {submitErrors?.pupilLastName && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.pupilLastName}\r\n              </Label>\r\n            )}\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              icon='at'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Email ucznia'\r\n              type='email'\r\n              name='pupilEmail'\r\n              placeholder='Podaj adres email ucznia'\r\n              value={\r\n                (newSubmit.isSelf === '1'\r\n                  ? user.email\r\n                  : submitMode === 'edit'\r\n                  ? curSubmit?.pupilEmail\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilEmail\r\n                  : submitToWatch?.pupilEmail) || ''\r\n              }\r\n            />\r\n            {submitErrors?.pupilEmail && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.pupilEmail}\r\n              </Label>\r\n            )}\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              label='Numer telefonu ucznia'\r\n              icon='phone'\r\n              iconPosition='left'\r\n              placeholder='Podaj numer telefonu ucznia'\r\n              type='phone'\r\n              name='pupilPhone'\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.pupilPhone\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilPhone\r\n                  : submitToWatch?.pupilPhone) || ''\r\n              }\r\n            />\r\n            {submitErrors?.pupilPhone && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.pupilPhone}\r\n              </Label>\r\n            )}\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n    </SubALayout>\r\n  );\r\n};\r\n\r\nexport default SubA_I_II;\r\n","C:\\dev\\stypendia\\client\\src\\components\\submit\\Attachments.js",["366"],"import React, { createRef, useContext, useEffect, useState } from 'react';\r\nimport { Button, Card, Icon, Image, Label, Message } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { AuthContext, SubmitContext, AlertContext } from '../../context';\r\nimport { Wrapper } from '../styles/attachments.styles';\r\n\r\nimport addedImg from '../../assets/img/wireframe.png';\r\nimport statementImg from '../../assets/img/statement.jpg';\r\nimport reportImg from '../../assets/img/reportCard.jpg';\r\nimport SubALayout from '../subALayout';\r\nimport { toLocaleDate } from '../../utils/toLocaleDate';\r\n\r\nconst Attachments = () => {\r\n  const authContext = useContext(AuthContext);\r\n  const { resetTimeLeft } = authContext;\r\n  const alertContext = useContext(AlertContext);\r\n\r\n  const { addAlert } = alertContext;\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const {\r\n    newSubmit,\r\n    updateNewSubmit,\r\n    submitMode,\r\n    curSubmit,\r\n    updateCurSubmit,\r\n    submitToWatch,\r\n    submitErrors,\r\n  } = submitContext;\r\n\r\n  const [curDocument, setCurDocument] = useState(null);\r\n\r\n  const fileInputRef = createRef();\r\n  const openFileInput = (type) => {\r\n    if (submitMode === 'watch') return;\r\n    fileInputRef.current.name = type;\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  const deleteFile = async (e, id) => {\r\n    e.stopPropagation();\r\n    const res = await axios.delete(`/api/v1/files/${id}`);\r\n    addAlert(res.data);\r\n    if (submitMode === 'edit') {\r\n      await updateCurSubmit({\r\n        ...curSubmit,\r\n        [`${res.data.type}Id`]: null,\r\n        [`${res.data.type}Checksum`]: null, //virtual\r\n        [`${res.data.type}CreatedAt`]: null, //virtual\r\n      });\r\n    } else if (submitMode === 'new') {\r\n      await updateNewSubmit({\r\n        ...newSubmit,\r\n        [`${res.data.type}Id`]: null,\r\n        [`${res.data.type}Checksum`]: null, //virtual\r\n        [`${res.data.type}CreatedAt`]: null, //virtual\r\n      });\r\n    }\r\n  };\r\n\r\n  const callFetch = async (e, id) => {\r\n    e.stopPropagation();\r\n    const res = await axios.get(`/api/v1/files/info/${id}`);\r\n\r\n    axios\r\n      .get(`/api/v1/files/download/${id}`, {\r\n        responseType: 'blob',\r\n      })\r\n      .then((response) => {\r\n\r\n        const url = window.URL.createObjectURL(new Blob([response.data]));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', res.data.file.fileName); //or any other extension\r\n        document.body.appendChild(link);\r\n        link.click();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        addAlert(err.response.data);\r\n      });\r\n  };\r\n\r\n  const uploadImage = async (e) => {\r\n    const file = e.target.files[0];\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('type', fileInputRef.current.name);\r\n\r\n    try {\r\n      const res = await axios.post('/api/v1/files/upload', formData);\r\n\r\n      res.data.resStatus !== 'success' && addAlert(res.data);\r\n\r\n      if (submitMode === 'edit') {\r\n        await updateCurSubmit({\r\n          ...curSubmit,\r\n          [`${res.data.file.type}Id`]: res.data.file.id,\r\n          [`${res.data.file.type}Checksum`]: res.data.file.checksum, //virtual\r\n          [`${res.data.file.type}CreatedAt`]: res.data.file.createdAt, //virtual\r\n        });\r\n      } else if (submitMode === 'new') {\r\n        await updateNewSubmit({\r\n          ...newSubmit,\r\n          [`${res.data.file.type}Id`]: res.data.file.id,\r\n          [`${res.data.file.type}Checksum`]: res.data.file.checksum, //virtual\r\n          [`${res.data.file.type}CreatedAt`]: res.data.file.createdAt, //virtual\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetTimeLeft();\r\n    if (submitMode === 'new') {\r\n      setCurDocument(newSubmit);\r\n    } else if (submitMode === 'edit') {\r\n      setCurDocument(curSubmit);\r\n    } else if (submitMode === 'watch') {\r\n      setCurDocument(submitToWatch);\r\n    }\r\n  }, [submitMode, submitToWatch, newSubmit, curSubmit]);\r\n\r\n  return (\r\n    <Wrapper submitMode={submitMode}>\r\n      <SubALayout leadHeader='CZĘŚĆ A – ZAŁĄCZNIKI'>\r\n        <input\r\n          type='file'\r\n          hidden={true}\r\n          ref={fileInputRef}\r\n          onChange={uploadImage}\r\n        />\r\n        <Message info floating>\r\n          <Message.Header>Dodawanie załączników</Message.Header>\r\n          <p>\r\n            W tej części wniosku należy dodać 2 różne typy załączników:{' '}\r\n            <strong>Oświadczenie opiekuna dydaktycznego</strong> oraz{' '}\r\n            <strong>Świadectwo szkolne za ostatni rok szkolny</strong>\r\n            Pamiętaj, iż dopuszczalna wielkość każdego z plików (załączników) to\r\n            20MB. Dopuszatne formaty plików to: <strong> .pdf, .jpg. </strong>\r\n            oraz <strong>.png.</strong> Kliknij w odpowiednie pole, aby dodać\r\n            dokument właściwego typu. Jeśli chcesz zamienić plik, klikniej\r\n            ponownie we włąściwą część.\r\n          </p>\r\n        </Message>\r\n        <Card.Group itemsPerRow={4} stackable>\r\n          <Card className='card' onClick={() => openFileInput('statement')}>\r\n            {curDocument &&\r\n              (curDocument.statementId ? (\r\n<>\r\n                  <div className='img-button'>\r\n                    <Button\r\n                      onClick={(e) => callFetch(e, curDocument.statementId)}\r\n                      primary\r\n                      icon\r\n                      size='tiny'\r\n                      className='download-btn btn'\r\n                    >\r\n                      <Icon name='download' />\r\n                    </Button>\r\n                    <Button\r\n                      onClick={(e) => deleteFile(e, curDocument.statementId)}\r\n                      className='trash-btn btn'\r\n                      color='red'\r\n                      icon\r\n                      size='tiny'\r\n                    >\r\n                      <Icon name='trash' />\r\n                    </Button>\r\n                  </div>\r\n                  <Image\r\n                    fluid\r\n                    label={{\r\n                      as: 'div',\r\n                      color: 'green',\r\n                      content: 'Plik dodany',\r\n                      icon: 'thumbs up',\r\n                      ribbon: true,\r\n                    }}\r\n                    src={statementImg}\r\n                  />\r\n</>\r\n              ) : (\r\n                <Image\r\n                  fluid\r\n                  label={{\r\n                    as: 'div',\r\n                    color: 'red',\r\n                    content: 'Kliknij i dodaj plik',\r\n                    icon: 'upload',\r\n                    ribbon: true,\r\n                  }}\r\n                  src={addedImg}\r\n                />\r\n              ))}\r\n            {submitErrors?.statementId && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.statementId}\r\n              </Label>\r\n            )}\r\n            <Card.Content>\r\n              <Card.Header textAlign='left'>\r\n                Oświadczenie opiekuna dydaktycznego\r\n              </Card.Header>\r\n              <Card.Meta textAlign='left'>\r\n                {curDocument && curDocument.statementCreatedAt && (\r\n                  <span className='date'>\r\n                    Dodano:{' '}\r\n                    {toLocaleDate(curDocument?.statementCreatedAt)}\r\n                  </span>\r\n                )}\r\n              </Card.Meta>\r\n              <Card.Meta textAlign='left'>\r\n                {curDocument && curDocument.statementChecksum && (\r\n                  <div className='date' style={{ wordWrap: 'break-word' }}>\r\n                    Suma kontrolna pliku:{' '}\r\n                    <strong> {curDocument.statementChecksum}</strong>\r\n                  </div>\r\n                )}\r\n              </Card.Meta>\r\n            </Card.Content>\r\n          </Card>\r\n\r\n          <Card onClick={() => openFileInput('report_card')}>\r\n            {curDocument &&\r\n              (curDocument.report_cardId ? (\r\n                <div className='placeholder-image'>\r\n                  <div className='img-button'>\r\n                    <Button\r\n                      onClick={(e) => callFetch(e, curDocument.report_cardId)}\r\n                      primary\r\n                      icon\r\n                      size='tiny'\r\n                      className='download-btn btn'\r\n                    >\r\n                      <Icon name='download' />\r\n                    </Button>\r\n                    <Button\r\n\r\n                      onClick={(e) => deleteFile(e, curDocument.report_cardId)}\r\n                      className='trash-btn btn'\r\n                      color='red'\r\n                      icon\r\n                      size='tiny'\r\n                    >\r\n                      <Icon name='trash' />\r\n                    </Button>\r\n                  </div>\r\n                  <Image\r\n                    fluid\r\n                    label={{\r\n                      as: 'div',\r\n                      color: 'green',\r\n                      content: 'Plik dodany',\r\n                      icon: 'thumbs up',\r\n                      ribbon: true,\r\n                    }}\r\n                    src={reportImg}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <Image\r\n                  fluid\r\n                  label={{\r\n                    as: 'div',\r\n                    color: 'red',\r\n                    content: 'Kliknij i dodaj plik',\r\n                    icon: 'upload',\r\n                    ribbon: true,\r\n                  }}\r\n                  src={addedImg}\r\n                />\r\n              ))}\r\n\r\n            <Card.Content>\r\n              <Card.Header textAlign='left'>\r\n                {submitErrors?.report_cardId && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {submitErrors?.report_cardId}\r\n                  </Label>\r\n                )}\r\n                Świadectwo szkolne - ostatni rok szkolny\r\n              </Card.Header>\r\n              <Card.Meta textAlign='left'>\r\n                {curDocument && curDocument.report_cardCreatedAt && (\r\n                  <span className='date'>\r\n                    Dodano:{' '}\r\n                    {toLocaleDate(curDocument?.report_cardCreatedAt)}{' '}\r\n                  </span>\r\n                )}\r\n              </Card.Meta>\r\n              <Card.Meta textAlign='left'>\r\n                {curDocument && curDocument.report_cardChecksum && (\r\n                  <div className='date' style={{ wordWrap: 'break-word' }}>\r\n                    Suma kontrolna pliku:{' '}\r\n                    <strong> {curDocument.report_cardChecksum}</strong>\r\n                  </div>\r\n                )}\r\n              </Card.Meta>\r\n              <Card.Description textAlign='left'></Card.Description>\r\n            </Card.Content>\r\n          </Card>\r\n        </Card.Group>{' '}\r\n      </SubALayout>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Attachments;\r\n","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_III_IV.js",["367"],"import React, { useContext, useEffect } from 'react';\r\nimport { Form, Grid, Header, Label, Segment } from 'semantic-ui-react';\r\nimport SubALayout from '../subALayout';\r\nimport { SubmitContext, AuthContext } from '../../context';\r\nimport { optionsVoyev, optionsSchoolType, optionsProfile } from '../../parts';\r\n\r\nconst SubA_III_IV = () => {\r\n  const authContext = useContext(AuthContext);\r\n  const { resetTimeLeft } = authContext;\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const {\r\n    newSubmit,\r\n    updateNewSubmit,\r\n    submitMode,\r\n    curSubmit,\r\n    updateCurSubmit,\r\n    submitToWatch,\r\n    submitErrors,\r\n  } = submitContext;\r\n\r\n  const handleOnChange = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (submitMode === 'edit') {\r\n      await updateCurSubmit({\r\n        ...curSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    } else if (submitMode === 'new') {\r\n      await updateNewSubmit({\r\n        ...newSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetTimeLeft();\r\n  }, []);\r\n\r\n  return (\r\n    <SubALayout leadHeader='CZĘŚĆ A – INFORMACJE DOTYCZĄCE UCZNIA/UCZENNICY'>\r\n      <Grid.Column className='column'>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          III. DANE SZKOŁY:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              label='Pełna nazwa szkoły'\r\n              name='schoolName'\r\n              icon='building outline'\r\n              placeholder='Podaj pełną nazwę szkoły'\r\n              iconPosition='left'\r\n              onChange={(e) => handleOnChange(e)}\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.schoolName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.schoolName\r\n                  : submitToWatch?.schoolName) || ''\r\n              }\r\n            />\r\n\r\n            {submitErrors?.schoolName && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.schoolName}\r\n              </Label>\r\n            )}\r\n            <div className='select-wrapper'>\r\n              <Header className='select-header' as='h5'>\r\n                Profil doradcy\r\n              </Header>\r\n              <select\r\n                name='schoolType'\r\n                onChange={(e) => handleOnChange(e)}\r\n                value={\r\n                  (submitMode === 'edit'\r\n                    ? curSubmit?.schoolType\r\n                    : submitMode === 'new'\r\n                    ? newSubmit?.schoolType\r\n                    : submitToWatch?.schoolType) || 'default'\r\n                }\r\n              >\r\n                {optionsSchoolType.map((o) => (\r\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                    {o.text}\r\n                  </option>\r\n                ))}\r\n              </select>{' '}\r\n              {submitErrors?.schoolType && (\r\n                <Label basic color='red' pointing='above' className='select'>\r\n                  {submitErrors?.schoolType}\r\n                </Label>\r\n              )}\r\n            </div>\r\n\r\n            <div className='adress-wrapper'>\r\n              <Header as='h4'>Adres szkoły</Header>\r\n              <Segment>\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='user'\r\n                  iconPosition='left'\r\n                  placeholder='Podaj ulicę'\r\n                  name='schoolStreetName'\r\n                  value={\r\n                    (submitMode === 'edit'\r\n                      ? curSubmit?.schoolStreetName\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolStreetName\r\n                      : submitToWatch?.schoolStreetName) || ''\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                {submitErrors?.schoolStreetName && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {submitErrors?.schoolStreetName}\r\n                  </Label>\r\n                )}\r\n                <Form.Input\r\n                  className='input'\r\n                  // label='Adres szkoły (numer domu)'\r\n                  icon='phone'\r\n                  iconPosition='left'\r\n                  placeholder='Podaj numer domu'\r\n                  name='schoolStreetNr'\r\n                  value={\r\n                    (submitMode === 'edit'\r\n                      ? curSubmit?.schoolStreetNr\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolStreetNr\r\n                      : submitToWatch?.schoolStreetNr) || ''\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                {submitErrors?.schoolStreetNr && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {submitErrors?.schoolStreetNr}\r\n                  </Label>\r\n                )}\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='zip'\r\n                  iconPosition='left'\r\n                  placeholder='Podaj kod pocztowy w formacie XX-XXX'\r\n                  name='schoolZip'\r\n                  value={\r\n                    (submitMode === 'edit'\r\n                      ? curSubmit?.schoolZip\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolZip\r\n                      : submitToWatch?.schoolZip) || ''\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                {submitErrors?.schoolZip && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {submitErrors?.schoolZip}\r\n                  </Label>\r\n                )}\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='zip'\r\n                  iconPosition='left'\r\n                  // label='Adres szkoły (miejscowość)'\r\n                  placeholder='Podaj miejscowość'\r\n                  name='schoolTown'\r\n                  value={\r\n                    (submitMode === 'edit'\r\n                      ? curSubmit?.schoolTown\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolTown\r\n                      : submitToWatch?.schoolTown) || ''\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                {submitErrors?.schoolTown && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {submitErrors?.schoolTown}\r\n                  </Label>\r\n                )}\r\n                <div className='select-wrapper'>\r\n                  <select\r\n                    name='schoolVoyev'\r\n                    onChange={(e) => handleOnChange(e)}\r\n                    value={\r\n                      (submitMode === 'edit'\r\n                        ? curSubmit?.schoolVoyev\r\n                        : submitMode === 'new'\r\n                        ? newSubmit?.schoolVoyev\r\n                        : submitToWatch?.schoolVoyev) || 'default'\r\n                    }\r\n                  >\r\n                    {optionsVoyev.map((o) => (\r\n                      <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                        {o.text}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {submitErrors?.schoolVoyev && (\r\n                    <Label\r\n                      basic\r\n                      color='red'\r\n                      pointing='above'\r\n                      className='select'\r\n                    >\r\n                      {submitErrors?.schoolVoyev}\r\n                    </Label>\r\n                  )}\r\n                </div>\r\n              </Segment>\r\n            </div>\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n      <Grid.Column>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          IV. DANE OPIEKUNA DYDAKTYCZNEGO:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              icon='user'\r\n              iconPosition='left'\r\n              label='Imię doradcy'\r\n              name='counselorFirstName'\r\n              placeholder='Podaj imię doradcy'\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.counselorFirstName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.counselorFirstName\r\n                  : submitToWatch?.counselorFirstName) || ''\r\n              }\r\n              onChange={(e) => handleOnChange(e)}\r\n            />\r\n            {submitErrors?.counselorFirstName && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.counselorFirstName}\r\n              </Label>\r\n            )}\r\n            <Form.Input\r\n              icon='user'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Nazwisko doradcy'\r\n              name='counselorLastName'\r\n              placeholder='Podaj nazwisko doradcy'\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.counselorLastName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.counselorLastName\r\n                  : submitToWatch?.counselorLastName) || ''\r\n              }\r\n              onChange={(e) => handleOnChange(e)}\r\n            />\r\n            {submitErrors?.counselorLastName && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.counselorLastName}\r\n              </Label>\r\n            )}\r\n            <div className='select-wrapper'>\r\n              <Header className='select-header' as='h5'>\r\n                Profil doradcy\r\n              </Header>\r\n              <select\r\n                name='counselorProfile'\r\n                onChange={(e) => handleOnChange(e)}\r\n                placeholder='Wybierz profil doradcy'\r\n                value={\r\n                  (submitMode === 'edit'\r\n                    ? curSubmit?.counselorProfile\r\n                    : submitMode === 'new'\r\n                    ? newSubmit?.counselorProfile\r\n                    : submitToWatch?.counselorProfile) || 'default'\r\n                }\r\n              >\r\n                {optionsProfile.map((o) => (\r\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                    {o.text}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {submitErrors?.counselorProfile && (\r\n                <Label basic color='red' pointing='above' className='select'>\r\n                  {submitErrors?.counselorProfile}\r\n                </Label>\r\n              )}\r\n            </div>\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n    </SubALayout>\r\n  );\r\n};\r\n\r\nexport default SubA_III_IV;\r\n","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertContext.js",[],"C:\\dev\\stypendia\\client\\src\\context\\app\\appState.js",[],"C:\\dev\\stypendia\\client\\src\\context\\submit\\submitContext.js",[],"C:\\dev\\stypendia\\client\\src\\context\\alert\\AlertState.js",[],"C:\\dev\\stypendia\\client\\src\\context\\submit\\submitState.js",[],"C:\\dev\\stypendia\\client\\src\\context\\app\\appContext.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\changePass.js",["368"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport { Wrapper } from './styles/changePass.styles';\r\nimport Title from '../components/Title';\r\nimport {AlertContext,AppContext,AuthContext} from '../context';\r\nimport { changePassInputs } from '../parts/inputs';\r\n\r\nconst ChangePass = ({ history }) => {\r\n    const authContext = useContext(AuthContext);\r\n    const { resetTimeLeft } = authContext;\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    // const csrfData = await axios.get('/api/v1/csrf');\r\n    setIsLoading(true);\r\n    // const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n\r\n    axios\r\n      .post(`/api/v1/changepass`, body)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          await setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n    useEffect(() => {\r\n      resetTimeLeft();\r\n    }, []);\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <Title content='Zmiana hasła' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Message className='msg' info size='small' floating>\r\n            <Message.Header>Zmiana hasła</Message.Header>\r\n            <p>\r\n              Strona służy do zmiany hasła. Podaj obowiązujące i nowe hasło i\r\n              zapisz zmiany. Pamiętaj, aby nowe hasło posiadało co najmniej 1\r\n              wielką literę, 1 małą oraz 1 cyfrę.\r\n            </p>\r\n          </Message>\r\n          <Grid columns={1} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value=''></input>\r\n                {changePassInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        className='input'\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          className='small'\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Zmień hasło'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ChangePass;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\login.js",["369","370"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport { Wrapper } from './styles/login.styles';\r\nimport {Title} from '../components';\r\nimport {AlertContext, AppContext,AuthContext} from '../context';\r\nimport { loginInputs } from '../parts/inputs';\r\n\r\nconst Login = () => {\r\n  const history = useHistory()\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading, saveRollbar } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n\r\n    setIsLoading(true);\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`/api/v1/users/login`, newBody)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setIsLoading(false);\r\n          // saveRollbar(data.data);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        // saveRollbar({ err: err.response.data.message, page: 'login' });\r\n        if (err.response?.data?.forcePassChange) {\r\n          addAlert(err.response.data);\r\n          setIsLoading(false);\r\n          history.push(\r\n            `/reset?id=${err.response.data.resetId}&token=${err.response.data.token}`\r\n          );\r\n\r\n          return;\r\n        }\r\n\r\n        if (err.response?.data?.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response?.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Logowanie' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Grid columns={2} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value='_csrf'></input>\r\n                {loginInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        className='input'\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          className='small'\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <span>{}</span>\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Zaloguj się !'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n              <Link to='/resetsend'>\r\n                <div className='buttonWrapper'>\r\n                  <div className='span'>Zapomniałeś hasła?</div>\r\n                  <Button content='Resetuj hasło' icon='recycle' size='mini' />\r\n                </div>\r\n              </Link>\r\n            </Grid.Column>\r\n\r\n            <Grid.Column verticalAlign='middle'>\r\n              <Link to='/register'>\r\n                <Button content='Zarejestruj się' icon='user plus' size='big' />\r\n              </Link>\r\n            </Grid.Column>\r\n          </Grid>\r\n\r\n          <Divider className='divider' content='lub' vertical />\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\reset.js",["371"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport {Wrapper} from './styles/reset.styles'\r\nimport {Title} from '../components';\r\nimport {AlertContext,AuthContext , AppContext}from '../context';\r\nimport { resetInputs } from '../parts/inputs';\r\n\r\nconst Reset = ({ location, history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n    const appContext = useContext(AppContext);\r\n    const { setIsLoading, isLoading } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    setIsLoading(true);\r\n    setErrors('');\r\n    e.preventDefault();\r\n    // const csrfData = await axios.get('/api/v1/csrf');\r\n    // const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`/api/v1/password/reset${location.search}`, body)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/login');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n   \r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Nowe hasło' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Message className='msg' info size='small' floating>\r\n            <Message.Header>Nowe hasło</Message.Header>\r\n            <p>\r\n              Strona służy do nadawania nowego hasła. Podaj niezbędne dane i\r\n              zapisz zmiany. Pamiętaj, aby nowe hasło posiadało co najmniej 1\r\n              wielką literę, 1 małą oraz 1 cyfrę.\r\n            </p>\r\n          </Message>\r\n          <Grid columns={1} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value=''></input>\r\n                {resetInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        className='input'\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          className='small'\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Zapisz nowe hasło'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default Reset;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\register.js",["372"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Container,\r\n  Divider,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport { Wrapper } from './styles/register.styles';\r\nimport {Rodo,Title}  from '../components';\r\nimport { registerInputs } from '../parts/inputs';\r\nimport {AlertContext, AppContext,AuthContext } from '../context';\r\n\r\nconst Register = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\r\n  isLoggedIn && props.history.push('/');\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isRodoChecked, setIsRodoChecked] = useState(false);\r\n  const [isRegulationsChecked, setIsRegulationsChecked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n  }, []);\r\n\r\n  const handleOnClick = async (e) => {\r\n    setErrors('');\r\n    e.preventDefault();\r\n    // const csrfData = await axios.get('/api/v1/csrf');\r\n    setIsLoading(true);\r\n    // const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`/api/v1/users`, body)\r\n      .then((data) => {\r\n        console.log(data.data);\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          setIsLoading(false);\r\n          setTimeout(() => props.history.push('/login'), 1500);\r\n          addAlert(data.data);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        setErrors(err.response.data);\r\n        addAlert(err.response.data);\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div className='main'>\r\n        <Title content='Dodawanie konta' />\r\n        <Segment placeholder size='large'>\r\n          <Grid columns={2} relaxed='very' stackable>\r\n            <Grid.Column textAlign='left' verticalAlign='middle'>\r\n              <Header textAlign='center'>\r\n                Potwierdź niezbędne oświadczenia\r\n              </Header>\r\n\r\n              <Checkbox\r\n                onChange={() => setIsRegulationsChecked(!isRegulationsChecked)}\r\n                // value={isRegulationsChecked}\r\n                checked={isRegulationsChecked}\r\n                label={\r\n                  <label>\r\n                    Oświadczam, iż zapoznałam/em się z regulaminem i akceptuję\r\n                    jego postanowienia <span>*</span>\r\n                  </label>\r\n                }\r\n              />\r\n\r\n              <Rodo />\r\n\r\n              <Checkbox\r\n                onChange={() => setIsRodoChecked(!isRodoChecked)}\r\n                // value={isRodoChecked}\r\n                checked={isRodoChecked}\r\n                className='checkBox'\r\n                required\r\n                label={\r\n                  <label>\r\n                    Oświadczam, iż zapoznałam/em się z powyższą informacją.\r\n                    <span> *</span>\r\n                  </label>\r\n                }\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n              <Container>\r\n                <Header>... podaj swoje dane</Header>\r\n                <Form>\r\n                  <input type='hidden' name='_csrf' value='_csrf'></input>\r\n                  {registerInputs.map((input) => {\r\n                    return (\r\n                      <div key={input.id}>\r\n                        <Form.Input\r\n                          loading={isLoading}\r\n                          onChange={(e) => handleOnChange(e)}\r\n                          required\r\n                          className='input'\r\n                          icon={input.icon}\r\n                          iconPosition='left'\r\n                          label={input.label}\r\n                          placeholder={input.placeholder}\r\n                          type={input.type}\r\n                          name={input.name}\r\n                        />\r\n                        {errors && errors[input.name] && (\r\n                          <Label\r\n                            basic\r\n                            color='red'\r\n                            pointing='above'\r\n                            key={input.id}\r\n                            className='small'\r\n                          >\r\n                            {errors[input.name]}\r\n                          </Label>\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  <Button\r\n                    loading={isLoading}\r\n                    type='submit'\r\n                    content='Zarejestruj się'\r\n                    primary\r\n                    size='large'\r\n                    onClick={handleOnClick}\r\n                    disabled={\r\n                      !isRegulationsChecked || !isRodoChecked ? true : false\r\n                    }\r\n                  />\r\n                </Form>\r\n                <Link to='/login'>\r\n                  <div className='buttonWrapper'>\r\n                    <div className='span'>Masz już konto?</div>\r\n                    <Button content='Zaloguj się' icon='user' size='mini' />\r\n                  </div>\r\n                </Link>\r\n              </Container>\r\n            </Grid.Column>\r\n          </Grid>\r\n\r\n          <Divider className='divider' content='Oraz'vertical/>\r\n        </Segment>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\resend.js",["373"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\n\r\nimport { Wrapper } from './styles/resend.styles';\r\nimport {Title} from '../components';\r\nimport {AlertContext, AuthContext,AppContext} from '../context';\r\n\r\nconst Resend = ({ history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [email, setEmail] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    setErrors('');\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    // const csrfData = await axios.get('/api/v1/csrf');\r\n    // const newBody = { email, _csrf: csrfData.data.csrfToken };\r\n    axios\r\n      .post(`/api/v1/email/resend`, {email})\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Potwierdzanie konta' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Message className='msg' info size='small' floating>\r\n            <Message.Header>\r\n              Ponowne wysłanie linka do potwierdzenia konta\r\n            </Message.Header>\r\n            <p>\r\n              Strona służy do ponownego wysłania linka potwierdzającego konto,\r\n              jeżeli konto już założyłaś/eś, ale nie skorzystałaś/eś z niego w\r\n              odpowiednim czasie. Link zostanie przesłany na podany adres email\r\n              i będzie ważny przez <strong>12 godzin</strong> . Jeżeli nie\r\n              znajdziesz linka sprawdź folder <strong> spam</strong> w Twojej\r\n              poczcie.\r\n            </p>\r\n          </Message>\r\n          <Grid columns={1} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value=''></input>\r\n                <Form.Input\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  required\r\n                  className='input'\r\n                  icon='mail'\r\n                  iconPosition='left'\r\n                  label='Email'\r\n                  placeholder='Podaj email'\r\n                  type='email'\r\n                  name='email'\r\n                />\r\n\r\n                {errors && errors.email && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {errors.email}\r\n                  </Label>\r\n                )}\r\n\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Wyślij link'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Resend;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\profile.js",["374"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, Container, Header, Icon } from 'semantic-ui-react';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport { Wrapper } from './styles/profile.styles';\r\nimport { AuthContext, AppContext, AlertContext } from '../context';\r\nimport { Title, Confirm } from '../components';\r\nimport { capitalize, toLocaleDate } from '../utils';\r\nimport axios from 'axios';\r\n\r\nconst Profile = () => {\r\n  const history = useHistory();\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading } = appContext;\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { checkIsAuthenticated, isLoggedIn, user, resetTimeLeft, logOut } = authContext;\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const handleDelete = async () => {\r\n    setIsLoading(true);\r\n    // const csrfData = await axios.get('/api/v1/csrf');\r\n    axios\r\n      .put(`/api/v1/users/${user.uuid}`\r\n      // , { _csrf: csrfData.data.csrfToken }\r\n      )\r\n      .then(async (data) => {\r\n        console.log(data);\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {    setOpenConfirm(false)\r\n          setIsLoading(false);\r\n          logOut()\r\n          history.push('/register');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (err.response?.data?.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n\r\n        }\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    resetTimeLeft();\r\n    !isLoggedIn && history.push('/login');\r\n  }, [isLoggedIn, openConfirm]);\r\n  return (\r\n    <Wrapper>\r\n      <Confirm\r\n        openConfirm={openConfirm}\r\n        setOpenConfirm={setOpenConfirm}\r\n        greenButton='Nie, rezygnuję'\r\n        redButton={'Tak, usuń konto'}\r\n        greenAction={() => setOpenConfirm(false)}\r\n        redAction={handleDelete}\r\n        title='Usuwanie konta'\r\n        content='Zamierzasz usunąć konto. Pamiętaj, że usunięcie konta oznacza usunięcie użytkownika, jego wniosków, kopii roboczych. Usunięcie konta nie jest możliwe, jeżeli złożyłaś/eś już wniosek. Czy jesteś pewna/y?'\r\n      />\r\n      <Title content='Twoje dane' />\r\n      <Container className='container'>\r\n        <Header as='h2' icon textAlign='center'>\r\n          <Icon name='user' circular />\r\n          <Header.Content>\r\n            {user.firstName} {user.lastName}{' '}\r\n          </Header.Content>\r\n        </Header>\r\n        <Header\r\n          className='header'\r\n          textAlign='left'\r\n          as='h2'\r\n          content={capitalize(user.role)}\r\n          subheader='Typ posiadanego konta / poziom uprawnień'\r\n          dividing\r\n        />\r\n        <Header\r\n          className='header'\r\n          textAlign='left'\r\n          as='h2'\r\n          content={user.login}\r\n          subheader='Nazwa użytkownika / służy do logowania i odzyskiwania hasła'\r\n          dividing\r\n        />\r\n        <Header\r\n          className='header'\r\n          textAlign='left'\r\n          as='h2'\r\n          content={user.email}\r\n          subheader='Email użytkownika / służy do odzyskiwania hasła oraz kontaktu z użytkownikiem'\r\n          dividing\r\n        />\r\n        <Header\r\n          className='header'\r\n          textAlign='left'\r\n          as='h3'\r\n          content={toLocaleDate(user.verifiedAt)}\r\n          subheader='Data potwierdzenia konta'\r\n          dividing\r\n        />\r\n        <Header className='header' textAlign='left' as='h3' dividing>\r\n          {toLocaleDate(user.lastPassChangeAt)}\r\n          <Header.Subheader>\r\n            Ostatnia zmiana hasła{' '}\r\n            <Link to='/changepass'>\r\n              <Button className='link' primary floated='right' size='large'>\r\n                <Icon name='exchange' />\r\n                Zmień hasło\r\n              </Button>\r\n            </Link>\r\n          </Header.Subheader>\r\n        </Header>\r\n\r\n        <Header className='header' textAlign='left' as='h3' dividing>\r\n          Usuwanie konta\r\n          <Header.Subheader>\r\n            Ostatnia zmiana hasła{' '}\r\n            <Button\r\n              onClick={() => setOpenConfirm(true)}\r\n              className='link'\r\n              negative\r\n              floated='right'\r\n              size='small'\r\n\r\n            >\r\n              <Icon name='trash' />\r\n              Usuń konto\r\n            </Button>\r\n          </Header.Subheader>\r\n        </Header>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\dev\\stypendia\\client\\src\\components\\Nav.js",["375","376"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  AlertContext,\r\n  AppContext,\r\n  AuthContext,\r\n  SubmitContext,\r\n} from '../context';\r\nimport { Wrapper } from './styles/nav.styles';\r\n\r\nconst Nav = ({ activeItem, setActiveItem, ...props }) => {\r\n  let history = useHistory();\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { resetTimeLeft } = authContext;\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const { newSubmit, submitMode, curSubmit, setSubmitErrors } = submitContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  // const [errors, setErrors] = useState('');\r\n\r\n  const addNewSubmit = async (submit) => {\r\n    setIsLoading(true);\r\n     setSubmitErrors('');\r\n    // const csrfData = await axios.get('/api/v1/csrf');\r\n    const newSubmit = { ...submit\r\n      // , _csrf: csrfData.data.csrfToken\r\n    };\r\n    axios\r\n      .post('/api/v1/submits', newSubmit)\r\n      .then((data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n        }\r\n        setIsLoading(false);\r\n        history.push('/');\r\n      })\r\n      .catch((err) => {\r\n        if (err.response) {\r\n          console.log(err.response.data);\r\n          setSubmitErrors(err.response?.data);\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n      });\r\n  };\r\n\r\n  const updateSubmit = async (submit) => {\r\n    setIsLoading(true);\r\n    setSubmitErrors('');\r\n    // const csrfData = await axios.get('/api/v1/csrf');\r\n    const newSubmit = { ...submit\r\n      // , _csrf: csrfData.data.csrfToken\r\n     };\r\n    axios\r\n      .put('/api/v1/submits', newSubmit)\r\n      .then((data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (err.response) {\r\n          console.log(err.response.data);\r\n          setSubmitErrors(err.response?.data);\r\n          setIsLoading(false);\r\n\r\n          return;\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetTimeLeft();\r\n  }, []);\r\n\r\n  return (\r\n    <Wrapper mode={submitMode}>\r\n      <Button.Group size='medium'>\r\n        <Button\r\n          onClick={() => setActiveItem(activeItem - 1)}\r\n          className='nav-button'\r\n          labelPosition='left'\r\n          icon='left chevron'\r\n          content='Wróć'\r\n        />\r\n        <Button\r\n          className='nav-button save'\r\n          onClick={() => updateSubmit(curSubmit)}\r\n          primary\r\n          loading={isLoading}\r\n          icon='save'\r\n          content='Zapisz'\r\n        />\r\n\r\n        <Button\r\n          className='nav-button submit'\r\n          positive\r\n          loading={isLoading}\r\n          onClick={() => addNewSubmit(newSubmit)}\r\n          icon='thumbs up'\r\n          content='Złóż'\r\n        />\r\n        <Button\r\n          onClick={() => setActiveItem(activeItem + 1)}\r\n          className='nav-button'\r\n          labelPosition='right'\r\n          icon='right chevron'\r\n          content='Dalej'\r\n        />\r\n      </Button.Group>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","C:\\dev\\stypendia\\client\\src\\context\\auth\\AuthState.js",["377"],"import React, { useContext, useEffect, useReducer } from 'react';\r\nimport authReducer from './authReducer';\r\nimport AuthContext from './authContext';\r\nimport axios from 'axios';\r\nimport AlertContext from '../../context/alert/alertContext';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport {\r\n  SET_USER,\r\n  CHECK_IS_LOGGED_IN,\r\n  LOGOUT_USER,\r\n  RESET_TIME_LEFT,\r\n  SET_TIME,\r\n} from '../types';\r\n\r\nconst AuthState = ({ children }) => {\r\n  const history = useHistory();\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const initialState = {\r\n    user: null,\r\n    timeLeft: +process.env.REACT_APP_SESSION_TIMEOUT,\r\n    isLoggedIn: false,\r\n  };\r\n\r\n  const checkIsAuthenticated = async () => {\r\n    const result = await (\r\n      await fetch('api/v1/users/me', {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n    ).json();\r\n    result.resStatus === 'success' ? setIsLoggedIn(true) : setIsLoggedIn(false);\r\n\r\n    setUser(result.user);\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  const setUser = (user) => {\r\n    dispatch({\r\n      type: SET_USER,\r\n      payload: user,\r\n    });\r\n  };\r\n\r\n  const setIsLoggedIn = (is) => {\r\n    dispatch({\r\n      type: CHECK_IS_LOGGED_IN,\r\n      payload: is,\r\n    });\r\n  };\r\n\r\n  const resetTimeLeft = () => {\r\n    dispatch({\r\n      type: RESET_TIME_LEFT,\r\n    });\r\n  };\r\n\r\n  const setTimeLeft = (time) => {\r\n    dispatch({\r\n      type: SET_TIME,\r\n      payload: time,\r\n    });\r\n  };\r\n\r\n  const logOut = () => {\r\n    axios\r\n      .get('/api/v1/users/logout')\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          history.push('/login');\r\n        }\r\n\r\n        dispatch({\r\n          type: LOGOUT_USER,\r\n        });\r\n      })\r\n      .catch(\r\n        (err) => console.log(err.message)\r\n        //   if (err.response.data.alertTitle) {\r\n        //     console.log(err.response.data);\r\n\r\n        //     addAlert(err.response.data);\r\n        //   }\r\n        // });\r\n      );\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user: state.user,\r\n        setUser,\r\n        logOut,\r\n        checkIsAuthenticated,\r\n        isLoggedIn: state.isLoggedIn,\r\n        timeLeft: state.timeLeft,\r\n        resetTimeLeft,\r\n        setTimeLeft,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthState;\r\n","C:\\dev\\stypendia\\client\\src\\components\\styles\\rodo.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\errors.style.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\home.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\submit.styles.js",[],"C:\\dev\\stypendia\\client\\src\\parts\\inputs.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\verify.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\resetSend.styles.js",[],"C:\\dev\\stypendia\\client\\src\\hooks\\useFetch.js",["378"],"import axios from 'axios';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport { AlertContext, AppContext, AuthContext } from '../context';\r\n\r\nconst useFetch = (url) => {\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { resetTimeLeft, isLoggedIn } = authContext;\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    isLoggedIn &&\r\n    axios\r\n      .get(`/api/v1/${url}`)\r\n      .then((data) => {\r\n        setData(data.data.data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data) {\r\n          addAlert(err.response.data);\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n      });\r\n    resetTimeLeft();\r\n  }, []);\r\n\r\n  return { data };\r\n};\r\n\r\nexport default useFetch;\r\n","C:\\dev\\stypendia\\client\\src\\context\\types.js",[],"C:\\dev\\stypendia\\client\\src\\utils\\mapErrors.js",["379"],"export const mapErrors = (object) => {\r\n  if (!object) return;\r\n  const errors = [];\r\n  for (const [key, value] of Object.entries(object)) {\r\n    errors.push(value);\r\n  }\r\n\r\n  return errors;\r\n};\r\n","C:\\dev\\stypendia\\client\\src\\components\\styles\\nav.styles.js",[],"C:\\dev\\stypendia\\client\\src\\context\\auth\\authReducer.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\profile.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\resend.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\register.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\reset.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\login.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\changePass.styles.js",[],"C:\\dev\\stypendia\\client\\src\\context\\submit\\submitReducer.js",[],"C:\\dev\\stypendia\\client\\src\\context\\alert\\alertReducer.js",[],"C:\\dev\\stypendia\\client\\src\\context\\app\\appReducer.js",[],"C:\\dev\\stypendia\\client\\src\\services\\index.js",[],"C:\\dev\\stypendia\\client\\src\\utils\\index.js",[],"C:\\dev\\stypendia\\client\\src\\parts\\index.js",[],"C:\\dev\\stypendia\\client\\src\\services\\fetchPdf.js",[],"C:\\dev\\stypendia\\client\\src\\utils\\capitalize.js",[],"C:\\dev\\stypendia\\client\\src\\utils\\toLocaleDate.js",[],"C:\\dev\\stypendia\\client\\src\\services\\saveRollbar.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\attachments.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\404.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\alert.styles.js",[],"C:\\dev\\stypendia\\client\\src\\parts\\options.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\logout.styles.js",[],{"ruleId":"380","replacedBy":"381"},{"ruleId":"382","replacedBy":"383"},{"ruleId":"384","severity":1,"message":"385","line":2,"column":8,"nodeType":"386","messageId":"387","endLine":2,"endColumn":13},{"ruleId":"388","severity":1,"message":"389","line":29,"column":6,"nodeType":"390","endLine":29,"endColumn":16,"suggestions":"391"},{"ruleId":"384","severity":1,"message":"392","line":13,"column":21,"nodeType":"386","messageId":"387","endLine":13,"endColumn":33},{"ruleId":"393","severity":1,"message":"394","line":19,"column":16,"nodeType":"395","endLine":19,"endColumn":29},{"ruleId":"393","severity":1,"message":"396","line":21,"column":16,"nodeType":"395","endLine":21,"endColumn":31},{"ruleId":"393","severity":1,"message":"396","line":25,"column":16,"nodeType":"395","endLine":25,"endColumn":31},{"ruleId":"393","severity":1,"message":"396","line":27,"column":16,"nodeType":"395","endLine":27,"endColumn":31},{"ruleId":"393","severity":1,"message":"394","line":30,"column":16,"nodeType":"395","endLine":30,"endColumn":29},{"ruleId":"388","severity":1,"message":"397","line":35,"column":6,"nodeType":"390","endLine":35,"endColumn":18,"suggestions":"398"},{"ruleId":"384","severity":1,"message":"399","line":33,"column":17,"nodeType":"386","messageId":"387","endLine":33,"endColumn":25},{"ruleId":"388","severity":1,"message":"400","line":49,"column":6,"nodeType":"390","endLine":49,"endColumn":18,"suggestions":"401"},{"ruleId":"384","severity":1,"message":"402","line":5,"column":3,"nodeType":"386","messageId":"387","endLine":5,"endColumn":9},{"ruleId":"384","severity":1,"message":"403","line":6,"column":3,"nodeType":"386","messageId":"387","endLine":6,"endColumn":8},{"ruleId":"388","severity":1,"message":"404","line":19,"column":6,"nodeType":"390","endLine":19,"endColumn":8,"suggestions":"405"},{"ruleId":"388","severity":1,"message":"404","line":24,"column":6,"nodeType":"390","endLine":24,"endColumn":8,"suggestions":"406"},{"ruleId":"388","severity":1,"message":"404","line":39,"column":6,"nodeType":"390","endLine":39,"endColumn":12,"suggestions":"407"},{"ruleId":"384","severity":1,"message":"408","line":2,"column":10,"nodeType":"386","messageId":"387","endLine":2,"endColumn":19},{"ruleId":"384","severity":1,"message":"409","line":15,"column":9,"nodeType":"386","messageId":"387","endLine":15,"endColumn":22},{"ruleId":"410","severity":1,"message":"411","line":14,"column":32,"nodeType":"412","messageId":"413","endLine":14,"endColumn":34},{"ruleId":"388","severity":1,"message":"404","line":40,"column":6,"nodeType":"390","endLine":40,"endColumn":8,"suggestions":"414"},{"ruleId":"388","severity":1,"message":"404","line":124,"column":6,"nodeType":"390","endLine":124,"endColumn":55,"suggestions":"415"},{"ruleId":"388","severity":1,"message":"404","line":40,"column":6,"nodeType":"390","endLine":40,"endColumn":8,"suggestions":"416"},{"ruleId":"388","severity":1,"message":"404","line":63,"column":8,"nodeType":"390","endLine":63,"endColumn":10,"suggestions":"417"},{"ruleId":"384","severity":1,"message":"418","line":25,"column":36,"nodeType":"386","messageId":"387","endLine":25,"endColumn":47},{"ruleId":"388","severity":1,"message":"397","line":36,"column":6,"nodeType":"390","endLine":36,"endColumn":18,"suggestions":"419"},{"ruleId":"388","severity":1,"message":"397","line":34,"column":6,"nodeType":"390","endLine":34,"endColumn":18,"suggestions":"420"},{"ruleId":"388","severity":1,"message":"421","line":38,"column":6,"nodeType":"390","endLine":38,"endColumn":8,"suggestions":"422"},{"ruleId":"388","severity":1,"message":"397","line":33,"column":6,"nodeType":"390","endLine":33,"endColumn":18,"suggestions":"423"},{"ruleId":"388","severity":1,"message":"424","line":53,"column":6,"nodeType":"390","endLine":53,"endColumn":31,"suggestions":"425"},{"ruleId":"384","severity":1,"message":"426","line":1,"column":40,"nodeType":"386","messageId":"387","endLine":1,"endColumn":48},{"ruleId":"388","severity":1,"message":"404","line":86,"column":6,"nodeType":"390","endLine":86,"endColumn":8,"suggestions":"427"},{"ruleId":"388","severity":1,"message":"421","line":98,"column":6,"nodeType":"390","endLine":98,"endColumn":8,"suggestions":"428"},{"ruleId":"388","severity":1,"message":"429","line":34,"column":6,"nodeType":"390","endLine":34,"endColumn":8,"suggestions":"430"},{"ruleId":"384","severity":1,"message":"431","line":4,"column":15,"nodeType":"386","messageId":"387","endLine":4,"endColumn":18},"no-native-reassign",["432"],"no-negated-in-lhs",["433"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'logOut' and 'setTimeLeft'. Either include them or remove the dependency array.","ArrayExpression",["434"],"'setHasOwnSub' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component SubA_I_II must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component SubA_III_IV must be in PascalCase or SCREAMING_SNAKE_CASE","React Hook useEffect has missing dependencies: 'checkIsAuthenticated' and 'history'. Either include them or remove the dependency array.",["435"],"'setQuery' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addAlert', 'checkIsAuthenticated', 'query', and 'setIsLoading'. Either include them or remove the dependency array.",["436"],"'Header' is defined but never used.","'Label' is defined but never used.","React Hook useEffect has a missing dependency: 'resetTimeLeft'. Either include it or remove the dependency array.",["437"],["438"],["439"],"'useEffect' is defined but never used.","'handleConfirm' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["440"],["441"],["442"],["443"],"'saveRollbar' is assigned a value but never used.",["444"],["445"],"React Hook useEffect has a missing dependency: 'checkIsAuthenticated'. Either include it or remove the dependency array.",["446"],["447"],"React Hook useEffect has missing dependencies: 'checkIsAuthenticated', 'history', and 'resetTimeLeft'. Either include them or remove the dependency array.",["448"],"'useState' is defined but never used.",["449"],["450"],"React Hook useEffect has missing dependencies: 'addAlert', 'isLoggedIn', 'resetTimeLeft', 'setIsLoading', and 'url'. Either include them or remove the dependency array.",["451"],"'key' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"458","fix":"460"},{"desc":"461","fix":"462"},{"desc":"458","fix":"463"},{"desc":"464","fix":"465"},{"desc":"458","fix":"466"},{"desc":"458","fix":"467"},{"desc":"454","fix":"468"},{"desc":"454","fix":"469"},{"desc":"470","fix":"471"},{"desc":"454","fix":"472"},{"desc":"473","fix":"474"},{"desc":"458","fix":"475"},{"desc":"470","fix":"476"},{"desc":"477","fix":"478"},"Update the dependencies array to be: [logOut, setTimeLeft, timeLeft]",{"range":"479","text":"480"},"Update the dependencies array to be: [checkIsAuthenticated, history, isLoggedIn]",{"range":"481","text":"482"},"Update the dependencies array to be: [addAlert, checkIsAuthenticated, isLoggedIn, query, setIsLoading]",{"range":"483","text":"484"},"Update the dependencies array to be: [resetTimeLeft]",{"range":"485","text":"486"},{"range":"487","text":"486"},"Update the dependencies array to be: [data, resetTimeLeft]",{"range":"488","text":"489"},{"range":"490","text":"486"},"Update the dependencies array to be: [submitMode, submitToWatch, newSubmit, curSubmit, resetTimeLeft]",{"range":"491","text":"492"},{"range":"493","text":"486"},{"range":"494","text":"486"},{"range":"495","text":"482"},{"range":"496","text":"482"},"Update the dependencies array to be: [checkIsAuthenticated]",{"range":"497","text":"498"},{"range":"499","text":"482"},"Update the dependencies array to be: [checkIsAuthenticated, history, isLoggedIn, openConfirm, resetTimeLeft]",{"range":"500","text":"501"},{"range":"502","text":"486"},{"range":"503","text":"498"},"Update the dependencies array to be: [addAlert, isLoggedIn, resetTimeLeft, setIsLoading, url]",{"range":"504","text":"505"},[1079,1089],"[logOut, setTimeLeft, timeLeft]",[949,961],"[checkIsAuthenticated, history, isLoggedIn]",[1306,1318],"[addAlert, checkIsAuthenticated, isLoggedIn, query, setIsLoading]",[579,581],"[resetTimeLeft]",[605,607],[1090,1096],"[data, resetTimeLeft]",[1042,1044],[3999,4048],"[submitMode, submitToWatch, newSubmit, curSubmit, resetTimeLeft]",[1071,1073],[1779,1781],[1018,1030],[950,962],[1146,1148],"[checkIsAuthenticated]",[895,907],[1705,1730],"[checkIsAuthenticated, history, isLoggedIn, openConfirm, resetTimeLeft]",[2405,2407],[2243,2245],[915,917],"[addAlert, isLoggedIn, resetTimeLeft, setIsLoading, url]"]