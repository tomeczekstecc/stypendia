[{"C:\\dev\\stypendia\\client\\src\\index.js":"1","C:\\dev\\stypendia\\client\\src\\App.js":"2","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\Layout.js":"3","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\MainMenu.js":"4","C:\\dev\\stypendia\\client\\src\\pages\\login.js":"5","C:\\dev\\stypendia\\client\\src\\pages\\register.js":"6","C:\\dev\\stypendia\\client\\src\\pages\\home.js":"7","C:\\dev\\stypendia\\client\\src\\components\\Rodo.js":"8","C:\\dev\\stypendia\\client\\src\\components\\Title.js":"9","C:\\dev\\stypendia\\client\\src\\context\\auth\\AuthState.js":"10","C:\\dev\\stypendia\\client\\src\\context\\auth\\authReducer.js":"11","C:\\dev\\stypendia\\client\\src\\context\\types.js":"12","C:\\dev\\stypendia\\client\\src\\context\\auth\\authContext.js":"13","C:\\dev\\stypendia\\client\\src\\components\\alert\\Alert.js":"14","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertContext.js":"15","C:\\dev\\stypendia\\client\\src\\pages\\verify.js":"16","C:\\dev\\stypendia\\client\\src\\context\\alert\\AlertState.js":"17","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertReducer.js":"18","C:\\dev\\stypendia\\client\\src\\items.js":"19","C:\\dev\\stypendia\\client\\src\\pages\\resend.js":"20","C:\\dev\\stypendia\\client\\src\\pages\\resetSend.js":"21","C:\\dev\\stypendia\\client\\src\\inputs.js":"22","C:\\dev\\stypendia\\client\\src\\pages\\reset.js":"23","C:\\dev\\stypendia\\client\\src\\pages\\logout.js":"24","C:\\dev\\stypendia\\client\\src\\pages\\changePass.js":"25","C:\\dev\\stypendia\\client\\src\\pages\\protectedRoute.js":"26","C:\\dev\\stypendia\\client\\src\\pages\\styles\\submit.styles.js":"27","C:\\dev\\stypendia\\client\\src\\components\\subALayout.js":"28","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitState.js":"29","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitContext.js":"30","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitReducer.js":"31","C:\\dev\\stypendia\\client\\src\\pages\\styles\\newSubmit.styles.js":"32","C:\\dev\\stypendia\\client\\src\\pages\\styles\\home.styles.js":"33","C:\\dev\\stypendia\\client\\src\\components\\Nav.js":"34","C:\\dev\\stypendia\\client\\src\\components\\allUsersSubmits.js":"35","C:\\dev\\stypendia\\client\\src\\components\\AllUsersSubmits.js":"36","C:\\dev\\stypendia\\client\\src\\components\\AllUsersDrafts.js":"37","C:\\dev\\stypendia\\client\\src\\components\\NewCallToAction.js":"38","C:\\dev\\stypendia\\client\\src\\pages\\submit.js":"39","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_I_II.js":"40","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_III_IV.js":"41","C:\\dev\\stypendia\\client\\src\\components\\styles\\nav.styles.js":"42","C:\\dev\\stypendia\\client\\src\\context\\app\\appState.js":"43","C:\\dev\\stypendia\\client\\src\\context\\app\\appContext.js":"44","C:\\dev\\stypendia\\client\\src\\context\\app\\appReducer.js":"45","C:\\dev\\stypendia\\client\\src\\components\\styles\\alert.styles.js":"46","C:\\dev\\stypendia\\client\\src\\components\\styles\\mainMenu.styles.js":"47","C:\\dev\\stypendia\\client\\src\\components\\styles\\layout.styles.js":"48","C:\\dev\\stypendia\\client\\src\\components\\styles\\rodo.styles.js":"49","C:\\dev\\stypendia\\client\\src\\pages\\styles\\login.styles.js":"50","C:\\dev\\stypendia\\client\\src\\pages\\styles\\changePass.styles.js":"51","C:\\dev\\stypendia\\client\\src\\pages\\styles\\logout.styles.js":"52","C:\\dev\\stypendia\\client\\src\\pages\\styles\\register.styles.js":"53","C:\\dev\\stypendia\\client\\src\\pages\\styles\\resend.styles.js":"54","C:\\dev\\stypendia\\client\\src\\pages\\styles\\reset.styles.js":"55","C:\\dev\\stypendia\\client\\src\\pages\\styles\\resetSend.styles.js":"56","C:\\dev\\stypendia\\client\\src\\pages\\styles\\verify.styles.js":"57","C:\\dev\\stypendia\\client\\src\\components\\submit\\Attachments.js":"58","C:\\dev\\stypendia\\client\\src\\components\\styles\\attachments.styles.js":"59"},{"size":220,"mtime":1608816802276,"results":"60","hashOfConfig":"61"},{"size":2267,"mtime":1610290323262,"results":"62","hashOfConfig":"61"},{"size":394,"mtime":1610315018205,"results":"63","hashOfConfig":"61"},{"size":2079,"mtime":1610314832550,"results":"64","hashOfConfig":"61"},{"size":4692,"mtime":1611225743741,"results":"65","hashOfConfig":"61"},{"size":5898,"mtime":1611174635024,"results":"66","hashOfConfig":"61"},{"size":1619,"mtime":1610397970122,"results":"67","hashOfConfig":"61"},{"size":4432,"mtime":1610315383171,"results":"68","hashOfConfig":"61"},{"size":792,"mtime":1608799587288,"results":"69","hashOfConfig":"61"},{"size":2187,"mtime":1611138911200,"results":"70","hashOfConfig":"61"},{"size":426,"mtime":1611138871975,"results":"71","hashOfConfig":"61"},{"size":669,"mtime":1611138878128,"results":"72","hashOfConfig":"61"},{"size":105,"mtime":1608848462800,"results":"73","hashOfConfig":"61"},{"size":3062,"mtime":1610320207805,"results":"74","hashOfConfig":"61"},{"size":109,"mtime":1609080271356,"results":"75","hashOfConfig":"61"},{"size":4034,"mtime":1611176743835,"results":"76","hashOfConfig":"61"},{"size":837,"mtime":1609111776421,"results":"77","hashOfConfig":"61"},{"size":359,"mtime":1609111873258,"results":"78","hashOfConfig":"61"},{"size":2581,"mtime":1610210523610,"results":"79","hashOfConfig":"61"},{"size":3824,"mtime":1611175962135,"results":"80","hashOfConfig":"61"},{"size":4500,"mtime":1611176648975,"results":"81","hashOfConfig":"61"},{"size":2661,"mtime":1609695788271,"results":"82","hashOfConfig":"61"},{"size":4261,"mtime":1611176589098,"results":"83","hashOfConfig":"61"},{"size":943,"mtime":1610317151429,"results":"84","hashOfConfig":"61"},{"size":3990,"mtime":1611174022575,"results":"85","hashOfConfig":"61"},{"size":665,"mtime":1609693453885,"results":"86","hashOfConfig":"61"},{"size":947,"mtime":1610026612898,"results":"87","hashOfConfig":"61"},{"size":748,"mtime":1609776209345,"results":"88","hashOfConfig":"61"},{"size":4574,"mtime":1610309908762,"results":"89","hashOfConfig":"61"},{"size":109,"mtime":1609777155673,"results":"90","hashOfConfig":"61"},{"size":803,"mtime":1610309592138,"results":"91","hashOfConfig":"61"},{"size":213,"mtime":1610210523611,"results":"92","hashOfConfig":"61"},{"size":635,"mtime":1611173262477,"results":"93","hashOfConfig":"61"},{"size":3104,"mtime":1611173023200,"results":"94","hashOfConfig":"61"},{"size":884,"mtime":1610049531415,"results":"95","hashOfConfig":"61"},{"size":4230,"mtime":1611091991377,"results":"96","hashOfConfig":"61"},{"size":2382,"mtime":1610400344978,"results":"97","hashOfConfig":"61"},{"size":2098,"mtime":1611091972231,"results":"98","hashOfConfig":"61"},{"size":2427,"mtime":1611145071279,"results":"99","hashOfConfig":"61"},{"size":7653,"mtime":1611145553748,"results":"100","hashOfConfig":"61"},{"size":10045,"mtime":1611145520070,"results":"101","hashOfConfig":"61"},{"size":389,"mtime":1610290764210,"results":"102","hashOfConfig":"61"},{"size":666,"mtime":1610290249651,"results":"103","hashOfConfig":"61"},{"size":103,"mtime":1610289759632,"results":"104","hashOfConfig":"61"},{"size":268,"mtime":1610290118206,"results":"105","hashOfConfig":"61"},{"size":2238,"mtime":1611260018029,"results":"106","hashOfConfig":"61"},{"size":317,"mtime":1610314827261,"results":"107","hashOfConfig":"61"},{"size":189,"mtime":1610315081054,"results":"108","hashOfConfig":"61"},{"size":239,"mtime":1610315325540,"results":"109","hashOfConfig":"61"},{"size":414,"mtime":1610317294859,"results":"110","hashOfConfig":"61"},{"size":420,"mtime":1610317926565,"results":"111","hashOfConfig":"61"},{"size":127,"mtime":1610317074882,"results":"112","hashOfConfig":"61"},{"size":525,"mtime":1610317742736,"results":"113","hashOfConfig":"61"},{"size":420,"mtime":1610318211002,"results":"114","hashOfConfig":"61"},{"size":420,"mtime":1610318415352,"results":"115","hashOfConfig":"61"},{"size":420,"mtime":1610318605095,"results":"116","hashOfConfig":"61"},{"size":553,"mtime":1610319320735,"results":"117","hashOfConfig":"61"},{"size":9982,"mtime":1611225723539,"results":"118","hashOfConfig":"61"},{"size":679,"mtime":1610919048581,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"1cla2w0",{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"122"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"122"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"122"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"122"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"122"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"122"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"122"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"122"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"122"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"122"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"122"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"201","messages":"202","errorCount":2,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"122"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"122"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"122"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"122"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"122"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"C:\\dev\\stypendia\\client\\src\\index.js",[],["256","257"],"C:\\dev\\stypendia\\client\\src\\App.js",[],"C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\Layout.js",[],"C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\MainMenu.js",["258"],"import React, { useContext, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport {Wrapper} from '../styles/mainMenu.styles'\r\nimport { leftMenuItems, rightMenuItems } from '../../items';\r\nimport AuthContext from '../../context/auth/authContext';\r\n\r\n\r\nconst MainMenu = ({ history }) => {\r\n\r\n\r\n  const [activeItem, setActiveItem] = useState('home');\r\n  const [hasOwnSub, setHasOwnSub] = useState(false);\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { isLoggedIn, logOut } = authContext;\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Menu icon='labeled' className='main'>\r\n        {leftMenuItems\r\n          .filter(\r\n            (item) =>\r\n              (item.noOwnSubDisplay === !hasOwnSub ||\r\n                item.hasOwnSubDisplay === hasOwnSub) &&\r\n              item.isLoggedInDisplay === isLoggedIn\r\n          )\r\n          .map((item) => (\r\n            <Link to={item.url} key={item.id}>\r\n              <Menu.Item\r\n                as='div'\r\n                icon={item.icon}\r\n                content={item.title}\r\n                name={item.name}\r\n                active={activeItem === item.name}\r\n                onClick={() => setActiveItem(item.name)}\r\n              />\r\n            </Link>\r\n          ))}\r\n\r\n        <Menu.Menu position='right' className='right'>\r\n          {rightMenuItems\r\n            .filter((item) => item.isLoggedInDisplay === isLoggedIn)\r\n            .map((item) => (\r\n              <Link to={item.url} key={item.id}>\r\n                <Menu.Item\r\n                  as='div'\r\n                  icon={item.icon}\r\n                  content={item.title}\r\n                  name={item.name}\r\n                  active={activeItem === item.name}\r\n                  onClick={() => {\r\n                    item.name === 'logout'\r\n                      ? logOut()\r\n                      : setActiveItem(item.name);\r\n                  }}\r\n                />\r\n              </Link>\r\n            ))}\r\n        </Menu.Menu>\r\n      </Menu>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default MainMenu;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\login.js",["259"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport { Wrapper } from './styles/login.styles';\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AppContext from '../context/app/appContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { loginInputs } from '../inputs';\r\n\r\nconst Login = ({ history, }) => {\r\n\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { checkIsAuthenticated, isLoggedIn} = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn])\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n\r\n    setIsLoading(true);\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n   const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`/api/v1/users/login`, newBody)\r\n      .then(async (data) => {\r\n\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n\r\n          addAlert(data.data);\r\n          setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (err.response?.data?.forcePassChange) {\r\n          addAlert(err.response.data);\r\n          setIsLoading(false);\r\n          history.push(\r\n            `/reset?id=${err.response.data.resetId}&token=${err.response.data.token}`\r\n          );\r\n          return;\r\n        }\r\n\r\n        if (err.response?.data?.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response?.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody,[e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Logowanie' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Grid columns={2} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value='_csrf'></input>\r\n                {loginInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        className='input'\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          className='small'\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <span>{}</span>\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Zaloguj się'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n              <Link to='/resetsend'>\r\n                <div className='buttonWrapper'>\r\n                  <div className='span'>Zapomniałeś hasła?</div>\r\n                  <Button content='Resetuj hasło' icon='recycle' size='mini' />\r\n                </div>\r\n              </Link>\r\n            </Grid.Column>\r\n\r\n            <Grid.Column verticalAlign='middle'>\r\n              <Link to='/register'>\r\n                <Button content='Zarejestruj się' icon='user plus' size='big' />\r\n              </Link>\r\n            </Grid.Column>\r\n          </Grid>\r\n\r\n          <Divider vertical>lub</Divider>\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Login;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\register.js",["260","261"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Container,\r\n  Divider,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport {Wrapper} from './styles/register.styles'\r\nimport Rodo from '../components/Rodo';\r\nimport Title from '../components/Title';\r\nimport { registerInputs } from '../inputs';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AppContext from '../context/app/appContext';\r\n\r\nconst Register = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n    const appContext = useContext(AppContext);\r\n    const { setIsLoading, isLoading } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n  isLoggedIn && props.history.push('/');\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isRodoChecked, setIsRodoChecked] = useState(false);\r\n  const [isRegulationsChecked, setIsRegulationsChecked] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n  }, []);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n        const csrfData = await axios.get('/api/v1/csrf');\r\n    setIsLoading(true);\r\n   const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`${process.env.REACT_APP_ORIGIN}/api/v1/users`, newBody)\r\n      .then((data) => {\r\n        console.log(data.data);\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          setIsLoading(false);\r\n          setTimeout(() => props.history.push('/login'), 1500);\r\n          addAlert(data.data);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        setErrors(err.response.data);\r\n        addAlert(err.response.data);\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div className='main'>\r\n        <Title content='Dodawanie konta' />\r\n        <Segment placeholder size='large'>\r\n          <Grid columns={2} relaxed='very' stackable>\r\n            <Grid.Column textAlign='left' verticalAlign='middle'>\r\n              <Header textAlign='center'>\r\n                Potwierdź niezbędne oświadczenia\r\n              </Header>\r\n\r\n              <Checkbox\r\n                onChange={() => setIsRegulationsChecked(!isRegulationsChecked)}\r\n                // value={isRegulationsChecked}\r\n                checked={isRegulationsChecked}\r\n                label={\r\n                  <label>\r\n                    Oświadczam, iż zapoznałam/em się z regulaminem i akceptuję\r\n                    jego postanowienia <span>*</span>\r\n                  </label>\r\n                }\r\n              />\r\n\r\n              <Rodo />\r\n\r\n              <Checkbox\r\n                onChange={() => setIsRodoChecked(!isRodoChecked)}\r\n                // value={isRodoChecked}\r\n                checked={isRodoChecked}\r\n                className='checkBox'\r\n                required\r\n                label={\r\n                  <label>\r\n                    Oświadczam, iż zapoznałam/em się z powyższą informacją\r\n                    <span> *</span>\r\n                  </label>\r\n                }\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n              <Container>\r\n                <Header>... podaj swoje dane</Header>\r\n                <Form>\r\n                  <input type='hidden' name='_csrf' value='_csrf'></input>\r\n                  {registerInputs.map((input) => {\r\n                    return (\r\n                      <div key={input.id}>\r\n                        <Form.Input\r\n                          loading={isLoading}\r\n                          onChange={(e) => handleOnChange(e)}\r\n                          required\r\n                          className='input'\r\n                          icon={input.icon}\r\n                          iconPosition='left'\r\n                          label={input.label}\r\n                          placeholder={input.placeholder}\r\n                          type={input.type}\r\n                          name={input.name}\r\n                        />\r\n                        {errors && errors[input.name] && (\r\n                          <Label\r\n                            basic\r\n                            color='red'\r\n                            pointing='above'\r\n                            key={input.id}\r\n                            className='small'\r\n                          >\r\n                            {errors[input.name]}\r\n                          </Label>\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  <Button\r\n                    loading={isLoading}\r\n                    type='submit'\r\n                    content='Zarejestruj się'\r\n                    primary\r\n                    size='large'\r\n                    onClick={handleOnClick}\r\n                    disabled={\r\n                      !isRegulationsChecked || !isRodoChecked ? true : false\r\n                    }\r\n                  />\r\n                </Form>\r\n                <Link to='/login'>\r\n                  <div className='buttonWrapper'>\r\n                    <div className='span'>Masz już konto?</div>\r\n                    <Button content='Zaloguj się' icon='user' size='mini' />\r\n                  </div>\r\n                </Link>\r\n              </Container>\r\n            </Grid.Column>\r\n          </Grid>\r\n\r\n          <Divider vertical>oraz</Divider>\r\n        </Segment>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default Register;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\home.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Rodo.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Title.js",[],"C:\\dev\\stypendia\\client\\src\\context\\auth\\AuthState.js",["262"],"import React, { useContext, useEffect, useReducer } from 'react';\r\nimport authReducer from './authReducer';\r\nimport AuthContext from './authContext';\r\nimport axios from 'axios';\r\nimport AlertContext from '../../context/alert/alertContext';\r\n\r\nimport { SET_USER, CHECK_IS_LOGGED_IN, LOGOUT_USER} from '../types';\r\n\r\nconst AuthState = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const initialState = {\r\n    user: null,\r\n    isLoggedIn: false,\r\n  };\r\n\r\n\r\n  const checkIsAuthenticated = async () => {\r\n    const result = await (\r\n      await fetch('http://localhost:5003/api/v1/users/me', {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n    ).json();\r\n    result.resStatus === 'success' ? setIsLoggedIn(true) : setIsLoggedIn(false);\r\n    setUser(result.user);\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n  }, []);\r\n\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  const setUser = (user) => {\r\n    dispatch({\r\n      type: SET_USER,\r\n      payload: user,\r\n    });\r\n  };\r\n\r\n  const setIsLoggedIn = (is) => {\r\n    dispatch({\r\n      type: CHECK_IS_LOGGED_IN,\r\n      payload: is,\r\n    });\r\n  };\r\n\r\n  const logOut = () => {\r\n    axios\r\n      .get('/api/v1/users/logout')\r\n      .then(async (data) => {\r\n\r\n\r\n\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          await props?.history?.push('/login');\r\n        }\r\n\r\n\r\n    dispatch({\r\n      type: LOGOUT_USER,\r\n    });\r\n      })\r\n      .catch(\r\n        (err) => console.log(err.message)\r\n        //   if (err.response.data.alertTitle) {\r\n        //     console.log(err.response.data);\r\n\r\n        //     addAlert(err.response.data);\r\n        //   }\r\n        // });\r\n      );\r\n\r\n\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user: state.user,\r\n           setUser,\r\n        logOut,\r\n        checkIsAuthenticated,\r\n        isLoggedIn: state.isLoggedIn,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthState;\r\n","C:\\dev\\stypendia\\client\\src\\context\\auth\\authReducer.js",[],"C:\\dev\\stypendia\\client\\src\\context\\types.js",[],"C:\\dev\\stypendia\\client\\src\\context\\auth\\authContext.js",[],"C:\\dev\\stypendia\\client\\src\\components\\alert\\Alert.js",["263"],"import React, { useContext } from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\nimport { Wrapper } from '../styles/alert.styles';\r\n// import './Alert.css';\r\nimport AlertContext from '../../context/alert/alertContext';\r\n\r\nconst Alert = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { alerts, deleteAlert } = alertContext;\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div className={`notification-container ${props.position}`}>\r\n        {alerts.map((alert, i) => {\r\n          if (props.autoDeleteInterval) {\r\n            setInterval(() => {\r\n              deleteAlert(alert.id);\r\n            }, props.autoDeleteInterval);\r\n          }\r\n\r\n          switch (alert.resStatus) {\r\n            case 'error':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message error className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p> {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n            case 'info':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message info className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p> {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n\r\n            case 'warning':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message warning className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p> {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n\r\n            case 'success':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message success className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p > {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n\r\n            default:\r\n              break;\r\n          }\r\n        })}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertContext.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\verify.js",["264","265"],"import axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport AppContext from '../context/app/appContext';\r\nimport { Link } from 'react-router-dom';\r\nimport { verItems } from '../items';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Header,\r\n  Icon,\r\n  List,\r\n  Loader,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\n\r\nimport {Wrapper} from './styles/verify.styles'\r\nimport Title from '../components/Title';\r\n\r\nconst Verify = ({ location: { search }, history }) => {\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\r\n  isLoggedIn && history.push('/');\r\n\r\n  const [query, setQuery] = useState(search);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    \r\n    axios\r\n      .post(`/api/v1/email/verify${query}`)\r\n      .then((data) => {\r\n        setIsLoading(false);\r\n        setIsSuccess(true);\r\n        addAlert(data.data);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        addAlert(err.response.data);\r\n      });\r\n  }, [isLoggedIn]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Title content='Weryfikacja konta' />\r\n      <Loader active={isLoading} size='huge'>\r\n        Weryfikujemy\r\n      </Loader>\r\n\r\n      {!isLoading && !isSuccess && (\r\n        <Container className='msg'>\r\n          <Message error size='big' floating>\r\n            <Message.Header>Błąd weryfikacji danych</Message.Header>\r\n            <p>\r\n              Nie udało się potwierdzić konta przy użyciu tego linka. Być może\r\n              link jest już przestarzały lub uszkodzony. Możesz skorzystać z\r\n              mechanizmu ponownej wysyłki linka korzystając z tej strony:\r\n              <br />\r\n              <br />\r\n              <Link to='/resend'>\r\n                <Button primary size='large'>\r\n                  Ponownie wyślij link\r\n                </Button>\r\n              </Link>\r\n            </p>\r\n          </Message>\r\n        </Container>\r\n      )}\r\n\r\n      {!isLoading && isSuccess && (\r\n        <>\r\n          <Segment placeholder className='main' size='large'>\r\n            <Message success size='medium' floating>\r\n              <Message.Header>Potwierdzono konto!!!</Message.Header>\r\n              <p>\r\n                Udało się potwierdzić konto. Od tej chili możesz się zalogować i\r\n                złożyć wniosek.\r\n              </p>\r\n            </Message>\r\n\r\n            <List\r\n              size='large'\r\n              selection\r\n              animated\r\n              divided\r\n              verticalAlign='middle'\r\n              hor\r\n            >\r\n              {verItems.map((item) => (\r\n                <List.Item key={item.id}>\r\n                  <Link to={item.to}>\r\n                    <List.Content floated='right'>\r\n                      <Button\r\n                        size={item.button === 'Logowanie' ? 'big' : null}\r\n                        primary={item.button === 'Logowanie'}\r\n                        icon\r\n                        labelPosition='right'\r\n                      >\r\n                        {item.button}\r\n                        <Icon name='right arrow' />\r\n                      </Button>\r\n                    </List.Content>\r\n                    <List.Content verticalAlign='bottom' floated='left'>\r\n                      <Header as='h3' className='itemheader'>\r\n                        <Icon size='large' name={item.icon} /> {item.name}\r\n                      </Header>\r\n                    </List.Content>\r\n                  </Link>\r\n                </List.Item>\r\n              ))}\r\n            </List>\r\n          </Segment>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default Verify;\r\n","C:\\dev\\stypendia\\client\\src\\context\\alert\\AlertState.js",[],"C:\\dev\\stypendia\\client\\src\\context\\alert\\alertReducer.js",[],"C:\\dev\\stypendia\\client\\src\\items.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\resend.js",["266"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport { Wrapper } from './styles/resend.styles';\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport AppContext from '../context/app/appContext';\r\n\r\nconst Resend = ({ history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [email, setEmail] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    const newBody = { email, _csrf: csrfData.data.csrfToken };\r\n    axios\r\n      .post(`/api/v1/email/resend`, newBody)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Potwierdzanie konta' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Message className='msg' info size='small' floating>\r\n            <Message.Header>\r\n              Ponowne wysłanie linka do potwierdzenia konta\r\n            </Message.Header>\r\n            <p>\r\n              Strona służy do ponownego wysłania linka potwierdzającego konto,\r\n              jeżeli konto już założyłaś/eś, ale nie skorzystałaś/eś z niego w\r\n              odpowiednim czasie. Link zostanie przesłany na podany adres email\r\n              i będzie ważny przez <strong>12 godzin</strong> . Jeżeli nie\r\n              znajdziesz linka sprawdź folder <strong> spam</strong> w Twojej\r\n              poczcie.\r\n            </p>\r\n          </Message>\r\n          <Grid columns={1} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value=''></input>\r\n                <Form.Input\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  required\r\n                  className='input'\r\n                  icon='mail'\r\n                  iconPosition='left'\r\n                  label='Email'\r\n                  placeholder='Podaj email'\r\n                  type='email'\r\n                  name='email'\r\n                />\r\n\r\n                {errors && errors.email && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {errors.email}\r\n                  </Label>\r\n                )}\r\n\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Wyślij link'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Resend;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\resetSend.js",["267"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport {Wrapper} from './styles/resetSend.styles'\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport AppContext from '../context/app/appContext';\r\nimport { resetReqInputs } from '../inputs';\r\n\r\nconst ResetSend = ({ history }) => {\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`/api/v1/password/email`, newBody)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/login');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n \r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n    const handleOnChange = (e) => {\r\n      e.preventDefault();\r\n      setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n    };\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Resetowanie hasła' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Message className='msg' info size='small' floating>\r\n            <Message.Header>Resetowanie hasła</Message.Header>\r\n            <p>\r\n              Strona służy do resetowania hasła do konta. Zostanie wygenerowany\r\n              specjalny link oraz przesłany na podany adres email i będzie ważny\r\n              przez <strong>12 godzin</strong>. Jeżeli nie znajdziesz linka\r\n              sprawdź folder <strong> spam</strong> w Twojej poczcie. W\r\n              formularzu poniżej podaj nazwę użytkownika oraz email, które\r\n              podałaś/eś w trakcie rejestracji.\r\n            </p>\r\n          </Message>\r\n          <Grid columns={1} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value=''></input>\r\n                {resetReqInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        className='input'\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          className='small'\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Wyślij link'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default ResetSend;\r\n","C:\\dev\\stypendia\\client\\src\\inputs.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\reset.js",["268"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport {Wrapper} from './styles/reset.styles'\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport AppContext from '../context/app/appContext';\r\nimport { resetInputs } from '../inputs';\r\n\r\nconst Reset = ({ location, history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n    const appContext = useContext(AppContext);\r\n    const { setIsLoading, isLoading } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`/api/v1/password/reset${location.search}`, newBody)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/login');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n   \r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Nowe hasło' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Message className='msg' info size='small' floating>\r\n            <Message.Header>Nowe hasło</Message.Header>\r\n            <p>\r\n              Strona służy do nadawania nowego hasła. Podaj niezbędne dane i\r\n              zapisz zmiany. Pamiętaj, aby nowe hasło posiadało co najmniej 1\r\n              wielką literę, 1 małą oraz 1 cyfrę.\r\n            </p>\r\n          </Message>\r\n          <Grid columns={1} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value=''></input>\r\n                {resetInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        className='input'\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          className='small'\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Zapisz nowe hasło'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default Reset;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\logout.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\changePass.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\protectedRoute.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\submit.styles.js",[],["269","270"],"C:\\dev\\stypendia\\client\\src\\components\\subALayout.js",["271","272"],"import React from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Header,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport { Wrapper } from '../pages/styles/submit.styles';\r\nimport Title from './Title';\r\n\r\nconst SubALayout = ({ children, leadHeader }) => {\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Title content='Nowy wniosek' />\r\n        <Wrapper>\r\n          <Segment placeholder size='large'>\r\n            <Label attached='top'>\r\n              <Header>{leadHeader}</Header>\r\n            </Label>\r\n            <Grid\r\n              className='container'\r\n              centered\r\n              columns={2}\r\n              relaxed='very'\r\n              stackable\r\n            >\r\n              {children}\r\n            </Grid>\r\n          </Segment>\r\n        </Wrapper>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SubALayout;\r\n","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitState.js",["273"],"import React, { useContext, useReducer, useState } from 'react';\r\n\r\nimport submitReducer from './submitReducer';\r\nimport SubmitContext from './submitContext';\r\nimport axios from 'axios';\r\nimport AlertContext from '../alert/alertContext';\r\nimport AppContext from '../app/appContext';\r\n\r\nimport {\r\n  UPDATE_NEW_SUBMIT,\r\n  SET_SUBMIT_ID,\r\n  SET_SUBMIT_MODE,\r\n  UPDATE_CUR_SUBMIT,\r\n  SET_SUBMIT_TO_WATCH,\r\n  SET_CUR_SUBMIT,\r\n} from '../types';\r\n\r\nconst SubmitState = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading } = appContext;\r\n\r\n  const initialState = {\r\n    newSubmit: {},\r\n    submitUuid: null,\r\n    isSaving: false,\r\n    submitMode: '',\r\n    submitToWatch: {},\r\n    curSubmit: {}, //submit being edited\r\n  };\r\n\r\n  // const addNewSubmit = (submit) => {\r\n  //   setIsLoading(true);\r\n  //   const headers = {\r\n  //     'Content-Type': 'application/json',\r\n  //   };\r\n\r\n  //   axios\r\n  //     .post('/api/v1/submits', submit, headers)\r\n  //     .then((data) => {\r\n  //       if (data.data.resStatus || data.data.resStatus === 'success') {\r\n  //         addAlert(data.data);\r\n  //       }\r\n  //       setIsLoading(false);\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       if (err.response) {\r\n  //         console.log(err.response.data);\r\n  //         addAlert(err.response.data);\r\n  //         setIsLoading(false);\r\n\r\n  //         return;\r\n  //       }\r\n  //     });\r\n  // };\r\n\r\n  // const updateSubmit = (submit) => {\r\n  //   setIsLoading(true);\r\n  //   const headers = {\r\n  //     'Content-Type': 'application/json',\r\n  //   };\r\n\r\n  //   axios\r\n  //     .put('/api/v1/submits', submit, headers)\r\n  //     .then( async(data) => {\r\n\r\n  //       if (data.data.resStatus || data.data.resStatus === 'success') {\r\n\r\n  //         addAlert(data.data);\r\n  //         setIsLoading(false);\r\n  //       }\r\n  //\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       if (err.response) {\r\n  //         addAlert(err.response.data);\r\n  //         setIsLoading(false);\r\n  //\r\n  //         return;\r\n  //       }\r\n  //     });\r\n  // };\r\n\r\n  const [state, dispatch] = useReducer(submitReducer, initialState);\r\n\r\n  const updateNewSubmit = (newSubmit) => {\r\n    dispatch({\r\n      type: UPDATE_NEW_SUBMIT,\r\n      payload: newSubmit,\r\n    });\r\n  };\r\n\r\n  const updateCurSubmit = (curSubmit) => {\r\n    dispatch({\r\n      type: UPDATE_CUR_SUBMIT,\r\n      payload: curSubmit,\r\n    });\r\n  };\r\n\r\n  const setSubmitMode = (mode) => {\r\n    dispatch({\r\n      type: SET_SUBMIT_MODE,\r\n      payload: mode,\r\n    });\r\n  };\r\n\r\n  const setSubmitUuid = async (id) => {\r\n    await dispatch({\r\n      type: SET_SUBMIT_ID,\r\n      payload: id,\r\n    });\r\n  };\r\n\r\n  const setSubmitToWatch = (uuid) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n\r\n      axios\r\n        .get(`/api/v1/submits/usersubmits/${uuid}`, headers)\r\n        .then((data) => {\r\n          dispatch({\r\n            type: SET_SUBMIT_TO_WATCH,\r\n            payload: data.data.submit,\r\n          });\r\n          setIsLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          if (err.response) {\r\n            addAlert(err.response.data);\r\n            setIsLoading(false);\r\n            return;\r\n          }\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const setCurSubmit = (uuid) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      axios\r\n        .get(`/api/v1/submits/usersubmits/${uuid}`, headers)\r\n        .then((data) => {\r\n          dispatch({\r\n            type: SET_CUR_SUBMIT,\r\n            payload: data.data.submit,\r\n          });\r\n          setIsLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          if (err.response) {\r\n            addAlert(err.response.data);\r\n            setIsLoading(false);\r\n            return;\r\n          }\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SubmitContext.Provider\r\n      value={{\r\n        newSubmit: state.newSubmit,\r\n        updateNewSubmit,\r\n        setSubmitUuid,\r\n        submitUuid: state.submitUuid,\r\n        setSubmitMode,\r\n        curSubmit: state.curSubmit,\r\n        updateCurSubmit,\r\n        setCurSubmit,\r\n        submitMode: state.submitMode,\r\n        submitToWatch: state.submitToWatch,\r\n        setSubmitToWatch,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </SubmitContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SubmitState;\r\n","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitContext.js",[],"C:\\dev\\stypendia\\client\\src\\context\\submit\\submitReducer.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\newSubmit.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\home.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Nav.js",[],"C:\\dev\\stypendia\\client\\src\\components\\allUsersSubmits.js",["274","275","276","277"],"C:\\dev\\stypendia\\client\\src\\components\\AllUsersSubmits.js",["278","279"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport SubmitContext from '../context/submit/submitContext';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AppContext from '../context/app/appContext';\r\n// import fileDownload from 'js-file-download';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Card, Icon, Image, Label } from 'semantic-ui-react';\r\nimport { networkInterfaces } from 'os';\r\nimport NewCallToAction from './NewCallToAction';\r\n\r\nconst AllUsersSubmits = () => {\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const {\r\n    setSubmitUuid,\r\n    setSubmitMode,\r\n    setCurSubmit,\r\n    setSubmitToWatch,\r\n  } = submitContext;\r\n\r\n  const [submits, setSubmits] = useState([]);\r\n\r\n  const handleOnClick = (uuid, mode) => {\r\n    setSubmitMode(mode);\r\n    setSubmitUuid(uuid);\r\n\r\n    if (mode === 'edit') {\r\n      setCurSubmit(uuid);\r\n    } else if (mode === 'watch') {\r\n      setSubmitToWatch(uuid);\r\n    }\r\n  };\r\n\r\n  const setAllUsersSubmits = () => {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .get('/api/v1/submits/usersubmits', headers)\r\n      .then((data) => setSubmits(data.data.submits))\r\n      .catch((err) => {\r\n     \r\n        if (err.response.data) {\r\n          addAlert(err.response.data);\r\n          return;\r\n        }\r\n      });\r\n  };\r\n\r\n  const callFetch = (numer) => {\r\n    axios\r\n      .get(`/api/v1/pdf/submit/${numer}`, {\r\n        responseType: 'blob',\r\n      })\r\n      .then((response) => {\r\n        const url = window.URL.createObjectURL(new Blob([response.data]));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', `${numer}.pdf`); //or any other extension\r\n        document.body.appendChild(link);\r\n        link.click();\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setAllUsersSubmits();\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  return !isLoading ? (\r\n    <>\r\n      <Card.Group itemsPerRow={5} stackable className='cards'>\r\n        {submits.length > 0 ? (\r\n          submits.map((s) => (\r\n            <Card key={s.id} className='card' raised>\r\n              <Card.Content className='relative' textAlign='left'>\r\n                <Label\r\n                  className='label'\r\n                  // basic\r\n                  size='mini'\r\n                  color='grey'\r\n                  content={'oczekuje na decyzje'}\r\n                ></Label>\r\n                <Image\r\n                  floated='left'\r\n                  size='mini'\r\n                  src='https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'\r\n                />\r\n\r\n                <Card.Header>\r\n                  {s.pupilFirstName} {s.pupilLastName}\r\n                </Card.Header>\r\n                <Card.Meta>{s.schoolType}</Card.Meta>\r\n                <Card.Description>Nuner wniosku: {s.numer}</Card.Description>\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                <div className='ui three buttons'>\r\n                  <Link to='/submit'>\r\n                    <Button\r\n                      color='green'\r\n                      onClick={() => handleOnClick(s.uuid, 'watch')}\r\n                    >\r\n                      Zobacz\r\n                    </Button>\r\n                    <Button\r\n                      primary\r\n                      onClick={() => handleOnClick(s.uuid, 'edit')}\r\n                    >\r\n                      Popraw\r\n                    </Button>\r\n                  </Link>\r\n                  <Button basic color='blue' onClick={() => callFetch(s.numer)}>\r\n                    <Icon name='download' />\r\n                    <strong> PDF</strong>\r\n                  </Button>\r\n                </div>\r\n              </Card.Content>\r\n            </Card>\r\n          ))\r\n        ) : (\r\n          <>\r\n\r\n            <NewCallToAction />\r\n          </>\r\n        )}\r\n      </Card.Group>\r\n    </>\r\n  ) : (\r\n    <h2>Loading</h2>\r\n  );\r\n};\r\n\r\nexport default AllUsersSubmits;\r\n","C:\\dev\\stypendia\\client\\src\\components\\AllUsersDrafts.js",["280","281"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport { Button, Card, Icon, Image, Label } from 'semantic-ui-react';\r\nimport NewCallToAction from './NewCallToAction';\r\n\r\nconst AllUsersDrafts = () => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const [drafts, setDrafts] = useState([]);\r\n\r\n  const setAllUsersDrafts = () => {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .get('/api/v1/drafts/oneuser', headers)\r\n      .then((data) => {\r\n        console.log(data);\r\n        setDrafts(data.data.drafts);\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data) {\r\n          addAlert(err.response.data);\r\n          return;\r\n        }\r\n      });\r\n\r\n    // console.log(submits);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setAllUsersDrafts();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Card.Group itemsPerRow={5} stackable className='cards'>\r\n        {drafts.length > 0 ? (\r\n          drafts.map((s) => (\r\n            <Card key={s.id} className='card' raised>\r\n              <Card.Content textAlign='left'>\r\n                <Label\r\n                  className='label'\r\n                  // basic\r\n                  size='mini'\r\n                  content={'wersja robocza'}\r\n                  color='orange'\r\n                ></Label>\r\n                <Image\r\n                  floated='left'\r\n                  size='mini'\r\n                  src='https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'\r\n                />\r\n                <Card.Header>\r\n                  {s.pupilFirstName} {s.pupilLastName}\r\n                </Card.Header>\r\n                <Card.Meta>{s.schoolType}</Card.Meta>\r\n                <Card.Description>{s.schoolName}</Card.Description>\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                <div className='ui two buttons'>\r\n                  <Button color='orange'>Edytuj</Button>\r\n                  <Button basic color='red'>\r\n                    Usuń\r\n                  </Button>\r\n                </div>\r\n              </Card.Content>\r\n            </Card>\r\n          ))\r\n        ) : (\r\n          <NewCallToAction />\r\n        )}\r\n      </Card.Group>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllUsersDrafts;\r\n","C:\\dev\\stypendia\\client\\src\\components\\NewCallToAction.js",["282","283","284","285"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom'\r\nimport SubmitContext from '../context/submit/submitContext';\r\n\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport { Button, Card, Icon, Image, Label } from 'semantic-ui-react';\r\n\r\nconst NewCallToAction = () => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n    const submitContext = useContext(SubmitContext);\r\n    const {setSubmitUuid, setSubmitMode } = submitContext;\r\n\r\n  const [drafts, setDrafts] = useState([]);\r\n\r\n\r\n  const handleOnClick = (mode) => {\r\n    setSubmitMode(mode);\r\n    setSubmitUuid(null)\r\n\r\n  };\r\n\r\n  const setAllUsersDrafts = () => {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .get('/api/v1/drafts/oneuser', headers)\r\n      .then((data) => {\r\n\r\n        setDrafts(data.data.drafts);\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data) {\r\n          addAlert(err.response.data);\r\n          return;\r\n        }\r\n      });\r\n\r\n    // console.log(submits);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setAllUsersDrafts();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Link to='/submit'>\r\n        <Card.Group\r\n          itemsPerRow={5}\r\n          stackable\r\n          centered\r\n          className='cards'\r\n          onClick={() => handleOnClick('new')}\r\n        >\r\n\r\n                <Card  className='card' raised>\r\n                  <Card.Content textAlign='center'>\r\n                    <Icon name='plus' size='big' color='black' />\r\n                    <Icon name='pencil' size='huge' color='black' />\r\n                  </Card.Content>\r\n                  <Card.Content extra>\r\n                    <Button primary size='large' icon labelPosition='right'>\r\n                      Złóż nowy wniosek\r\n                      <Icon name='right arrow' />\r\n                    </Button>\r\n                  </Card.Content>\r\n                </Card>\r\n\r\n        </Card.Group>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewCallToAction;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\submit.js",["286","287","288","289","290","291"],"import React, { useContext, useState } from 'react';\r\nimport { Grid, Menu} from 'semantic-ui-react';\r\nimport SubA_I_II from '../components/submit/subA_I_II';\r\nimport SubA_III_IV from '../components/submit/subA_III_IV';\r\nimport Nav from '../components/Nav';\r\nimport { Wrapper } from './styles/newSubmit.styles';\r\nimport Attachments from '../components/submit/Attachments';\r\n\r\nconst Submit = () => {\r\n  const [activeItem, setActiveItem] = useState(1);\r\n\r\n\r\n\r\n  const renderComponent = () => {\r\n    if (activeItem>5) setActiveItem(1)\r\n    if (activeItem<1) setActiveItem(1)\r\n    switch (activeItem) {\r\n      case 1:\r\n        return <SubA_I_II />;\r\n      case 2:\r\n        return <SubA_III_IV />;\r\n      case 3:\r\n        return <Attachments />;\r\n      case 4:\r\n        return <SubA_III_IV />;\r\n      case 5:\r\n        return <SubA_III_IV />;\r\n\r\n      default:\r\n        return <SubA_I_II />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Grid>\r\n        <Grid.Column width={4}>\r\n          <Menu fluid vertical tabular>\r\n            <Menu.Item\r\n              icon='student'\r\n              name='Dane ucznia'\r\n              active={activeItem === 1}\r\n              onClick={() => setActiveItem(1)}\r\n            />\r\n            <Menu.Item\r\n              icon='university'\r\n              name='dane szkoły'\r\n              content='Dane szkoły'\r\n              active={activeItem === 2}\r\n              onClick={() => setActiveItem(2)}\r\n            />\r\n            <Menu.Item\r\n              icon='attach'\r\n              name='dane szkoły'\r\n              content='Załączniki'\r\n              active={activeItem === 3}\r\n              onClick={() => setActiveItem(3)}\r\n            />\r\n            <Menu.Item\r\n              icon='university'\r\n              name='dane szkoły'\r\n              content='Dane szkoły'\r\n              active={activeItem === 4}\r\n              onClick={() => setActiveItem(4)}\r\n            />\r\n            <Menu.Item\r\n              icon='university'\r\n              name='dane szkoły'\r\n              content='Dane szkoły'\r\n              active={activeItem === 5}\r\n              onClick={() => setActiveItem(5)}\r\n            />\r\n          </Menu>\r\n        </Grid.Column>\r\n\r\n        <Grid.Column stretched width={12}>\r\n          {renderComponent()}\r\n        </Grid.Column>\r\n        <Nav activeItem={activeItem} setActiveItem={setActiveItem} />\r\n      </Grid>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Submit;\r\n","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_I_II.js",[],"C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_III_IV.js",["292","293"],"import React, { useContext, useState } from 'react';\r\nimport { Form, Grid, Header, Segment } from 'semantic-ui-react';\r\nimport SubALayout from '../subALayout';\r\nimport SubmitContext from '../../context/submit/submitContext';\r\nimport axios from 'axios';\r\n\r\nconst options = [\r\n  { key: 'a', text: 'Wybierz województwo', value: 'default', disabled: true },\r\n  { key: 's', text: 'śląskie' },\r\n  { key: 'd', text: 'dolnośląskie' },\r\n  { key: 'c', text: 'kujawsko-pomorskie' },\r\n  { key: 'l', text: 'lubelskie' },\r\n  { key: 'f', text: 'lubuskie' },\r\n  { key: 'e', text: 'łódzkie' },\r\n  { key: 'k', text: 'małopolskie' },\r\n  { key: 'w', text: 'mazowieckie' },\r\n  { key: 'o', text: 'opolskie' },\r\n  { key: 'r', text: 'podkarpackie' },\r\n  { key: 'b', text: 'podlaskie' },\r\n  { key: 'g', text: 'pomorskie' },\r\n  { key: 't', text: 'świętokrzyskie' },\r\n  { key: 'n', text: 'warmińsko-mazurskie' },\r\n  { key: 'p', text: 'wielkopolskie' },\r\n  { key: 'z', text: 'zachodniopomorskie' },\r\n  { key: 'B', text: 'podlaskie' },\r\n];\r\nconst optionsC = [\r\n  { key: 'a', text: 'Wybierz profil', value: 'default' , disabled: true},\r\n  { key: 'n', text: 'Nauczyciel', value: 'nauczyciel' , disabled: false},\r\n  { key: 'p', text: 'Pedagog szkolny', value: 'pedagog', disabled: false },\r\n  { key: 'd', text: 'Doradca zawodowy', value: 'doradca' , disabled: false},\r\n];\r\nconst optionsT = [\r\n  { key: 'a', text: 'Wybierz rodzaj szkoły', value: 'default' , disabled: true},\r\n  { key: 'n', text: 'Liceum', value: 'liceum' , disabled: false},\r\n  { key: 'p', text: 'Technikum', value: 'technikum', disabled: false },\r\n\r\n];\r\n\r\nconst SubA_III_IV = () => {\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const {\r\n    newSubmit,\r\n    updateNewSubmit,\r\n    submitMode,\r\n    curSubmit,\r\n    updateCurSubmit,\r\n    submitToWatch,\r\n  } = submitContext;\r\n\r\n  const handleOnChange = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (submitMode === 'edit') {\r\n      console.log('edit');\r\n      await updateCurSubmit({\r\n        ...curSubmit,\r\n        [e.target.name]: e.target.value,\r\n\r\n      });\r\n    } else if (submitMode === 'new') {\r\n      console.log('new');\r\n      await updateNewSubmit({\r\n        ...newSubmit,\r\n        [e.target.name]: e.target.value,\r\n \r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <SubALayout leadHeader='CZĘŚĆ A – INFORMACJE DOTYCZĄCE UCZNIA/UCZENNICY'>\r\n      <Grid.Column className='column'>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          III. DANE SZKOŁY:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              label='Pełna nazwa szkoły'\r\n              name='schoolName'\r\n              icon='building outline'\r\n              placeholder='Podaj pełną nazwę szkoły'\r\n              iconPosition='left'\r\n              onChange={(e) => handleOnChange(e)}\r\n              value={\r\n                submitMode === 'edit'\r\n                  ? curSubmit?.schoolName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.schoolName\r\n                  : submitToWatch?.schoolName\r\n              }\r\n            />\r\n\r\n            <div className='select-wrapper'>\r\n              <Header className='select-header' as='h5'>\r\n                Profil doradcy\r\n              </Header>\r\n              <select\r\n                name='schoolType'\r\n                onChange={(e) => handleOnChange(e)}\r\n                value={\r\n                  submitMode === 'edit'\r\n                    ? curSubmit?.schoolType\r\n                    : submitMode === 'new'\r\n                    ? newSubmit?.schoolType\r\n                    : submitToWatch?.schoolType\r\n                }\r\n                defaultValue='default'\r\n              >\r\n                {optionsT.map((o) => (\r\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                    {o.text}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div className='adress-wrapper'>\r\n              <Header as='h4'>Adres szkoły</Header>\r\n              <Segment>\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='user'\r\n                  iconPosition='left'\r\n                  placeholder='Podaj ulicę'\r\n                  name='schoolStreetName'\r\n                  value={\r\n                    submitMode === 'edit'\r\n                      ? curSubmit?.schoolStreetName\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolStreetName\r\n                      : submitToWatch?.schoolStreetName\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n\r\n                <Form.Input\r\n                  className='input'\r\n                  // label='Adres szkoły (numer domu)'\r\n                  icon='phone'\r\n                  iconPosition='left'\r\n                  placeholder='Podaj numer domu'\r\n                  name='schoolStreetNr'\r\n                  value={\r\n                    submitMode === 'edit'\r\n                      ? curSubmit?.schoolStreetNr\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolStreetNr\r\n                      : submitToWatch?.schoolStreetNr\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='zip'\r\n                  iconPosition='left'\r\n                  // label='Adres szkoły (kod pocztowy)'\r\n                  placeholder='Podaj kod pocztowy w formacie XX-XXX'\r\n                  name='schoolZip'\r\n                  value={\r\n                    submitMode === 'edit'\r\n                      ? curSubmit?.schoolZip\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolZip\r\n                      : submitToWatch?.schoolZip\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='zip'\r\n                  iconPosition='left'\r\n                  // label='Adres szkoły (miejscowość)'\r\n                  placeholder='Podaj miejscowość'\r\n                  name='schoolTown'\r\n                  value={\r\n                    submitMode === 'edit'\r\n                      ? curSubmit?.schoolTown\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolTown\r\n                      : submitToWatch?.schoolTown\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                <div className='select-wrapper'>\r\n                  <select\r\n                    name='schoolVoyev'\r\n                    onChange={(e) => handleOnChange(e)}\r\n                    value={\r\n                      submitMode === 'edit'\r\n                        ? curSubmit?.schooVoyev\r\n                        : submitMode === 'new'\r\n                        ? newSubmit?.schooVoyev\r\n                        : submitToWatch?.schooVoyev\r\n                    }\r\n                    defaultValue='default'\r\n                  >\r\n                    {options.map((o) => (\r\n                      <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                        {o.text}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              </Segment>\r\n            </div>\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n      <Grid.Column>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          IV. DANE OPIEKUNA DYDAKTYCZNEGO:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              icon='user'\r\n              iconPosition='left'\r\n              label='Imię doradcy'\r\n              name='counselorFirstName'\r\n              placeholder='Podaj imię doradcy'\r\n              value={\r\n                submitMode === 'edit'\r\n                  ? curSubmit?.counselorFirstName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.counselorFirstName\r\n                  : submitToWatch?.counselorFirstName\r\n              }\r\n              onChange={(e) => handleOnChange(e)}\r\n            />\r\n            <Form.Input\r\n              icon='user'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Nazwisko doradcy'\r\n              name='counselorLastName'\r\n              placeholder='Podaj nazwisko doradcy'\r\n              value={\r\n                submitMode === 'edit'\r\n                  ? curSubmit?.counselorLastName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.counselorLastName\r\n                  : submitToWatch?.counselorLastName\r\n              }\r\n              onChange={(e) => handleOnChange(e)}\r\n            />\r\n\r\n            <div className='select-wrapper'>\r\n              <Header className='select-header' as='h5'>\r\n                Profil doradcy\r\n              </Header>\r\n              <select\r\n                name='counselorProfile'\r\n                onChange={(e) => handleOnChange(e)}\r\n                placeholder='Wybierz profil doradcy'\r\n                value={\r\n                  submitMode === 'edit'\r\n                    ? curSubmit?.counselorProfile\r\n                    : submitMode === 'new'\r\n                    ? newSubmit?.counselorProfile\r\n                    : submitToWatch?.counselorProfile\r\n                }\r\n                defaultValue='default'\r\n              >\r\n                {optionsC.map((o) => (\r\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                    {o.text}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n    </SubALayout>\r\n  );\r\n};\r\n\r\nexport default SubA_III_IV;\r\n","C:\\dev\\stypendia\\client\\src\\components\\styles\\nav.styles.js",[],"C:\\dev\\stypendia\\client\\src\\context\\app\\appState.js",[],"C:\\dev\\stypendia\\client\\src\\context\\app\\appContext.js",[],"C:\\dev\\stypendia\\client\\src\\context\\app\\appReducer.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\alert.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\mainMenu.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\layout.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\rodo.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\login.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\changePass.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\logout.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\register.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\resend.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\reset.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\resetSend.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\verify.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\submit\\Attachments.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\attachments.styles.js",[],{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","severity":1,"message":"299","line":13,"column":21,"nodeType":"300","messageId":"301","endLine":13,"endColumn":33},{"ruleId":"302","severity":1,"message":"303","line":40,"column":6,"nodeType":"304","endLine":40,"endColumn":18,"suggestions":"305"},{"ruleId":"298","severity":1,"message":"306","line":31,"column":11,"nodeType":"300","messageId":"301","endLine":31,"endColumn":18},{"ruleId":"302","severity":1,"message":"307","line":42,"column":6,"nodeType":"304","endLine":42,"endColumn":8,"suggestions":"308"},{"ruleId":"302","severity":1,"message":"307","line":35,"column":6,"nodeType":"304","endLine":35,"endColumn":8,"suggestions":"309"},{"ruleId":"310","severity":1,"message":"311","line":14,"column":32,"nodeType":"312","messageId":"313","endLine":14,"endColumn":34},{"ruleId":"298","severity":1,"message":"314","line":35,"column":17,"nodeType":"300","messageId":"301","endLine":35,"endColumn":25},{"ruleId":"302","severity":1,"message":"315","line":51,"column":6,"nodeType":"304","endLine":51,"endColumn":18,"suggestions":"316"},{"ruleId":"302","severity":1,"message":"303","line":34,"column":6,"nodeType":"304","endLine":34,"endColumn":18,"suggestions":"317"},{"ruleId":"302","severity":1,"message":"303","line":37,"column":6,"nodeType":"304","endLine":37,"endColumn":18,"suggestions":"318"},{"ruleId":"302","severity":1,"message":"303","line":36,"column":6,"nodeType":"304","endLine":36,"endColumn":18,"suggestions":"319"},{"ruleId":"294","replacedBy":"320"},{"ruleId":"296","replacedBy":"321"},{"ruleId":"298","severity":1,"message":"322","line":5,"column":3,"nodeType":"300","messageId":"301","endLine":5,"endColumn":9},{"ruleId":"298","severity":1,"message":"323","line":6,"column":3,"nodeType":"300","messageId":"301","endLine":6,"endColumn":8},{"ruleId":"298","severity":1,"message":"324","line":1,"column":41,"nodeType":"300","messageId":"301","endLine":1,"endColumn":49},{"ruleId":"325","severity":2,"message":"326","line":8,"column":24,"nodeType":"300","endLine":8,"endColumn":34},{"ruleId":"325","severity":2,"message":"326","line":12,"column":23,"nodeType":"300","endLine":12,"endColumn":33},{"ruleId":"298","severity":1,"message":"327","line":15,"column":9,"nodeType":"300","messageId":"301","endLine":15,"endColumn":15},{"ruleId":"298","severity":1,"message":"328","line":16,"column":9,"nodeType":"300","messageId":"301","endLine":16,"endColumn":27},{"ruleId":"298","severity":1,"message":"329","line":9,"column":10,"nodeType":"300","messageId":"301","endLine":9,"endColumn":27},{"ruleId":"302","severity":1,"message":"330","line":75,"column":6,"nodeType":"304","endLine":75,"endColumn":8,"suggestions":"331"},{"ruleId":"298","severity":1,"message":"332","line":4,"column":24,"nodeType":"300","messageId":"301","endLine":4,"endColumn":28},{"ruleId":"302","severity":1,"message":"333","line":36,"column":6,"nodeType":"304","endLine":36,"endColumn":8,"suggestions":"334"},{"ruleId":"298","severity":1,"message":"335","line":7,"column":30,"nodeType":"300","messageId":"301","endLine":7,"endColumn":35},{"ruleId":"298","severity":1,"message":"323","line":7,"column":37,"nodeType":"300","messageId":"301","endLine":7,"endColumn":42},{"ruleId":"298","severity":1,"message":"336","line":16,"column":10,"nodeType":"300","messageId":"301","endLine":16,"endColumn":16},{"ruleId":"302","severity":1,"message":"333","line":48,"column":6,"nodeType":"304","endLine":48,"endColumn":8,"suggestions":"337"},{"ruleId":"298","severity":1,"message":"338","line":1,"column":17,"nodeType":"300","messageId":"301","endLine":1,"endColumn":27},{"ruleId":"339","severity":1,"message":"340","line":19,"column":16,"nodeType":"341","endLine":19,"endColumn":29},{"ruleId":"339","severity":1,"message":"342","line":21,"column":16,"nodeType":"341","endLine":21,"endColumn":31},{"ruleId":"339","severity":1,"message":"342","line":25,"column":16,"nodeType":"341","endLine":25,"endColumn":31},{"ruleId":"339","severity":1,"message":"342","line":27,"column":16,"nodeType":"341","endLine":27,"endColumn":31},{"ruleId":"339","severity":1,"message":"340","line":30,"column":16,"nodeType":"341","endLine":30,"endColumn":29},{"ruleId":"298","severity":1,"message":"324","line":1,"column":29,"nodeType":"300","messageId":"301","endLine":1,"endColumn":37},{"ruleId":"298","severity":1,"message":"343","line":5,"column":8,"nodeType":"300","messageId":"301","endLine":5,"endColumn":13},"no-native-reassign",["344"],"no-negated-in-lhs",["345"],"no-unused-vars","'setHasOwnSub' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkIsAuthenticated' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["346"],"'setUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkIsAuthenticated'. Either include it or remove the dependency array.",["347"],["348"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setQuery' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addAlert', 'checkIsAuthenticated', 'query', and 'setIsLoading'. Either include them or remove the dependency array.",["349"],["350"],["351"],["352"],["344"],["345"],"'Header' is defined but never used.","'Label' is defined but never used.","'useState' is defined but never used.","react-hooks/rules-of-hooks","React Hook \"useContext\" is called in function \"allUsersSubmits\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","'userId' is assigned a value but never used.","'setAllUsersSubmits' is assigned a value but never used.","'networkInterfaces' is defined but never used.","React Hook useEffect has missing dependencies: 'setAllUsersSubmits' and 'setIsLoading'. Either include them or remove the dependency array.",["353"],"'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'setAllUsersDrafts'. Either include it or remove the dependency array.",["354"],"'Image' is defined but never used.","'drafts' is assigned a value but never used.",["355"],"'useContext' is defined but never used.","react/jsx-pascal-case","Imported JSX component SubA_I_II must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component SubA_III_IV must be in PascalCase or SCREAMING_SNAKE_CASE","'axios' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"358","fix":"360"},{"desc":"361","fix":"362"},{"desc":"356","fix":"363"},{"desc":"356","fix":"364"},{"desc":"356","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"368","fix":"370"},"Update the dependencies array to be: [checkIsAuthenticated, history, isLoggedIn]",{"range":"371","text":"372"},"Update the dependencies array to be: [checkIsAuthenticated]",{"range":"373","text":"374"},{"range":"375","text":"374"},"Update the dependencies array to be: [addAlert, checkIsAuthenticated, isLoggedIn, query, setIsLoading]",{"range":"376","text":"377"},{"range":"378","text":"372"},{"range":"379","text":"372"},{"range":"380","text":"372"},"Update the dependencies array to be: [setAllUsersSubmits, setIsLoading]",{"range":"381","text":"382"},"Update the dependencies array to be: [setAllUsersDrafts]",{"range":"383","text":"384"},{"range":"385","text":"384"},[1078,1090],"[checkIsAuthenticated, history, isLoggedIn]",[1291,1293],"[checkIsAuthenticated]",[983,985],[1406,1418],"[addAlert, checkIsAuthenticated, isLoggedIn, query, setIsLoading]",[999,1011],[1049,1061],[1050,1062],[2139,2141],"[setAllUsersSubmits, setIsLoading]",[948,950],"[setAllUsersDrafts]",[1192,1194]]