[{"C:\\dev\\stypendia\\client\\src\\index.js":"1","C:\\dev\\stypendia\\client\\src\\App.js":"2","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\Layout.js":"3","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\MainMenu.js":"4","C:\\dev\\stypendia\\client\\src\\pages\\login.js":"5","C:\\dev\\stypendia\\client\\src\\pages\\register.js":"6","C:\\dev\\stypendia\\client\\src\\pages\\home.js":"7","C:\\dev\\stypendia\\client\\src\\components\\Rodo.js":"8","C:\\dev\\stypendia\\client\\src\\components\\Title.js":"9","C:\\dev\\stypendia\\client\\src\\context\\auth\\AuthState.js":"10","C:\\dev\\stypendia\\client\\src\\context\\auth\\authReducer.js":"11","C:\\dev\\stypendia\\client\\src\\context\\types.js":"12","C:\\dev\\stypendia\\client\\src\\context\\auth\\authContext.js":"13","C:\\dev\\stypendia\\client\\src\\components\\alert\\Alert.js":"14","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertContext.js":"15","C:\\dev\\stypendia\\client\\src\\pages\\verify.js":"16","C:\\dev\\stypendia\\client\\src\\context\\alert\\AlertState.js":"17","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertReducer.js":"18","C:\\dev\\stypendia\\client\\src\\pages\\resend.js":"19","C:\\dev\\stypendia\\client\\src\\pages\\resetSend.js":"20","C:\\dev\\stypendia\\client\\src\\pages\\reset.js":"21","C:\\dev\\stypendia\\client\\src\\pages\\logout.js":"22","C:\\dev\\stypendia\\client\\src\\pages\\changePass.js":"23","C:\\dev\\stypendia\\client\\src\\pages\\protectedRoute.js":"24","C:\\dev\\stypendia\\client\\src\\pages\\styles\\submit.styles.js":"25","C:\\dev\\stypendia\\client\\src\\components\\subALayout.js":"26","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitState.js":"27","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitContext.js":"28","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitReducer.js":"29","C:\\dev\\stypendia\\client\\src\\pages\\styles\\home.styles.js":"30","C:\\dev\\stypendia\\client\\src\\components\\Nav.js":"31","C:\\dev\\stypendia\\client\\src\\components\\allUsersSubmits.js":"32","C:\\dev\\stypendia\\client\\src\\components\\AllUsersSubmits.js":"33","C:\\dev\\stypendia\\client\\src\\components\\AllUsersDrafts.js":"34","C:\\dev\\stypendia\\client\\src\\components\\NewCallToAction.js":"35","C:\\dev\\stypendia\\client\\src\\pages\\submit.js":"36","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_I_II.js":"37","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_III_IV.js":"38","C:\\dev\\stypendia\\client\\src\\components\\styles\\nav.styles.js":"39","C:\\dev\\stypendia\\client\\src\\context\\app\\appState.js":"40","C:\\dev\\stypendia\\client\\src\\context\\app\\appContext.js":"41","C:\\dev\\stypendia\\client\\src\\context\\app\\appReducer.js":"42","C:\\dev\\stypendia\\client\\src\\components\\styles\\alert.styles.js":"43","C:\\dev\\stypendia\\client\\src\\components\\styles\\mainMenu.styles.js":"44","C:\\dev\\stypendia\\client\\src\\components\\styles\\layout.styles.js":"45","C:\\dev\\stypendia\\client\\src\\components\\styles\\rodo.styles.js":"46","C:\\dev\\stypendia\\client\\src\\pages\\styles\\login.styles.js":"47","C:\\dev\\stypendia\\client\\src\\pages\\styles\\changePass.styles.js":"48","C:\\dev\\stypendia\\client\\src\\pages\\styles\\logout.styles.js":"49","C:\\dev\\stypendia\\client\\src\\pages\\styles\\register.styles.js":"50","C:\\dev\\stypendia\\client\\src\\pages\\styles\\resend.styles.js":"51","C:\\dev\\stypendia\\client\\src\\pages\\styles\\reset.styles.js":"52","C:\\dev\\stypendia\\client\\src\\pages\\styles\\resetSend.styles.js":"53","C:\\dev\\stypendia\\client\\src\\pages\\styles\\verify.styles.js":"54","C:\\dev\\stypendia\\client\\src\\components\\submit\\Attachments.js":"55","C:\\dev\\stypendia\\client\\src\\components\\styles\\attachments.styles.js":"56","C:\\dev\\stypendia\\client\\src\\components\\Timer.js":"57","C:\\dev\\stypendia\\client\\src\\components\\styles\\timer.styles.js":"58","C:\\dev\\stypendia\\client\\src\\services\\saveRollbar.js":"59","C:\\dev\\stypendia\\client\\src\\pages\\404.js":"60","C:\\dev\\stypendia\\client\\src\\parts\\items.js":"61","C:\\dev\\stypendia\\client\\src\\parts\\inputs.js":"62","C:\\dev\\stypendia\\client\\src\\parts\\options.js":"63","C:\\dev\\stypendia\\client\\src\\pages\\styles\\404.styles.js":"64","C:\\dev\\stypendia\\client\\src\\components\\index.js":"65","C:\\dev\\stypendia\\client\\src\\context\\index.js":"66","C:\\dev\\stypendia\\client\\src\\pages\\index.js":"67","C:\\dev\\stypendia\\client\\src\\parts\\index.js":"68","C:\\dev\\stypendia\\client\\src\\components\\Errors.js":"69","C:\\dev\\stypendia\\client\\src\\utils\\mapErrors.js":"70","C:\\dev\\stypendia\\client\\src\\components\\styles\\errors.style.js":"71","C:\\dev\\stypendia\\client\\src\\hooks\\useFetch.js":"72","C:\\dev\\stypendia\\client\\src\\services\\index.js":"73","C:\\dev\\stypendia\\client\\src\\services\\fetchPdf.js":"74"},{"size":220,"mtime":1608816802276,"results":"75","hashOfConfig":"76"},{"size":1915,"mtime":1611505707776,"results":"77","hashOfConfig":"76"},{"size":627,"mtime":1611270646044,"results":"78","hashOfConfig":"76"},{"size":2085,"mtime":1611486806344,"results":"79","hashOfConfig":"76"},{"size":4710,"mtime":1611505707782,"results":"80","hashOfConfig":"76"},{"size":5768,"mtime":1611612213097,"results":"81","hashOfConfig":"76"},{"size":1478,"mtime":1611505707781,"results":"82","hashOfConfig":"76"},{"size":4432,"mtime":1610315383171,"results":"83","hashOfConfig":"76"},{"size":792,"mtime":1608799587288,"results":"84","hashOfConfig":"76"},{"size":2572,"mtime":1611328069725,"results":"85","hashOfConfig":"76"},{"size":630,"mtime":1611270646048,"results":"86","hashOfConfig":"76"},{"size":818,"mtime":1611612213097,"results":"87","hashOfConfig":"76"},{"size":105,"mtime":1608848462800,"results":"88","hashOfConfig":"76"},{"size":3061,"mtime":1611507026558,"results":"89","hashOfConfig":"76"},{"size":109,"mtime":1609080271356,"results":"90","hashOfConfig":"76"},{"size":3934,"mtime":1611505707786,"results":"91","hashOfConfig":"76"},{"size":837,"mtime":1609111776421,"results":"92","hashOfConfig":"76"},{"size":359,"mtime":1609111873258,"results":"93","hashOfConfig":"76"},{"size":3740,"mtime":1611612213098,"results":"94","hashOfConfig":"76"},{"size":4420,"mtime":1611612213099,"results":"95","hashOfConfig":"76"},{"size":4181,"mtime":1611612213098,"results":"96","hashOfConfig":"76"},{"size":924,"mtime":1611505707782,"results":"97","hashOfConfig":"76"},{"size":4039,"mtime":1611682229227,"results":"98","hashOfConfig":"76"},{"size":650,"mtime":1611505707783,"results":"99","hashOfConfig":"76"},{"size":1392,"mtime":1611612213099,"results":"100","hashOfConfig":"76"},{"size":657,"mtime":1611522442291,"results":"101","hashOfConfig":"76"},{"size":3527,"mtime":1611612213096,"results":"102","hashOfConfig":"76"},{"size":109,"mtime":1609777155673,"results":"103","hashOfConfig":"76"},{"size":904,"mtime":1611612213096,"results":"104","hashOfConfig":"76"},{"size":635,"mtime":1611173262477,"results":"105","hashOfConfig":"76"},{"size":3401,"mtime":1611612213092,"results":"106","hashOfConfig":"76"},{"size":884,"mtime":1610049531415,"results":"107","hashOfConfig":"76"},{"size":3186,"mtime":1611779280751,"results":"108","hashOfConfig":"76"},{"size":2063,"mtime":1611779104444,"results":"109","hashOfConfig":"76"},{"size":1511,"mtime":1611505707777,"results":"110","hashOfConfig":"76"},{"size":2494,"mtime":1611612213100,"results":"111","hashOfConfig":"76"},{"size":9206,"mtime":1611657672215,"results":"112","hashOfConfig":"76"},{"size":11152,"mtime":1611612213095,"results":"113","hashOfConfig":"76"},{"size":431,"mtime":1611523171630,"results":"114","hashOfConfig":"76"},{"size":750,"mtime":1611508329248,"results":"115","hashOfConfig":"76"},{"size":103,"mtime":1610289759632,"results":"116","hashOfConfig":"76"},{"size":268,"mtime":1610290118206,"results":"117","hashOfConfig":"76"},{"size":2238,"mtime":1611260018029,"results":"118","hashOfConfig":"76"},{"size":317,"mtime":1610314827261,"results":"119","hashOfConfig":"76"},{"size":189,"mtime":1610315081054,"results":"120","hashOfConfig":"76"},{"size":239,"mtime":1610315325540,"results":"121","hashOfConfig":"76"},{"size":414,"mtime":1610317294859,"results":"122","hashOfConfig":"76"},{"size":420,"mtime":1610317926565,"results":"123","hashOfConfig":"76"},{"size":127,"mtime":1610317074882,"results":"124","hashOfConfig":"76"},{"size":525,"mtime":1610317742736,"results":"125","hashOfConfig":"76"},{"size":420,"mtime":1610318211002,"results":"126","hashOfConfig":"76"},{"size":420,"mtime":1610318415352,"results":"127","hashOfConfig":"76"},{"size":420,"mtime":1610318605095,"results":"128","hashOfConfig":"76"},{"size":553,"mtime":1610319320735,"results":"129","hashOfConfig":"76"},{"size":11233,"mtime":1611778481031,"results":"130","hashOfConfig":"76"},{"size":979,"mtime":1611612213093,"results":"131","hashOfConfig":"76"},{"size":1628,"mtime":1611518854509,"results":"132","hashOfConfig":"76"},{"size":141,"mtime":1611270646045,"results":"133","hashOfConfig":"76"},{"size":391,"mtime":1611508308239,"results":"134","hashOfConfig":"76"},{"size":445,"mtime":1611486806346,"results":"135","hashOfConfig":"76"},{"size":2611,"mtime":1611506000300,"results":"136","hashOfConfig":"76"},{"size":2661,"mtime":1611486806352,"results":"137","hashOfConfig":"76"},{"size":1674,"mtime":1611602148934,"results":"138","hashOfConfig":"76"},{"size":239,"mtime":1611486806351,"results":"139","hashOfConfig":"76"},{"size":785,"mtime":1611612213093,"results":"140","hashOfConfig":"76"},{"size":492,"mtime":1611505707780,"results":"141","hashOfConfig":"76"},{"size":588,"mtime":1611505707782,"results":"142","hashOfConfig":"76"},{"size":76,"mtime":1611505707786,"results":"143","hashOfConfig":"76"},{"size":1837,"mtime":1611658026766,"results":"144","hashOfConfig":"76"},{"size":196,"mtime":1611612213100,"results":"145","hashOfConfig":"76"},{"size":187,"mtime":1611612213094,"results":"146","hashOfConfig":"76"},{"size":857,"mtime":1611779466304,"results":"147","hashOfConfig":"76"},{"size":61,"mtime":1611691643696,"results":"148","hashOfConfig":"76"},{"size":484,"mtime":1611691599367,"results":"149","hashOfConfig":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},"1cla2w0",{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"152"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"152"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"152"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"152"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"152"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"152"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"152"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"152"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"152"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"152"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"152"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"152"},{"filePath":"225","messages":"226","errorCount":2,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"152"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"152"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"152"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"152"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"152"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"152"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},"C:\\dev\\stypendia\\client\\src\\index.js",[],["317","318"],"C:\\dev\\stypendia\\client\\src\\App.js",[],"C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\Layout.js",[],"C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\MainMenu.js",["319"],"import React, { useContext, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport {Wrapper} from '../styles/mainMenu.styles'\r\nimport { leftMenuItems, rightMenuItems } from '../../items';\r\nimport AuthContext from '../../context/auth/authContext';\r\n\r\n\r\nconst MainMenu = ({ history }) => {\r\n\r\n\r\n  const [activeItem, setActiveItem] = useState('home');\r\n  const [hasOwnSub, setHasOwnSub] = useState(false);\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { isLoggedIn, logOut } = authContext;\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Menu icon='labeled' className='main'>\r\n        {leftMenuItems\r\n          .filter(\r\n            (item) =>\r\n              (item.noOwnSubDisplay === !hasOwnSub ||\r\n                item.hasOwnSubDisplay === hasOwnSub) &&\r\n              item.isLoggedInDisplay === isLoggedIn\r\n          )\r\n          .map((item) => (\r\n            <Link to={item.url} key={item.id}>\r\n              <Menu.Item\r\n                as='div'\r\n                icon={item.icon}\r\n                content={item.title}\r\n                name={item.name}\r\n                active={activeItem === item.name}\r\n                onClick={() => setActiveItem(item.name)}\r\n              />\r\n            </Link>\r\n          ))}\r\n\r\n        <Menu.Menu position='right' className='right'>\r\n          {rightMenuItems\r\n            .filter((item) => item.isLoggedInDisplay === isLoggedIn)\r\n            .map((item) => (\r\n              <Link to={item.url} key={item.id}>\r\n                <Menu.Item\r\n                  as='div'\r\n                  icon={item.icon}\r\n                  content={item.title}\r\n                  name={item.name}\r\n                  active={activeItem === item.name}\r\n                  onClick={() => {\r\n                    item.name === 'logout'\r\n                      ? logOut()\r\n                      : setActiveItem(item.name);\r\n                  }}\r\n                />\r\n              </Link>\r\n            ))}\r\n        </Menu.Menu>\r\n      </Menu>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default MainMenu;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\login.js",["320","321"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport { Wrapper } from './styles/login.styles';\r\nimport {Title} from '../components';\r\nimport {AlertContext, AppContext,AuthContext} from '../context';\r\nimport { loginInputs } from '../parts/inputs';\r\n\r\nconst Login = ({ history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading, saveRollbar } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n\r\n    setIsLoading(true);\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`/api/v1/users/login`, newBody)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setIsLoading(false);\r\n          // saveRollbar(data.data);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        // saveRollbar({ err: err.response.data.message, page: 'login' });\r\n        if (err.response?.data?.forcePassChange) {\r\n          addAlert(err.response.data);\r\n          setIsLoading(false);\r\n          history.push(\r\n            `/reset?id=${err.response.data.resetId}&token=${err.response.data.token}`\r\n          );\r\n\r\n          return;\r\n        }\r\n\r\n        if (err.response?.data?.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response?.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Logowanie' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Grid columns={2} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value='_csrf'></input>\r\n                {loginInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        className='input'\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          className='small'\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <span>{}</span>\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Zaloguj się'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n              <Link to='/resetsend'>\r\n                <div className='buttonWrapper'>\r\n                  <div className='span'>Zapomniałeś hasła?</div>\r\n                  <Button content='Resetuj hasło' icon='recycle' size='mini' />\r\n                </div>\r\n              </Link>\r\n            </Grid.Column>\r\n\r\n            <Grid.Column verticalAlign='middle'>\r\n              <Link to='/register'>\r\n                <Button content='Zarejestruj się' icon='user plus' size='big' />\r\n              </Link>\r\n            </Grid.Column>\r\n          </Grid>\r\n\r\n          <Divider vertical>lub</Divider>\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\register.js",["322"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Container,\r\n  Divider,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport { Wrapper } from './styles/register.styles';\r\nimport {Rodo,Title}  from '../components';\r\nimport { registerInputs } from '../parts/inputs';\r\nimport {AlertContext, AppContext,AuthContext } from '../context';\r\n\r\nconst Register = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\r\n  isLoggedIn && props.history.push('/');\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isRodoChecked, setIsRodoChecked] = useState(false);\r\n  const [isRegulationsChecked, setIsRegulationsChecked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n  }, []);\r\n\r\n  const handleOnClick = async (e) => {\r\n    setErrors('');\r\n    e.preventDefault();\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    setIsLoading(true);\r\n    const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`${process.env.REACT_APP_ORIGIN}/api/v1/users`, newBody)\r\n      .then((data) => {\r\n        console.log(data.data);\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          setIsLoading(false);\r\n          setTimeout(() => props.history.push('/login'), 1500);\r\n          addAlert(data.data);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        setErrors(err.response.data);\r\n        addAlert(err.response.data);\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div className='main'>\r\n        <Title content='Dodawanie konta' />\r\n        <Segment placeholder size='large'>\r\n          <Grid columns={2} relaxed='very' stackable>\r\n            <Grid.Column textAlign='left' verticalAlign='middle'>\r\n              <Header textAlign='center'>\r\n                Potwierdź niezbędne oświadczenia\r\n              </Header>\r\n\r\n              <Checkbox\r\n                onChange={() => setIsRegulationsChecked(!isRegulationsChecked)}\r\n                // value={isRegulationsChecked}\r\n                checked={isRegulationsChecked}\r\n                label={\r\n                  <label>\r\n                    Oświadczam, iż zapoznałam/em się z regulaminem i akceptuję\r\n                    jego postanowienia <span>*</span>\r\n                  </label>\r\n                }\r\n              />\r\n\r\n              <Rodo />\r\n\r\n              <Checkbox\r\n                onChange={() => setIsRodoChecked(!isRodoChecked)}\r\n                // value={isRodoChecked}\r\n                checked={isRodoChecked}\r\n                className='checkBox'\r\n                required\r\n                label={\r\n                  <label>\r\n                    Oświadczam, iż zapoznałam/em się z powyższą informacją\r\n                    <span> *</span>\r\n                  </label>\r\n                }\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n              <Container>\r\n                <Header>... podaj swoje dane</Header>\r\n                <Form>\r\n                  <input type='hidden' name='_csrf' value='_csrf'></input>\r\n                  {registerInputs.map((input) => {\r\n                    return (\r\n                      <div key={input.id}>\r\n                        <Form.Input\r\n                          loading={isLoading}\r\n                          onChange={(e) => handleOnChange(e)}\r\n                          required\r\n                          className='input'\r\n                          icon={input.icon}\r\n                          iconPosition='left'\r\n                          label={input.label}\r\n                          placeholder={input.placeholder}\r\n                          type={input.type}\r\n                          name={input.name}\r\n                        />\r\n                        {errors && errors[input.name] && (\r\n                          <Label\r\n                            basic\r\n                            color='red'\r\n                            pointing='above'\r\n                            key={input.id}\r\n                            className='small'\r\n                          >\r\n                            {errors[input.name]}\r\n                          </Label>\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  <Button\r\n                    loading={isLoading}\r\n                    type='submit'\r\n                    content='Zarejestruj się'\r\n                    primary\r\n                    size='large'\r\n                    onClick={handleOnClick}\r\n                    disabled={\r\n                      !isRegulationsChecked || !isRodoChecked ? true : false\r\n                    }\r\n                  />\r\n                </Form>\r\n                <Link to='/login'>\r\n                  <div className='buttonWrapper'>\r\n                    <div className='span'>Masz już konto?</div>\r\n                    <Button content='Zaloguj się' icon='user' size='mini' />\r\n                  </div>\r\n                </Link>\r\n              </Container>\r\n            </Grid.Column>\r\n          </Grid>\r\n\r\n          <Divider vertical>oraz</Divider>\r\n        </Segment>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\home.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Rodo.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Title.js",[],"C:\\dev\\stypendia\\client\\src\\context\\auth\\AuthState.js",["323"],"import React, { useContext, useEffect, useReducer } from 'react';\r\nimport authReducer from './authReducer';\r\nimport AuthContext from './authContext';\r\nimport axios from 'axios';\r\nimport AlertContext from '../../context/alert/alertContext';\r\n\r\nimport {\r\n  SET_USER,\r\n  CHECK_IS_LOGGED_IN,\r\n  LOGOUT_USER,\r\n  RESET_TIME_LEFT,\r\n  SET_TIME,\r\n} from '../types';\r\n\r\nconst AuthState = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const initialState = {\r\n    user: null,\r\n    timeLeft: +process.env.REACT_APP_SESSION_TIMEOUT,\r\n    isLoggedIn: false,\r\n  };\r\n\r\n  const checkIsAuthenticated = async () => {\r\n    const result = await (\r\n      await fetch('http://localhost:5003/api/v1/users/me', {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n    ).json();\r\n    result.resStatus === 'success' ? setIsLoggedIn(true) : setIsLoggedIn(false);\r\n    setUser(result.user);\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  const setUser = (user) => {\r\n    dispatch({\r\n      type: SET_USER,\r\n      payload: user,\r\n    });\r\n  };\r\n\r\n  const setIsLoggedIn = (is) => {\r\n    dispatch({\r\n      type: CHECK_IS_LOGGED_IN,\r\n      payload: is,\r\n    });\r\n  };\r\n\r\n  const resetTimeLeft = () => {\r\n    dispatch({\r\n      type: RESET_TIME_LEFT,\r\n    });\r\n  };\r\n\r\n  const setTimeLeft = (time) => {\r\n\r\n    dispatch({\r\n      type: SET_TIME,\r\n      payload: time\r\n    });\r\n  };\r\n\r\n  const logOut = () => {\r\n    axios\r\n      .get('/api/v1/users/logout')\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          await props?.history?.push('/login');\r\n        }\r\n\r\n        dispatch({\r\n          type: LOGOUT_USER,\r\n        });\r\n      })\r\n      .catch(\r\n        (err) => console.log(err.message)\r\n        //   if (err.response.data.alertTitle) {\r\n        //     console.log(err.response.data);\r\n\r\n        //     addAlert(err.response.data);\r\n        //   }\r\n        // });\r\n      );\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user: state.user,\r\n        setUser,\r\n        logOut,\r\n        checkIsAuthenticated,\r\n        isLoggedIn: state.isLoggedIn,\r\n        timeLeft: state.timeLeft,\r\n        resetTimeLeft,\r\n        setTimeLeft\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthState;\r\n","C:\\dev\\stypendia\\client\\src\\context\\auth\\authReducer.js",[],"C:\\dev\\stypendia\\client\\src\\context\\types.js",[],"C:\\dev\\stypendia\\client\\src\\context\\auth\\authContext.js",[],"C:\\dev\\stypendia\\client\\src\\components\\alert\\Alert.js",["324"],"import React, { useContext } from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\nimport { Wrapper } from '../styles/alert.styles';\r\n// import './Alert.css';\r\nimport AlertContext from '../../context/alert/alertContext';\r\n\r\nconst Alert = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { alerts, deleteAlert } = alertContext;\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div className={`notification-container ${props.position}`}>\r\n        {alerts.map((alert, i) => {\r\n          if (props.autoDeleteInterval) {\r\n            setInterval(() => {\r\n              deleteAlert(alert.id);\r\n            }, props.autoDeleteInterval);\r\n          }\r\n\r\n          switch (alert.resStatus) {\r\n            case 'error':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message error className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p> {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n            case 'info':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message info className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p> {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n\r\n            case 'warning':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message warning className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p> {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n\r\n            case 'success':\r\n              return (\r\n                <div key={alert.id} className={`${props.position}`}>\r\n                  <Message success className='toast'>\r\n                    <Message.Header className='notification-title'>\r\n                      {alert.alertTitle}\r\n                    </Message.Header>\r\n                    <Message.Content className='notification-message'>\r\n                      <p> {alert.msgPL}</p>\r\n                    </Message.Content>\r\n                  </Message>\r\n                </div>\r\n              );\r\n\r\n            default:\r\n              break;\r\n          }\r\n        })}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertContext.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\verify.js",["325","326"],"import axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport {AlertContext,AuthContext, AppContext} from '../context';\r\nimport { Link } from 'react-router-dom';\r\nimport { verItems } from '../parts/items';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Header,\r\n  Icon,\r\n  List,\r\n  Loader,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\n\r\nimport {Wrapper} from './styles/verify.styles'\r\nimport Title from '../components/Title';\r\n\r\nconst Verify = ({ location: { search }, history }) => {\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\r\n  isLoggedIn && history.push('/');\r\n\r\n  const [query, setQuery] = useState(search);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n\r\n    axios\r\n      .post(`/api/v1/email/verify${query}`)\r\n      .then((data) => {\r\n        setIsLoading(false);\r\n        setIsSuccess(true);\r\n        addAlert(data.data);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        addAlert(err.response.data);\r\n      });\r\n  }, [isLoggedIn]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Title content='Weryfikacja konta' />\r\n      <Loader active={isLoading} size='huge'>\r\n        Weryfikujemy\r\n      </Loader>\r\n\r\n      {!isLoading && !isSuccess && (\r\n        <Container className='msg'>\r\n          <Message error size='big' floating>\r\n            <Message.Header>Błąd weryfikacji danych</Message.Header>\r\n            <p>\r\n              Nie udało się potwierdzić konta przy użyciu tego linka. Być może\r\n              link jest już przestarzały lub uszkodzony. Możesz skorzystać z\r\n              mechanizmu ponownej wysyłki linka korzystając z tej strony:\r\n              <br />\r\n              <br />\r\n              <Link to='/resend'>\r\n                <Button primary size='large'>\r\n                  Ponownie wyślij link\r\n                </Button>\r\n              </Link>\r\n            </p>\r\n          </Message>\r\n        </Container>\r\n      )}\r\n\r\n      {!isLoading && isSuccess && (\r\n        <>\r\n          <Segment placeholder className='main' size='large'>\r\n            <Message success size='medium' floating>\r\n              <Message.Header>Potwierdzono konto!!!</Message.Header>\r\n              <p>\r\n                Udało się potwierdzić konto. Od tej chili możesz się zalogować i\r\n                złożyć wniosek.\r\n              </p>\r\n            </Message>\r\n\r\n            <List\r\n              size='large'\r\n              selection\r\n              animated\r\n              divided\r\n              verticalAlign='middle'\r\n              hor\r\n            >\r\n              {verItems.map((item) => (\r\n                <List.Item key={item.id}>\r\n                  <Link to={item.to}>\r\n                    <List.Content floated='right'>\r\n                      <Button\r\n                        size={item.button === 'Logowanie' ? 'big' : null}\r\n                        primary={item.button === 'Logowanie'}\r\n                        icon\r\n                        labelPosition='right'\r\n                      >\r\n                        {item.button}\r\n                        <Icon name='right arrow' />\r\n                      </Button>\r\n                    </List.Content>\r\n                    <List.Content verticalAlign='bottom' floated='left'>\r\n                      <Header as='h3' className='itemheader'>\r\n                        <Icon size='large' name={item.icon} /> {item.name}\r\n                      </Header>\r\n                    </List.Content>\r\n                  </Link>\r\n                </List.Item>\r\n              ))}\r\n            </List>\r\n          </Segment>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default Verify;\r\n","C:\\dev\\stypendia\\client\\src\\context\\alert\\AlertState.js",[],"C:\\dev\\stypendia\\client\\src\\context\\alert\\alertReducer.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\resend.js",["327"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\n\r\nimport { Wrapper } from './styles/resend.styles';\r\nimport {Title} from '../components';\r\nimport {AlertContext, AuthContext,AppContext} from '../context';\r\n\r\nconst Resend = ({ history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [email, setEmail] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    setErrors('');\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    const newBody = { email, _csrf: csrfData.data.csrfToken };\r\n    axios\r\n      .post(`/api/v1/email/resend`, newBody)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Potwierdzanie konta' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Message className='msg' info size='small' floating>\r\n            <Message.Header>\r\n              Ponowne wysłanie linka do potwierdzenia konta\r\n            </Message.Header>\r\n            <p>\r\n              Strona służy do ponownego wysłania linka potwierdzającego konto,\r\n              jeżeli konto już założyłaś/eś, ale nie skorzystałaś/eś z niego w\r\n              odpowiednim czasie. Link zostanie przesłany na podany adres email\r\n              i będzie ważny przez <strong>12 godzin</strong> . Jeżeli nie\r\n              znajdziesz linka sprawdź folder <strong> spam</strong> w Twojej\r\n              poczcie.\r\n            </p>\r\n          </Message>\r\n          <Grid columns={1} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value=''></input>\r\n                <Form.Input\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  required\r\n                  className='input'\r\n                  icon='mail'\r\n                  iconPosition='left'\r\n                  label='Email'\r\n                  placeholder='Podaj email'\r\n                  type='email'\r\n                  name='email'\r\n                />\r\n\r\n                {errors && errors.email && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {errors.email}\r\n                  </Label>\r\n                )}\r\n\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Wyślij link'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Resend;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\resetSend.js",["328"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport {Wrapper} from './styles/resetSend.styles'\r\nimport {Title} from '../components';\r\nimport {AlertContext,AuthContext ,AppContext} from '../context';\r\nimport { resetReqInputs } from '../parts/inputs';\r\n\r\nconst ResetSend = ({ history }) => {\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    setIsLoading(true);\r\n    setErrors('');\r\n    e.preventDefault();\r\n\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`/api/v1/password/email`, newBody)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/login');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n \r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n    const handleOnChange = (e) => {\r\n      e.preventDefault();\r\n      setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n    };\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Resetowanie hasła' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Message className='msg' info size='small' floating>\r\n            <Message.Header>Resetowanie hasła</Message.Header>\r\n            <p>\r\n              Strona służy do resetowania hasła do konta. Zostanie wygenerowany\r\n              specjalny link oraz przesłany na podany adres email i będzie ważny\r\n              przez <strong>12 godzin</strong>. Jeżeli nie znajdziesz linka\r\n              sprawdź folder <strong> spam</strong> w Twojej poczcie. W\r\n              formularzu poniżej podaj nazwę użytkownika oraz email, które\r\n              podałaś/eś w trakcie rejestracji.\r\n            </p>\r\n          </Message>\r\n          <Grid columns={1} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value=''></input>\r\n                {resetReqInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        className='input'\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          className='small'\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Wyślij link'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default ResetSend;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\reset.js",["329"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport {Wrapper} from './styles/reset.styles'\r\nimport {Title} from '../components';\r\nimport {AlertContext,AuthContext , AppContext}from '../context';\r\nimport { resetInputs } from '../parts/inputs';\r\n\r\nconst Reset = ({ location, history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n    const appContext = useContext(AppContext);\r\n    const { setIsLoading, isLoading } = appContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    setIsLoading(true);\r\n    setErrors('');\r\n    e.preventDefault();\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n    axios\r\n      .post(`/api/v1/password/reset${location.search}`, newBody)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/login');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n   \r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        <Title content='Nowe hasło' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Message className='msg' info size='small' floating>\r\n            <Message.Header>Nowe hasło</Message.Header>\r\n            <p>\r\n              Strona służy do nadawania nowego hasła. Podaj niezbędne dane i\r\n              zapisz zmiany. Pamiętaj, aby nowe hasło posiadało co najmniej 1\r\n              wielką literę, 1 małą oraz 1 cyfrę.\r\n            </p>\r\n          </Message>\r\n          <Grid columns={1} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value=''></input>\r\n                {resetInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        className='input'\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          className='small'\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Zapisz nowe hasło'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Container>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n\r\nexport default Reset;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\logout.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\changePass.js",["330"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport { Wrapper } from './styles/changePass.styles';\r\nimport Title from '../components/Title';\r\nimport {AlertContext,AppContext,AuthContext} from '../context';\r\nimport { changePassInputs } from '../parts/inputs';\r\n\r\nconst ChangePass = ({ history }) => {\r\n    const authContext = useContext(AuthContext);\r\n    const { resetTimeLeft } = authContext;\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    setIsLoading(true);\r\n    const newBody = { ...body, _csrf: csrfData.data.csrfToken };\r\n\r\n\r\n    axios\r\n      .post(`/api/v1/changepass`, newBody)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          await setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n    useEffect(() => {\r\n      resetTimeLeft();\r\n    }, []);\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <Title content='Zmiana hasła' />\r\n        <Segment placeholder className='main' size='large'>\r\n          <Message className='msg' info size='small' floating>\r\n            <Message.Header>Zmiana hasła</Message.Header>\r\n            <p>\r\n              Strona służy do zmiany hasła. Podaj obowiązujące i nowe hasło i\r\n              zapisz zmiany. Pamiętaj, aby nowe hasło posiadało co najmniej 1\r\n              wielką literę, 1 małą oraz 1 cyfrę.\r\n            </p>\r\n          </Message>\r\n          <Grid columns={1} relaxed='very' stackable>\r\n            <Grid.Column>\r\n              <Form>\r\n                <input type='hidden' name='_csrf' value=''></input>\r\n                {changePassInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        className='input'\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          className='small'\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Zmień hasło'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                />\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ChangePass;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\protectedRoute.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\submit.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\subALayout.js",["331","332"],"import React from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Header,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\n\r\nimport Title from './Title';\r\n\r\nconst SubALayout = ({ children, leadHeader }) => {\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Title content='Nowy wniosek' />\r\n\r\n          <Segment placeholder size='large'>\r\n\r\n            <Grid\r\n              className='container'\r\n              centered\r\n              columns={2}\r\n              relaxed='very'\r\n              stackable\r\n            >\r\n              {children}\r\n            </Grid>\r\n          </Segment>\r\n\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SubALayout;\r\n","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitState.js",[],"C:\\dev\\stypendia\\client\\src\\context\\submit\\submitContext.js",[],"C:\\dev\\stypendia\\client\\src\\context\\submit\\submitReducer.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\home.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Nav.js",["333","334"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  AlertContext,\r\n  AppContext,\r\n  AuthContext,\r\n  SubmitContext,\r\n} from '../context';\r\nimport { Wrapper } from './styles/nav.styles';\r\n\r\nconst Nav = ({ activeItem, setActiveItem, ...props }) => {\r\n  let history = useHistory();\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { resetTimeLeft } = authContext;\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const { newSubmit, submitMode, curSubmit, setSubmitErrors } = submitContext;\r\n\r\n  const appContext = useContext(AppContext);\r\n  const { setIsLoading, isLoading } = appContext;\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  // const [errors, setErrors] = useState('');\r\n\r\n  const addNewSubmit = async (submit) => {\r\n    setIsLoading(true);\r\n     setSubmitErrors('');\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    const newSubmit = { ...submit, _csrf: csrfData.data.csrfToken };\r\n    axios\r\n      .post('/api/v1/submits', newSubmit)\r\n      .then((data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n        }\r\n        setIsLoading(false);\r\n        history.push('/');\r\n      })\r\n      .catch((err) => {\r\n        if (err.response) {\r\n          console.log(err.response.data);\r\n          setSubmitErrors(err.response?.data);\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n      });\r\n  };\r\n\r\n  const updateSubmit = async (submit) => {\r\n    setIsLoading(true);\r\n    setSubmitErrors('');\r\n    const csrfData = await axios.get('/api/v1/csrf');\r\n    const newSubmit = { ...submit, _csrf: csrfData.data.csrfToken };\r\n    axios\r\n      .put('/api/v1/submits', newSubmit)\r\n      .then((data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (err.response) {\r\n          console.log(err.response.data);\r\n          setSubmitErrors(err.response?.data);\r\n          setIsLoading(false);\r\n\r\n          return;\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetTimeLeft();\r\n  }, []);\r\n\r\n  return (\r\n    <Wrapper mode={submitMode}>\r\n      <Button.Group size='medium'>\r\n        <Button\r\n          onClick={() => setActiveItem(activeItem - 1)}\r\n          className='nav-button'\r\n          labelPosition='left'\r\n          icon='left chevron'\r\n          content='Wróć'\r\n        />\r\n        <Button\r\n          className='nav-button save'\r\n          onClick={() => updateSubmit(curSubmit)}\r\n          primary\r\n          loading={isLoading}\r\n          icon='save'\r\n          content='Zapisz'\r\n        />\r\n\r\n        <Button\r\n          className='nav-button submit'\r\n          positive\r\n          loading={isLoading}\r\n          onClick={() => addNewSubmit(newSubmit)}\r\n          icon='thumbs up'\r\n          content='Złóż'\r\n        />\r\n        <Button\r\n          onClick={() => setActiveItem(activeItem + 1)}\r\n          className='nav-button'\r\n          labelPosition='right'\r\n          icon='right chevron'\r\n          content='Dalej'\r\n        />\r\n      </Button.Group>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","C:\\dev\\stypendia\\client\\src\\components\\allUsersSubmits.js",["335","336","337","338"],"C:\\dev\\stypendia\\client\\src\\components\\AllUsersSubmits.js",["339"],"C:\\dev\\stypendia\\client\\src\\components\\AllUsersDrafts.js",["340"],"C:\\dev\\stypendia\\client\\src\\components\\NewCallToAction.js",["341"],"import React, { useContext, useEffect} from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport {SubmitContext, AuthContext} from '../context';\r\nimport { Button, Card, Icon, } from 'semantic-ui-react';\r\n\r\nconst NewCallToAction = () => {\r\n    const authContext = useContext(AuthContext);\r\n    const { resetTimeLeft } = authContext;\r\n\r\n    const submitContext = useContext(SubmitContext);\r\n    const {setSubmitUuid, setSubmitMode } = submitContext;\r\n\r\n\r\n  const handleOnClick = (mode) => {\r\n    setSubmitMode(mode);\r\n    setSubmitUuid(null)\r\n\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    resetTimeLeft()\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Link to='/submit'>\r\n        <Card.Group\r\n          itemsPerRow={5}\r\n          stackable\r\n          centered\r\n          className='cards'\r\n          onClick={() => handleOnClick('new')}\r\n        >\r\n\r\n                <Card  className='card' raised>\r\n                  <Card.Content textAlign='center'>\r\n                    <Icon name='plus' size='big' color='black' />\r\n                    <Icon name='pencil' size='huge' color='black' />\r\n                  </Card.Content>\r\n                  <Card.Content extra>\r\n                    <Button primary size='large' icon labelPosition='right'>\r\n                      Złóż nowy wniosek\r\n                      <Icon name='right arrow' />\r\n                    </Button>\r\n                  </Card.Content>\r\n                </Card>\r\n\r\n        </Card.Group>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewCallToAction;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\submit.js",["342","343","344","345","346"],"import React, { useContext, useState } from 'react';\r\nimport { Grid, Menu } from 'semantic-ui-react';\r\n\r\nimport { SubA_I_II, SubA_III_IV, Attachments, Nav, Errors } from '../components';\r\nimport { Wrapper } from './styles/submit.styles';\r\nimport { SubmitContext } from '../context';\r\n\r\nconst Submit = () => {\r\n  const submitContext = useContext(SubmitContext);\r\n  const { submitMode } = submitContext;\r\n\r\n  const [activeItem, setActiveItem] = useState(1);\r\n\r\n  const renderComponent = () => {\r\n    if (activeItem > 5) setActiveItem(1);\r\n    if (activeItem < 1) setActiveItem(1);\r\n    switch (activeItem) {\r\n      case 1:\r\n        return <SubA_I_II />;\r\n      case 2:\r\n        return <SubA_III_IV />;\r\n      case 3:\r\n        return <Attachments />;\r\n      case 4:\r\n        return <SubA_III_IV />;\r\n      case 5:\r\n        return <SubA_III_IV />;\r\n\r\n      default:\r\n        return <SubA_I_II />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper submitMode={submitMode}>\r\n      <Errors/>\r\n      <Grid>\r\n        <Grid.Column width={4}>\r\n          <Menu fluid vertical tabular className='menu' >\r\n            <Menu.Item\r\n              icon='student'\r\n              name='Dane ucznia'\r\n              active={activeItem === 1}\r\n              onClick={() => setActiveItem(1)}\r\n            />\r\n            <Menu.Item\r\n              icon='university'\r\n              name='dane szkoły'\r\n              content='Dane szkoły'\r\n              active={activeItem === 2}\r\n              onClick={() => setActiveItem(2)}\r\n            />\r\n            <Menu.Item\r\n              icon='attach'\r\n              name='dane szkoły'\r\n              content='Załączniki'\r\n              active={activeItem === 3}\r\n              onClick={() => setActiveItem(3)}\r\n            />\r\n            <Menu.Item\r\n              icon='university'\r\n              name='dane szkoły'\r\n              content='Dane szkoły'\r\n              active={activeItem === 4}\r\n              onClick={() => setActiveItem(4)}\r\n            />\r\n            <Menu.Item\r\n              icon='university'\r\n              name='dane szkoły'\r\n              content='Dane szkoły'\r\n              active={activeItem === 5}\r\n              onClick={() => setActiveItem(5)}\r\n            />\r\n          </Menu>\r\n        </Grid.Column>\r\n\r\n        <Grid.Column stretched width={12}>\r\n          {renderComponent()}\r\n        <Nav activeItem={activeItem} setActiveItem={setActiveItem} />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Submit;\r\n","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_I_II.js",["347"],"import React, { useContext, useEffect } from 'react';\r\nimport { Form, Grid, Header, Label } from 'semantic-ui-react';\r\nimport SubALayout from '../subALayout';\r\n\r\nimport {AuthContext, SubmitContext }from '../../context';\r\nimport { optionsAttachment } from '../../parts/options';\r\n\r\nconst SubA_I_II = () => {\r\n  const authContext = useContext(AuthContext);\r\n  const { user, resetTimeLeft } = authContext;\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const {\r\n    newSubmit,\r\n    updateNewSubmit,\r\n    submitMode,\r\n    curSubmit,\r\n    updateCurSubmit,\r\n    submitToWatch,\r\n    submitErrors,\r\n  } = submitContext;\r\n\r\n  const handleOnChange = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (submitMode === 'edit') {\r\n      await updateCurSubmit({\r\n        ...curSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    } else if (submitMode === 'new') {\r\n      await updateNewSubmit({\r\n        ...newSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    resetTimeLeft();\r\n  }, []);\r\n\r\n  return (\r\n    <SubALayout leadHeader='CZĘŚĆ A – INFORMACJE DOTYCZĄCE UCZNIA/UCZENNICY'>\r\n      <Grid.Column className='column'>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          I. DANE OSOBOWE WNIOSKODAWCY:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              label='Imię wnioskodawcy'\r\n              name='firstName'\r\n              icon='user'\r\n              iconPosition='left'\r\n              value={user?.firstName} // usynąć znak zapytania\r\n            />\r\n            <Form.Input\r\n              icon='user'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Nazwisko wnioskodawcy'\r\n              name='lastName'\r\n              value={user?.lastName}\r\n            />\r\n\r\n            <Form.Input\r\n              className='input'\r\n              label='Email wnioskodawcy'\r\n              icon='at'\r\n              iconPosition='left'\r\n              placeholder='Podaj email wnioskodawcy'\r\n              name='phone'\r\n              value={user?.email}\r\n            />\r\n            <Form.Input\r\n              className='input'\r\n              label='Numer telefonu wnioskodawcy'\r\n              icon='phone'\r\n              iconPosition='left'\r\n              placeholder='Podaj numer telefonu wnioskodawcy'\r\n              name='phone'\r\n              onChange={(e) => handleOnChange(e)}\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.phone\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.phone\r\n                  : submitToWatch?.phone) || ''\r\n              }\r\n            />\r\n            {submitErrors?.phone && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.phone}\r\n              </Label>\r\n            )}\r\n\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              icon='box'\r\n              iconPosition='left'\r\n              label='Adres skrzynki ePuap (opcjonalnie)'\r\n              placeholder='Podaj adres ePuap (opcjonalnie)'\r\n              name='epuapAdr'\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.epuapAdr\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.epuapAdr\r\n                  : submitToWatch?.epuapAdr) || ''\r\n              }\r\n            />\r\n\r\n            <div className='select-wrapper'>\r\n              <Header className='select-header' as='h5'>\r\n                Status Wnioskodawcy\r\n              </Header>\r\n              <select\r\n                onChange={(e) => handleOnChange(e)}\r\n                name='isSelf'\r\n                value={\r\n                  (submitMode === 'edit'\r\n                    ? curSubmit?.isSelf\r\n                    : submitMode === 'new'\r\n                    ? newSubmit?.isSelf\r\n                    : submitToWatch?.isSelf) || 'default'\r\n                }\r\n              >\r\n                {optionsAttachment.map((o) => (\r\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                    {o.text}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {submitErrors?.isSelf && (\r\n                <Label basic color='red' pointing='above' className='select'>\r\n                  {submitErrors?.isSelf}\r\n                </Label>\r\n              )}\r\n            </div>\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n      <Grid.Column>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          II. DANE OSOBOWE UCZNIA:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              placeholder='Podaj PESEL ucznia'\r\n              label='PESEL ucznia'\r\n              name='pupilPesel'\r\n              icon='id card outline'\r\n              iconPosition='left'\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.pupilPesel\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilPesel\r\n                  : submitToWatch?.pupilPesel) || ''\r\n              }\r\n            />\r\n            {submitErrors?.pupilPesel && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.pupilPesel}\r\n              </Label>\r\n            )}\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              icon='user'\r\n              iconPosition='left'\r\n              label='Imię ucznia'\r\n              name='pupilFirstName'\r\n              placeholder='Podaj imię ucznia'\r\n              value={\r\n                (newSubmit.isSelf === '1'\r\n                  ? user.firstName\r\n                  : submitMode === 'edit'\r\n                  ? curSubmit?.pupilFirstName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilFirstName\r\n                  : submitToWatch?.pupilFirstName) || ''\r\n              }\r\n            />\r\n            {submitErrors?.pupilFirstName && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.pupilFirstName}\r\n              </Label>\r\n            )}\r\n\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              icon='user'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Nazwisko ucznia'\r\n              name='pupilLastName'\r\n              placeholder='Podaj nazwisko ucznia'\r\n              value={\r\n                (newSubmit.isSelf === '1'\r\n                  ? user.lastName\r\n                  : submitMode === 'edit'\r\n                  ? curSubmit?.pupilLastName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilLastName\r\n                  : submitToWatch?.pupilLastName) || ''\r\n              }\r\n            />\r\n            {submitErrors?.pupilLastName && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.pupilLastName}\r\n              </Label>\r\n            )}\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              icon='at'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Email ucznia'\r\n              type='email'\r\n              name='pupilEmail'\r\n              placeholder='Podaj adres email ucznia'\r\n              value={\r\n                (newSubmit.isSelf === '1'\r\n                  ? user.email\r\n                  : submitMode === 'edit'\r\n                  ? curSubmit?.pupilEmail\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilEmail\r\n                  : submitToWatch?.pupilEmail) || ''\r\n              }\r\n            />\r\n            {submitErrors?.pupilEmail && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.pupilEmail}\r\n              </Label>\r\n            )}\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              label='Numer telefonu ucznia'\r\n              icon='phone'\r\n              iconPosition='left'\r\n              placeholder='Podaj numer telefonu ucznia'\r\n              type='phone'\r\n              name='pupilPhone'\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.pupilPhone\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilPhone\r\n                  : submitToWatch?.pupilPhone) || ''\r\n              }\r\n            />\r\n            {submitErrors?.pupilPhone && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.pupilPhone}\r\n              </Label>\r\n            )}\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n    </SubALayout>\r\n  );\r\n};\r\n\r\nexport default SubA_I_II;\r\n","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_III_IV.js",["348"],"import React, { useContext, useEffect } from 'react';\r\nimport { Form, Grid, Header, Label, Segment } from 'semantic-ui-react';\r\nimport SubALayout from '../subALayout';\r\nimport { SubmitContext, AuthContext } from '../../context';\r\nimport { optionsVoyev, optionsSchoolType, optionsProfile } from '../../parts';\r\n\r\nconst SubA_III_IV = () => {\r\n  const authContext = useContext(AuthContext);\r\n  const { resetTimeLeft } = authContext;\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const {\r\n    newSubmit,\r\n    updateNewSubmit,\r\n    submitMode,\r\n    curSubmit,\r\n    updateCurSubmit,\r\n    submitToWatch,\r\n    submitErrors,\r\n  } = submitContext;\r\n\r\n  const handleOnChange = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (submitMode === 'edit') {\r\n      await updateCurSubmit({\r\n        ...curSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    } else if (submitMode === 'new') {\r\n      await updateNewSubmit({\r\n        ...newSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetTimeLeft();\r\n  }, []);\r\n\r\n  return (\r\n    <SubALayout leadHeader='CZĘŚĆ A – INFORMACJE DOTYCZĄCE UCZNIA/UCZENNICY'>\r\n      <Grid.Column className='column'>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          III. DANE SZKOŁY:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              label='Pełna nazwa szkoły'\r\n              name='schoolName'\r\n              icon='building outline'\r\n              placeholder='Podaj pełną nazwę szkoły'\r\n              iconPosition='left'\r\n              onChange={(e) => handleOnChange(e)}\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.schoolName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.schoolName\r\n                  : submitToWatch?.schoolName) || ''\r\n              }\r\n            />\r\n\r\n            {submitErrors?.schoolName && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.schoolName}\r\n              </Label>\r\n            )}\r\n            <div className='select-wrapper'>\r\n              <Header className='select-header' as='h5'>\r\n                Profil doradcy\r\n              </Header>\r\n              <select\r\n                name='schoolType'\r\n                onChange={(e) => handleOnChange(e)}\r\n                value={\r\n                  (submitMode === 'edit'\r\n                    ? curSubmit?.schoolType\r\n                    : submitMode === 'new'\r\n                    ? newSubmit?.schoolType\r\n                    : submitToWatch?.schoolType) || 'default'\r\n                }\r\n              >\r\n                {optionsSchoolType.map((o) => (\r\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                    {o.text}\r\n                  </option>\r\n                ))}\r\n              </select>{' '}\r\n              {submitErrors?.schoolType && (\r\n                <Label basic color='red' pointing='above' className='select'>\r\n                  {submitErrors?.schoolType}\r\n                </Label>\r\n              )}\r\n            </div>\r\n\r\n            <div className='adress-wrapper'>\r\n              <Header as='h4'>Adres szkoły</Header>\r\n              <Segment>\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='user'\r\n                  iconPosition='left'\r\n                  placeholder='Podaj ulicę'\r\n                  name='schoolStreetName'\r\n                  value={\r\n                    (submitMode === 'edit'\r\n                      ? curSubmit?.schoolStreetName\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolStreetName\r\n                      : submitToWatch?.schoolStreetName) || ''\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                {submitErrors?.schoolStreetName && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {submitErrors?.schoolStreetName}\r\n                  </Label>\r\n                )}\r\n                <Form.Input\r\n                  className='input'\r\n                  // label='Adres szkoły (numer domu)'\r\n                  icon='phone'\r\n                  iconPosition='left'\r\n                  placeholder='Podaj numer domu'\r\n                  name='schoolStreetNr'\r\n                  value={\r\n                    (submitMode === 'edit'\r\n                      ? curSubmit?.schoolStreetNr\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolStreetNr\r\n                      : submitToWatch?.schoolStreetNr) || ''\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                {submitErrors?.schoolStreetNr && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {submitErrors?.schoolStreetNr}\r\n                  </Label>\r\n                )}\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='zip'\r\n                  iconPosition='left'\r\n                  placeholder='Podaj kod pocztowy w formacie XX-XXX'\r\n                  name='schoolZip'\r\n                  value={\r\n                    (submitMode === 'edit'\r\n                      ? curSubmit?.schoolZip\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolZip\r\n                      : submitToWatch?.schoolZip) || ''\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                {submitErrors?.schoolZip && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {submitErrors?.schoolZip}\r\n                  </Label>\r\n                )}\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='zip'\r\n                  iconPosition='left'\r\n                  // label='Adres szkoły (miejscowość)'\r\n                  placeholder='Podaj miejscowość'\r\n                  name='schoolTown'\r\n                  value={\r\n                    (submitMode === 'edit'\r\n                      ? curSubmit?.schoolTown\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolTown\r\n                      : submitToWatch?.schoolTown) || ''\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                {submitErrors?.schoolTown && (\r\n                  <Label basic color='red' pointing='above' className='small'>\r\n                    {submitErrors?.schoolTown}\r\n                  </Label>\r\n                )}\r\n                <div className='select-wrapper'>\r\n                  <select\r\n                    name='schoolVoyev'\r\n                    onChange={(e) => handleOnChange(e)}\r\n                    value={\r\n                      (submitMode === 'edit'\r\n                        ? curSubmit?.schoolVoyev\r\n                        : submitMode === 'new'\r\n                        ? newSubmit?.schoolVoyev\r\n                        : submitToWatch?.schoolVoyev) || 'default'\r\n                    }\r\n                  >\r\n                    {optionsVoyev.map((o) => (\r\n                      <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                        {o.text}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {submitErrors?.schoolVoyev && (\r\n                    <Label\r\n                      basic\r\n                      color='red'\r\n                      pointing='above'\r\n                      className='select'\r\n                    >\r\n                      {submitErrors?.schoolVoyev}\r\n                    </Label>\r\n                  )}\r\n                </div>\r\n              </Segment>\r\n            </div>\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n      <Grid.Column>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          IV. DANE OPIEKUNA DYDAKTYCZNEGO:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              icon='user'\r\n              iconPosition='left'\r\n              label='Imię doradcy'\r\n              name='counselorFirstName'\r\n              placeholder='Podaj imię doradcy'\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.counselorFirstName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.counselorFirstName\r\n                  : submitToWatch?.counselorFirstName) || ''\r\n              }\r\n              onChange={(e) => handleOnChange(e)}\r\n            />\r\n            {submitErrors?.counselorFirstName && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.counselorFirstName}\r\n              </Label>\r\n            )}\r\n            <Form.Input\r\n              icon='user'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Nazwisko doradcy'\r\n              name='counselorLastName'\r\n              placeholder='Podaj nazwisko doradcy'\r\n              value={\r\n                (submitMode === 'edit'\r\n                  ? curSubmit?.counselorLastName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.counselorLastName\r\n                  : submitToWatch?.counselorLastName) || ''\r\n              }\r\n              onChange={(e) => handleOnChange(e)}\r\n            />\r\n            {submitErrors?.counselorLastName && (\r\n              <Label basic color='red' pointing='above' className='small'>\r\n                {submitErrors?.counselorLastName}\r\n              </Label>\r\n            )}\r\n            <div className='select-wrapper'>\r\n              <Header className='select-header' as='h5'>\r\n                Profil doradcy\r\n              </Header>\r\n              <select\r\n                name='counselorProfile'\r\n                onChange={(e) => handleOnChange(e)}\r\n                placeholder='Wybierz profil doradcy'\r\n                value={\r\n                  (submitMode === 'edit'\r\n                    ? curSubmit?.counselorProfile\r\n                    : submitMode === 'new'\r\n                    ? newSubmit?.counselorProfile\r\n                    : submitToWatch?.counselorProfile) || 'default'\r\n                }\r\n              >\r\n                {optionsProfile.map((o) => (\r\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                    {o.text}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {submitErrors?.counselorProfile && (\r\n                <Label basic color='red' pointing='above' className='select'>\r\n                  {submitErrors?.counselorProfile}\r\n                </Label>\r\n              )}\r\n            </div>\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n    </SubALayout>\r\n  );\r\n};\r\n\r\nexport default SubA_III_IV;\r\n","C:\\dev\\stypendia\\client\\src\\components\\styles\\nav.styles.js",[],"C:\\dev\\stypendia\\client\\src\\context\\app\\appState.js",[],"C:\\dev\\stypendia\\client\\src\\context\\app\\appContext.js",[],"C:\\dev\\stypendia\\client\\src\\context\\app\\appReducer.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\alert.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\mainMenu.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\layout.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\styles\\rodo.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\login.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\changePass.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\logout.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\register.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\resend.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\reset.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\resetSend.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\verify.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\submit\\Attachments.js",["349"],"C:\\dev\\stypendia\\client\\src\\components\\styles\\attachments.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Timer.js",["350"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { Wrapper } from './styles/timer.styles';\r\nimport {AuthContext} from '../context';\r\n\r\n\r\n\r\nconst Timer = () => {\r\n  const authContext = useContext(AuthContext);\r\n  const { isLoggedIn, logOut, user, timeLeft, setTimeLeft } = authContext;\r\n\r\n  const [color, setColor] = useState(null);\r\n  const [size, setSize] = useState('tiny');\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    timeLeft < +process.env.REACT_APP_SESSION_ALERT && setColor('red');\r\n    timeLeft < +process.env.REACT_APP_SESSION_ALERT && setSize('');\r\n    timeLeft === 0 && logOut();\r\n    const timer =\r\n      timeLeft > 0 && setInterval(() => setTimeLeft(timeLeft - 1), 1000);\r\n    return () => clearInterval(timer);\r\n  }, [timeLeft]);\r\n\r\n\r\n  return isLoggedIn ? (\r\n    <Wrapper>\r\n      <Label className='timer' as='div' color={color} size={size} image>\r\n        <img\r\n          className='img'\r\n          src='https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'\r\n          alt='user'\r\n        />\r\n        {user?.firstName} {user?.lastName} ({user?.login})\r\n        {timeLeft < +process.env.REACT_APP_SESSION_ALERT && (\r\n          <Label.Detail>Niedługo nastąpi wylogowanie</Label.Detail>\r\n        )}\r\n        <Label.Detail>\r\n          Sesja{' '}\r\n          {timeLeft / 60 < 10\r\n            ? '0' + Math.floor(timeLeft / 60)\r\n            : Math.floor(timeLeft / 60)}\r\n          :{timeLeft % 60 < 10 ? '0' + (timeLeft % 60) : timeLeft % 60}\r\n        </Label.Detail>\r\n      </Label>\r\n    </Wrapper>\r\n  ) : null;\r\n};\r\n\r\nexport default Timer;\r\n","C:\\dev\\stypendia\\client\\src\\components\\styles\\timer.styles.js",[],"C:\\dev\\stypendia\\client\\src\\services\\saveRollbar.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\404.js",[],"C:\\dev\\stypendia\\client\\src\\parts\\items.js",[],"C:\\dev\\stypendia\\client\\src\\parts\\inputs.js",[],"C:\\dev\\stypendia\\client\\src\\parts\\options.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\404.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\index.js",[],"C:\\dev\\stypendia\\client\\src\\context\\index.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\index.js",[],"C:\\dev\\stypendia\\client\\src\\parts\\index.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Errors.js",[],"C:\\dev\\stypendia\\client\\src\\utils\\mapErrors.js",["351"],"export const mapErrors = (object) => {\r\n  if (!object) return;\r\n  const errors = [];\r\n  for (const [key, value] of Object.entries(object)) {\r\n    errors.push(value);\r\n  }\r\n\r\n  return errors;\r\n};\r\n","C:\\dev\\stypendia\\client\\src\\components\\styles\\errors.style.js",[],"C:\\dev\\stypendia\\client\\src\\hooks\\useFetch.js",["352"],"C:\\dev\\stypendia\\client\\src\\services\\index.js",[],"C:\\dev\\stypendia\\client\\src\\services\\fetchPdf.js",[],{"ruleId":"353","replacedBy":"354"},{"ruleId":"355","replacedBy":"356"},{"ruleId":"357","severity":1,"message":"358","line":13,"column":21,"nodeType":"359","messageId":"360","endLine":13,"endColumn":33},{"ruleId":"357","severity":1,"message":"361","line":24,"column":36,"nodeType":"359","messageId":"360","endLine":24,"endColumn":47},{"ruleId":"362","severity":1,"message":"363","line":35,"column":6,"nodeType":"364","endLine":35,"endColumn":18,"suggestions":"365"},{"ruleId":"362","severity":1,"message":"366","line":38,"column":6,"nodeType":"364","endLine":38,"endColumn":8,"suggestions":"367"},{"ruleId":"362","severity":1,"message":"366","line":95,"column":6,"nodeType":"364","endLine":95,"endColumn":8,"suggestions":"368"},{"ruleId":"369","severity":1,"message":"370","line":14,"column":32,"nodeType":"371","messageId":"372","endLine":14,"endColumn":34},{"ruleId":"357","severity":1,"message":"373","line":33,"column":17,"nodeType":"359","messageId":"360","endLine":33,"endColumn":25},{"ruleId":"362","severity":1,"message":"374","line":49,"column":6,"nodeType":"364","endLine":49,"endColumn":18,"suggestions":"375"},{"ruleId":"362","severity":1,"message":"363","line":33,"column":6,"nodeType":"364","endLine":33,"endColumn":18,"suggestions":"376"},{"ruleId":"362","severity":1,"message":"363","line":35,"column":6,"nodeType":"364","endLine":35,"endColumn":18,"suggestions":"377"},{"ruleId":"362","severity":1,"message":"363","line":34,"column":6,"nodeType":"364","endLine":34,"endColumn":18,"suggestions":"378"},{"ruleId":"362","severity":1,"message":"379","line":63,"column":8,"nodeType":"364","endLine":63,"endColumn":10,"suggestions":"380"},{"ruleId":"357","severity":1,"message":"381","line":5,"column":3,"nodeType":"359","messageId":"360","endLine":5,"endColumn":9},{"ruleId":"357","severity":1,"message":"382","line":6,"column":3,"nodeType":"359","messageId":"360","endLine":6,"endColumn":8},{"ruleId":"357","severity":1,"message":"383","line":1,"column":40,"nodeType":"359","messageId":"360","endLine":1,"endColumn":48},{"ruleId":"362","severity":1,"message":"379","line":82,"column":6,"nodeType":"364","endLine":82,"endColumn":8,"suggestions":"384"},{"ruleId":"385","severity":2,"message":"386","line":8,"column":24,"nodeType":"359","endLine":8,"endColumn":34},{"ruleId":"385","severity":2,"message":"386","line":12,"column":23,"nodeType":"359","endLine":12,"endColumn":33},{"ruleId":"357","severity":1,"message":"387","line":15,"column":9,"nodeType":"359","messageId":"360","endLine":15,"endColumn":15},{"ruleId":"357","severity":1,"message":"388","line":16,"column":9,"nodeType":"359","messageId":"360","endLine":16,"endColumn":27},{"ruleId":"362","severity":1,"message":"379","line":39,"column":6,"nodeType":"364","endLine":39,"endColumn":12,"suggestions":"389"},{"ruleId":"362","severity":1,"message":"379","line":19,"column":6,"nodeType":"364","endLine":19,"endColumn":8,"suggestions":"390"},{"ruleId":"362","severity":1,"message":"379","line":24,"column":6,"nodeType":"364","endLine":24,"endColumn":8,"suggestions":"391"},{"ruleId":"392","severity":1,"message":"393","line":19,"column":16,"nodeType":"394","endLine":19,"endColumn":29},{"ruleId":"392","severity":1,"message":"395","line":21,"column":16,"nodeType":"394","endLine":21,"endColumn":31},{"ruleId":"392","severity":1,"message":"395","line":25,"column":16,"nodeType":"394","endLine":25,"endColumn":31},{"ruleId":"392","severity":1,"message":"395","line":27,"column":16,"nodeType":"394","endLine":27,"endColumn":31},{"ruleId":"392","severity":1,"message":"393","line":30,"column":16,"nodeType":"394","endLine":30,"endColumn":29},{"ruleId":"362","severity":1,"message":"379","line":40,"column":6,"nodeType":"364","endLine":40,"endColumn":8,"suggestions":"396"},{"ruleId":"362","severity":1,"message":"379","line":40,"column":6,"nodeType":"364","endLine":40,"endColumn":8,"suggestions":"397"},{"ruleId":"362","severity":1,"message":"379","line":124,"column":6,"nodeType":"364","endLine":124,"endColumn":55,"suggestions":"398"},{"ruleId":"362","severity":1,"message":"399","line":24,"column":6,"nodeType":"364","endLine":24,"endColumn":16,"suggestions":"400"},{"ruleId":"357","severity":1,"message":"401","line":4,"column":15,"nodeType":"359","messageId":"360","endLine":4,"endColumn":18},{"ruleId":"362","severity":1,"message":"402","line":32,"column":6,"nodeType":"364","endLine":32,"endColumn":8,"suggestions":"403"},"no-native-reassign",["404"],"no-negated-in-lhs",["405"],"no-unused-vars","'setHasOwnSub' is assigned a value but never used.","Identifier","unusedVar","'saveRollbar' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkIsAuthenticated' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["406"],"React Hook useEffect has a missing dependency: 'checkIsAuthenticated'. Either include it or remove the dependency array.",["407"],["408"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setQuery' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addAlert', 'checkIsAuthenticated', 'query', and 'setIsLoading'. Either include them or remove the dependency array.",["409"],["410"],["411"],["412"],"React Hook useEffect has a missing dependency: 'resetTimeLeft'. Either include it or remove the dependency array.",["413"],"'Header' is defined but never used.","'Label' is defined but never used.","'useState' is defined but never used.",["414"],"react-hooks/rules-of-hooks","React Hook \"useContext\" is called in function \"allUsersSubmits\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","'userId' is assigned a value but never used.","'setAllUsersSubmits' is assigned a value but never used.",["415"],["416"],["417"],"react/jsx-pascal-case","Imported JSX component SubA_I_II must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component SubA_III_IV must be in PascalCase or SCREAMING_SNAKE_CASE",["418"],["419"],["420"],"React Hook useEffect has missing dependencies: 'logOut' and 'setTimeLeft'. Either include them or remove the dependency array.",["421"],"'key' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addAlert', 'setIsLoading', and 'url'. Either include them or remove the dependency array.",["422"],"no-global-assign","no-unsafe-negation",{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"425","fix":"427"},{"desc":"428","fix":"429"},{"desc":"423","fix":"430"},{"desc":"423","fix":"431"},{"desc":"423","fix":"432"},{"desc":"433","fix":"434"},{"desc":"433","fix":"435"},{"desc":"436","fix":"437"},{"desc":"433","fix":"438"},{"desc":"433","fix":"439"},{"desc":"433","fix":"440"},{"desc":"433","fix":"441"},{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},"Update the dependencies array to be: [checkIsAuthenticated, history, isLoggedIn]",{"range":"448","text":"449"},"Update the dependencies array to be: [checkIsAuthenticated]",{"range":"450","text":"451"},{"range":"452","text":"451"},"Update the dependencies array to be: [addAlert, checkIsAuthenticated, isLoggedIn, query, setIsLoading]",{"range":"453","text":"454"},{"range":"455","text":"449"},{"range":"456","text":"449"},{"range":"457","text":"449"},"Update the dependencies array to be: [resetTimeLeft]",{"range":"458","text":"459"},{"range":"460","text":"459"},"Update the dependencies array to be: [data, resetTimeLeft]",{"range":"461","text":"462"},{"range":"463","text":"459"},{"range":"464","text":"459"},{"range":"465","text":"459"},{"range":"466","text":"459"},"Update the dependencies array to be: [submitMode, submitToWatch, newSubmit, curSubmit, resetTimeLeft]",{"range":"467","text":"468"},"Update the dependencies array to be: [logOut, setTimeLeft, timeLeft]",{"range":"469","text":"470"},"Update the dependencies array to be: [addAlert, setIsLoading, url]",{"range":"471","text":"472"},[985,997],"[checkIsAuthenticated, history, isLoggedIn]",[1146,1148],"[checkIsAuthenticated]",[2188,2190],[1306,1318],"[addAlert, checkIsAuthenticated, isLoggedIn, query, setIsLoading]",[895,907],[949,961],[950,962],[1776,1778],"[resetTimeLeft]",[2366,2368],[1090,1096],"[data, resetTimeLeft]",[579,581],[605,607],[1042,1044],[1071,1073],[3969,4018],"[submitMode, submitToWatch, newSubmit, curSubmit, resetTimeLeft]",[786,796],"[logOut, setTimeLeft, timeLeft]",[799,801],"[addAlert, setIsLoading, url]"]