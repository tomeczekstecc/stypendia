[{"/home/tomek/apps/stypendia/client/src/index.js":"1","/home/tomek/apps/stypendia/client/src/App.js":"2","/home/tomek/apps/stypendia/client/src/components/commonLayout/Layout.js":"3","/home/tomek/apps/stypendia/client/src/components/commonLayout/MainMenu.js":"4","/home/tomek/apps/stypendia/client/src/components/Timer.js":"5","/home/tomek/apps/stypendia/client/src/components/styles/layout.styles.js":"6","/home/tomek/apps/stypendia/client/src/context/auth/authContext.js":"7","/home/tomek/apps/stypendia/client/src/components/index.js":"8","/home/tomek/apps/stypendia/client/src/context/index.js":"9","/home/tomek/apps/stypendia/client/src/pages/index.js":"10","/home/tomek/apps/stypendia/client/src/components/styles/mainMenu.styles.js":"11","/home/tomek/apps/stypendia/client/src/components/styles/timer.styles.js":"12","/home/tomek/apps/stypendia/client/src/parts/items.js":"13","/home/tomek/apps/stypendia/client/src/components/AllUsersDrafts.js":"14","/home/tomek/apps/stypendia/client/src/components/AllUsersSubmits.js":"15","/home/tomek/apps/stypendia/client/src/components/NewCallToAction.js":"16","/home/tomek/apps/stypendia/client/src/components/Nav.js":"17","/home/tomek/apps/stypendia/client/src/components/Rodo.js":"18","/home/tomek/apps/stypendia/client/src/components/subALayout.js":"19","/home/tomek/apps/stypendia/client/src/components/Errors.js":"20","/home/tomek/apps/stypendia/client/src/components/ConfirmModal.js":"21","/home/tomek/apps/stypendia/client/src/components/Title.js":"22","/home/tomek/apps/stypendia/client/src/pages/404.js":"23","/home/tomek/apps/stypendia/client/src/pages/home.js":"24","/home/tomek/apps/stypendia/client/src/context/auth/AuthState.js":"25","/home/tomek/apps/stypendia/client/src/pages/logout.js":"26","/home/tomek/apps/stypendia/client/src/pages/changePass.js":"27","/home/tomek/apps/stypendia/client/src/pages/login.js":"28","/home/tomek/apps/stypendia/client/src/pages/protectedRoute.js":"29","/home/tomek/apps/stypendia/client/src/pages/register.js":"30","/home/tomek/apps/stypendia/client/src/pages/resend.js":"31","/home/tomek/apps/stypendia/client/src/pages/reset.js":"32","/home/tomek/apps/stypendia/client/src/pages/submit.js":"33","/home/tomek/apps/stypendia/client/src/pages/resetSend.js":"34","/home/tomek/apps/stypendia/client/src/pages/profile.js":"35","/home/tomek/apps/stypendia/client/src/pages/verify.js":"36","/home/tomek/apps/stypendia/client/src/components/alert/Alert.js":"37","/home/tomek/apps/stypendia/client/src/components/submit/subA_I_II.js":"38","/home/tomek/apps/stypendia/client/src/components/submit/Attachments.js":"39","/home/tomek/apps/stypendia/client/src/components/submit/subA_III_IV.js":"40","/home/tomek/apps/stypendia/client/src/context/alert/alertContext.js":"41","/home/tomek/apps/stypendia/client/src/context/alert/AlertState.js":"42","/home/tomek/apps/stypendia/client/src/context/submit/submitContext.js":"43","/home/tomek/apps/stypendia/client/src/context/app/appContext.js":"44","/home/tomek/apps/stypendia/client/src/context/app/appState.js":"45","/home/tomek/apps/stypendia/client/src/context/submit/submitState.js":"46","/home/tomek/apps/stypendia/client/src/components/styles/rodo.styles.js":"47","/home/tomek/apps/stypendia/client/src/components/styles/nav.styles.js":"48","/home/tomek/apps/stypendia/client/src/context/types.js":"49","/home/tomek/apps/stypendia/client/src/components/styles/errors.style.js":"50","/home/tomek/apps/stypendia/client/src/hooks/useFetch.js":"51","/home/tomek/apps/stypendia/client/src/utils/mapErrors.js":"52","/home/tomek/apps/stypendia/client/src/pages/styles/home.styles.js":"53","/home/tomek/apps/stypendia/client/src/context/alert/alertReducer.js":"54","/home/tomek/apps/stypendia/client/src/pages/styles/submit.styles.js":"55","/home/tomek/apps/stypendia/client/src/pages/styles/verify.styles.js":"56","/home/tomek/apps/stypendia/client/src/context/submit/submitReducer.js":"57","/home/tomek/apps/stypendia/client/src/context/app/appReducer.js":"58","/home/tomek/apps/stypendia/client/src/components/styles/attachments.styles.js":"59","/home/tomek/apps/stypendia/client/src/utils/toLocaleDate.js":"60","/home/tomek/apps/stypendia/client/src/parts/options.js":"61","/home/tomek/apps/stypendia/client/src/components/styles/alert.styles.js":"62","/home/tomek/apps/stypendia/client/src/pages/styles/profile.styles.js":"63","/home/tomek/apps/stypendia/client/src/parts/inputs.js":"64","/home/tomek/apps/stypendia/client/src/pages/styles/resetSend.styles.js":"65","/home/tomek/apps/stypendia/client/src/pages/styles/reset.styles.js":"66","/home/tomek/apps/stypendia/client/src/pages/styles/resend.styles.js":"67","/home/tomek/apps/stypendia/client/src/parts/index.js":"68","/home/tomek/apps/stypendia/client/src/services/index.js":"69","/home/tomek/apps/stypendia/client/src/utils/index.js":"70","/home/tomek/apps/stypendia/client/src/services/fetchPdf.js":"71","/home/tomek/apps/stypendia/client/src/services/saveRollbar.js":"72","/home/tomek/apps/stypendia/client/src/pages/styles/register.styles.js":"73","/home/tomek/apps/stypendia/client/src/pages/styles/login.styles.js":"74","/home/tomek/apps/stypendia/client/src/pages/styles/changePass.styles.js":"75","/home/tomek/apps/stypendia/client/src/pages/styles/logout.styles.js":"76","/home/tomek/apps/stypendia/client/src/context/auth/authReducer.js":"77","/home/tomek/apps/stypendia/client/src/pages/styles/404.styles.js":"78","/home/tomek/apps/stypendia/client/src/utils/capitalize.js":"79"},{"size":220,"mtime":1612096648329,"results":"80","hashOfConfig":"81"},{"size":1949,"mtime":1612217982718,"results":"82","hashOfConfig":"81"},{"size":604,"mtime":1612096648329,"results":"83","hashOfConfig":"81"},{"size":2158,"mtime":1612096648329,"results":"84","hashOfConfig":"81"},{"size":2050,"mtime":1612096648329,"results":"85","hashOfConfig":"81"},{"size":179,"mtime":1612096648329,"results":"86","hashOfConfig":"81"},{"size":101,"mtime":1612096648329,"results":"87","hashOfConfig":"81"},{"size":821,"mtime":1612096648329,"results":"88","hashOfConfig":"81"},{"size":484,"mtime":1612096648329,"results":"89","hashOfConfig":"81"},{"size":624,"mtime":1612096648329,"results":"90","hashOfConfig":"81"},{"size":297,"mtime":1612096648329,"results":"91","hashOfConfig":"81"},{"size":131,"mtime":1612096648329,"results":"92","hashOfConfig":"81"},{"size":2499,"mtime":1612096648337,"results":"93","hashOfConfig":"81"},{"size":1997,"mtime":1612096648329,"results":"94","hashOfConfig":"81"},{"size":3083,"mtime":1612096648329,"results":"95","hashOfConfig":"81"},{"size":1455,"mtime":1612096648329,"results":"96","hashOfConfig":"81"},{"size":3313,"mtime":1612254256220,"results":"97","hashOfConfig":"81"},{"size":4341,"mtime":1612096648329,"results":"98","hashOfConfig":"81"},{"size":621,"mtime":1612096648329,"results":"99","hashOfConfig":"81"},{"size":1778,"mtime":1612096648329,"results":"100","hashOfConfig":"81"},{"size":941,"mtime":1612096648329,"results":"101","hashOfConfig":"81"},{"size":755,"mtime":1612096648329,"results":"102","hashOfConfig":"81"},{"size":427,"mtime":1612096648329,"results":"103","hashOfConfig":"81"},{"size":1422,"mtime":1612096648329,"results":"104","hashOfConfig":"81"},{"size":2504,"mtime":1612217852008,"results":"105","hashOfConfig":"81"},{"size":889,"mtime":1612096648329,"results":"106","hashOfConfig":"81"},{"size":3913,"mtime":1612254256220,"results":"107","hashOfConfig":"81"},{"size":4616,"mtime":1612301639612,"results":"108","hashOfConfig":"81"},{"size":625,"mtime":1612096648329,"results":"109","hashOfConfig":"81"},{"size":5591,"mtime":1612254256220,"results":"110","hashOfConfig":"81"},{"size":3627,"mtime":1612254256220,"results":"111","hashOfConfig":"81"},{"size":4051,"mtime":1612254256220,"results":"112","hashOfConfig":"81"},{"size":2408,"mtime":1612096648337,"results":"113","hashOfConfig":"81"},{"size":4281,"mtime":1612096648329,"results":"114","hashOfConfig":"81"},{"size":4483,"mtime":1612254256220,"results":"115","hashOfConfig":"81"},{"size":3806,"mtime":1612096648337,"results":"116","hashOfConfig":"81"},{"size":2975,"mtime":1612096648329,"results":"117","hashOfConfig":"81"},{"size":8934,"mtime":1612096648329,"results":"118","hashOfConfig":"81"},{"size":10743,"mtime":1612096648329,"results":"119","hashOfConfig":"81"},{"size":10850,"mtime":1612096648329,"results":"120","hashOfConfig":"81"},{"size":105,"mtime":1612096648329,"results":"121","hashOfConfig":"81"},{"size":798,"mtime":1612096648329,"results":"122","hashOfConfig":"81"},{"size":105,"mtime":1612096648329,"results":"123","hashOfConfig":"81"},{"size":99,"mtime":1612096648329,"results":"124","hashOfConfig":"81"},{"size":715,"mtime":1612096648329,"results":"125","hashOfConfig":"81"},{"size":3428,"mtime":1612096648329,"results":"126","hashOfConfig":"81"},{"size":223,"mtime":1612096648329,"results":"127","hashOfConfig":"81"},{"size":410,"mtime":1612096648329,"results":"128","hashOfConfig":"81"},{"size":792,"mtime":1612096648329,"results":"129","hashOfConfig":"81"},{"size":188,"mtime":1612096648329,"results":"130","hashOfConfig":"81"},{"size":936,"mtime":1612096648329,"results":"131","hashOfConfig":"81"},{"size":187,"mtime":1612096648337,"results":"132","hashOfConfig":"81"},{"size":593,"mtime":1612096648329,"results":"133","hashOfConfig":"81"},{"size":347,"mtime":1612096648329,"results":"134","hashOfConfig":"81"},{"size":1311,"mtime":1612096648333,"results":"135","hashOfConfig":"81"},{"size":522,"mtime":1612096648333,"results":"136","hashOfConfig":"81"},{"size":872,"mtime":1612096648329,"results":"137","hashOfConfig":"81"},{"size":254,"mtime":1612096648329,"results":"138","hashOfConfig":"81"},{"size":971,"mtime":1612096648329,"results":"139","hashOfConfig":"81"},{"size":109,"mtime":1612096648337,"results":"140","hashOfConfig":"81"},{"size":1626,"mtime":1612096648337,"results":"141","hashOfConfig":"81"},{"size":2122,"mtime":1612096648329,"results":"142","hashOfConfig":"81"},{"size":442,"mtime":1612096648329,"results":"143","hashOfConfig":"81"},{"size":2524,"mtime":1612096648337,"results":"144","hashOfConfig":"81"},{"size":394,"mtime":1612096648329,"results":"145","hashOfConfig":"81"},{"size":394,"mtime":1612096648329,"results":"146","hashOfConfig":"81"},{"size":394,"mtime":1612096648329,"results":"147","hashOfConfig":"81"},{"size":74,"mtime":1612096648337,"results":"148","hashOfConfig":"81"},{"size":59,"mtime":1612096648337,"results":"149","hashOfConfig":"81"},{"size":87,"mtime":1612096648337,"results":"150","hashOfConfig":"81"},{"size":468,"mtime":1612096648337,"results":"151","hashOfConfig":"81"},{"size":378,"mtime":1612096648337,"results":"152","hashOfConfig":"81"},{"size":585,"mtime":1612096648329,"results":"153","hashOfConfig":"81"},{"size":459,"mtime":1612096648329,"results":"154","hashOfConfig":"81"},{"size":394,"mtime":1612096648329,"results":"155","hashOfConfig":"81"},{"size":117,"mtime":1612096648329,"results":"156","hashOfConfig":"81"},{"size":611,"mtime":1612096648329,"results":"157","hashOfConfig":"81"},{"size":225,"mtime":1612096648329,"results":"158","hashOfConfig":"81"},{"size":79,"mtime":1612096648337,"results":"159","hashOfConfig":"81"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"vugxfk",{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"162"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"162"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"162"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"162"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"162"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"162"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"162"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"162"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"162"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"162"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"162"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"162"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"162"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"162"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"162"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"162"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"162"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"162"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"162"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"162"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"162"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"162"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"162"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"162"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"162"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"344"},"/home/tomek/apps/stypendia/client/src/index.js",[],["345","346"],"/home/tomek/apps/stypendia/client/src/App.js",["347"],"import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport axios from 'axios';\n\nimport Layout from './components/commonLayout/Layout';\nimport 'semantic-ui-css/semantic.min.css';\nimport {\n  Register,\n  Home,\n  Login,\n  Verify,\n  Resend,\n  ResetSend,\n  Reset,\n  Logout,\n  ChangePass,\n  ProtectedRoute,\n  Submit,\n  Page404,\n  Profile,\n} from './pages';\nimport { AuthState, AlertState, AppState, SubmitState } from './context';\nimport { Alert } from './components';\n\n// axios.defaults.baseURL = 'http://localhost:5003';\n// axios.defaults.withCredentials = true;\n\nfunction App() {\n  return (\n    <AlertState>\n      <AppState>\n        <Router>\n          <AuthState>\n            <SubmitState>\n              <Layout>\n                <Switch>\n                  <Route exact path='/register' component={Register} />\n                  <Route exact path='/verify' component={Verify} />\n                  <Route exact path='/reset' component={Reset} />\n                  <Route exact path='/resetsend' component={ResetSend} />\n                  <Route exact path='/resend' component={Resend} />\n                  <ProtectedRoute\n                    exact\n                    path='/changepass'\n                    component={ChangePass}\n                  />\n                  <ProtectedRoute exact path='/' component={Home} />\n                  <Route exact path='/login' component={Login} />\n                  <ProtectedRoute exact path='/logout' component={Logout} />\n                  <ProtectedRoute exact path='/submit' component={Submit} />\n                  <ProtectedRoute exact path='/profile' component={Profile} />\n                  <Route path='*' component={Page404} />\n                </Switch>\n              </Layout>\n            </SubmitState>\n          </AuthState>\n\n          <Alert position={'bottom-right'} autoDeleteInterval={10000} />\n        </Router>\n      </AppState>\n    </AlertState>\n  );\n}\n\nexport default App;\n","/home/tomek/apps/stypendia/client/src/components/commonLayout/Layout.js",[],"/home/tomek/apps/stypendia/client/src/components/commonLayout/MainMenu.js",["348"],"import React, { useContext, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu } from 'semantic-ui-react';\nimport { Wrapper } from '../styles/mainMenu.styles';\nimport { leftMenuItems, rightMenuItems } from '../../parts/items';\nimport { AuthContext, SubmitContext } from '../../context';\n\nconst MainMenu = () => {\n  const submitContext = useContext(SubmitContext);\n  const { setSubmitMode } = submitContext;\n\n  const [activeItem, setActiveItem] = useState('home');\n  const [hasOwnSub, setHasOwnSub] = useState(false);\n\n  const authContext = useContext(AuthContext);\n  const { isLoggedIn, logOut } = authContext;\n\n  const handleClick = (name) => {\n    if (name === 'logout') {logOut()}\n    else if (name === 'submit') {setSubmitMode('new'); setActiveItem(name)}\n    else setActiveItem(name);\n  };\n\n  return (\n    <Wrapper>\n      <Menu icon='labeled' className='main'>\n        {leftMenuItems\n          .filter(\n            (item) =>\n              (item.noOwnSubDisplay === !hasOwnSub ||\n                item.hasOwnSubDisplay === hasOwnSub) &&\n              item.isLoggedInDisplay === isLoggedIn\n          )\n          .map((item) => (\n            <Link to={item.url} key={item.id}>\n              <Menu.Item\n                as='div'\n                icon={item.icon}\n                content={item.title}\n                name={item.name}\n                active={activeItem === item.name}\n                onClick={() => handleClick(item.name)}\n              />\n            </Link>\n          ))}\n\n        <Menu.Menu position='right' className='right'>\n          {rightMenuItems\n            .filter((item) => item.isLoggedInDisplay === isLoggedIn)\n            .map((item) => (\n              <Link to={item.url} key={item.id}>\n                <Menu.Item\n                  as='div'\n                  icon={item.icon}\n                  content={item.title}\n                  name={item.name}\n                  active={activeItem === item.name}\n                  onClick={() => handleClick(item.name)}\n                />\n              </Link>\n            ))}\n        </Menu.Menu>\n      </Menu>\n    </Wrapper>\n  );\n};\n\nexport default MainMenu;\n","/home/tomek/apps/stypendia/client/src/components/Timer.js",["349"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Icon, Label } from 'semantic-ui-react';\nimport { Wrapper } from './styles/timer.styles';\nimport { AuthContext } from '../context';\n\n\nconst Timer = () => {\n  const authContext = useContext(AuthContext);\n  const { isLoggedIn, logOut, user, timeLeft, setTimeLeft } = authContext;\n\n  const [color, setColor] = useState(null);\n  const [size, setSize] = useState('tiny');\n\n  const handleOnClick = () => {\n    setColor('');\n    setSize('tiny');\n    setTimeLeft(+process.env.REACT_APP_SESSION_TIMEOUT);\n  };\n\n  useEffect(() => {\n    timeLeft < +process.env.REACT_APP_SESSION_ALERT && setColor('red');\n    timeLeft < +process.env.REACT_APP_SESSION_ALERT && setSize('');\n    timeLeft > +process.env.REACT_APP_SESSION_ALERT && setColor('');\n    timeLeft > +process.env.REACT_APP_SESSION_ALERT && setSize('tiny');\n    timeLeft === 0 && logOut();\n    const timer =\n      timeLeft > 0 && setInterval(() => setTimeLeft(timeLeft - 1), 1000);\n    return () => clearInterval(timer);\n  }, [timeLeft]);\n\n  return isLoggedIn ? (\n    <Wrapper>\n      <Label className='timer' as='div' color={color} size={size} image>\n        <img\n          className='img'\n          src='https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'\n          alt='user'\n        />\n        {user?.firstName} {user?.lastName} ({user?.login})\n        {timeLeft < +process.env.REACT_APP_SESSION_ALERT && (\n          <Label.Detail>Niedługo nastąpi wylogowanie</Label.Detail>\n        )}\n        <Label.Detail>\n          Sesja{' '}\n          {timeLeft / 60 < 10\n            ? '0' + Math.floor(timeLeft / 60)\n            : Math.floor(timeLeft / 60)}\n          :{timeLeft % 60 < 10 ? '0' + (timeLeft % 60) : timeLeft % 60}\n        </Label.Detail>\n      </Label>\n      {timeLeft < +process.env.REACT_APP_SESSION_ALERT && (\n        <Button icon negative onClick={handleOnClick}>\n          <Icon name='refresh' /> Odśwież\n        </Button>\n      )}\n    </Wrapper>\n  ) : null;\n};\n\nexport default Timer;\n","/home/tomek/apps/stypendia/client/src/components/styles/layout.styles.js",[],"/home/tomek/apps/stypendia/client/src/context/auth/authContext.js",[],"/home/tomek/apps/stypendia/client/src/components/index.js",[],"/home/tomek/apps/stypendia/client/src/context/index.js",[],"/home/tomek/apps/stypendia/client/src/pages/index.js",[],"/home/tomek/apps/stypendia/client/src/components/styles/mainMenu.styles.js",[],"/home/tomek/apps/stypendia/client/src/components/styles/timer.styles.js",[],"/home/tomek/apps/stypendia/client/src/parts/items.js",[],"/home/tomek/apps/stypendia/client/src/components/AllUsersDrafts.js",["350"],"import React, { useContext, useEffect } from 'react';\n\nimport { Button, Card, Image, Label } from 'semantic-ui-react';\nimport NewCallToAction from './NewCallToAction';\nimport { AuthContext, AppContext } from '../context';\nimport useFetch from '../hooks/useFetch';\n\nconst AllUsersDrafts = () => {\n  const authContext = useContext(AuthContext);\n  const { resetTimeLeft } = authContext;\n\n  const appContext = useContext(AppContext);\n  const { isLoading } = appContext;\n\n  const { data } = useFetch('drafts/oneuser');\n\n  useEffect(() => {\n    resetTimeLeft();\n  }, []);\n\n  return !isLoading ? (\n    <>\n      <Card.Group itemsPerRow={5} stackable className='cards'>\n        {data.length > 0 ? (\n          data.map((s) => (\n            <Card key={s.id} className='card' raised>\n              <Card.Content textAlign='left'>\n                <Label\n                  className='label'\n                  // basic\n                  size='mini'\n                  content={'wersja robocza'}\n                  color='orange'\n                ></Label>\n                <Image\n                  floated='left'\n                  size='mini'\n                  src='https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'\n                />\n                <Card.Header>\n                  {s.pupilFirstName} {s.pupilLastName}\n                </Card.Header>\n                <Card.Meta>{s.schoolType}</Card.Meta>\n                <Card.Description>{s.schoolName}</Card.Description>\n              </Card.Content>\n              <Card.Content extra>\n                <div className='ui two buttons'>\n                  <Button color='orange'>Edytuj</Button>\n                  <Button basic color='red'>\n                    Usuń\n                  </Button>\n                </div>\n              </Card.Content>\n            </Card>\n          ))\n        ) : (\n          <NewCallToAction />\n        )}\n      </Card.Group>\n    </>\n  ) : (\n    <h2>Pobieramy dane...</h2>\n  );\n};\n\nexport default AllUsersDrafts;\n","/home/tomek/apps/stypendia/client/src/components/AllUsersSubmits.js",["351"],"import React, { useContext, useEffect } from 'react';\nimport { SubmitContext, AuthContext, AppContext } from '../context';\nimport { Link } from 'react-router-dom';\nimport { Button, Card, Icon, Image, Label } from 'semantic-ui-react';\nimport NewCallToAction from './NewCallToAction';\nimport useFetch from '../hooks/useFetch';\nimport { fetchPdf } from '../services';\n\nconst AllUsersSubmits = () => {\n  const authContext = useContext(AuthContext);\n  const { resetTimeLeft } = authContext;\n\n  const appContext = useContext(AppContext);\n  const { isLoading } = appContext;\n\n  const submitContext = useContext(SubmitContext);\n  const {\n    setSubmitUuid,\n    setSubmitMode,\n    setCurSubmit,\n    setSubmitToWatch,\n  } = submitContext;\n\n  const { data } = useFetch('submits/usersubmits');\n\n  const handleOnClick = (uuid, mode) => {\n    setSubmitMode(mode);\n    setSubmitUuid(uuid);\n\n    if (mode === 'edit') {\n      setCurSubmit(uuid);\n    } else if (mode === 'watch') {\n      setSubmitToWatch(uuid);\n    }\n  };\n\n  useEffect(() => {\n    resetTimeLeft();\n  }, [data]);\n\n  return !isLoading ? (\n    <>\n      <Card.Group itemsPerRow={5} stackable className='cards'>\n        {data.length > 0 ? (\n          data.map((s) => (\n            <Card key={s.id} className='card' raised>\n              <Card.Content className='relative' textAlign='left'>\n                <Label\n                  className='label'\n                  // basic\n                  size='mini'\n                  color='grey'\n                  content={'oczekuje na decyzje'}\n                ></Label>\n                <Image\n                  floated='left'\n                  size='mini'\n                  src='https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'\n                />\n\n                <Card.Header>\n                  {s.pupilFirstName} {s.pupilLastName}\n                </Card.Header>\n                <Card.Meta>{s.schoolType}</Card.Meta>\n                <Card.Description>Nuner wniosku: {s.numer}</Card.Description>\n              </Card.Content>\n              <Card.Content extra>\n                <div className='ui three buttons'>\n                  <Link to='/submit'>\n                    <Button\n                      color='green'\n                      onClick={() => handleOnClick(s.uuid, 'watch')}\n                    >\n                      Zobacz\n                    </Button>\n                    <Button\n                      primary\n                      onClick={() => handleOnClick(s.uuid, 'edit')}\n                    >\n                      Popraw\n                    </Button>\n                  </Link>\n                  <Button basic color='blue' onClick={() => fetchPdf(s.numer)}>\n                    <Icon name='download' />\n                    <strong> PDF</strong>\n                  </Button>\n                </div>\n              </Card.Content>\n            </Card>\n          ))\n        ) : (\n          <>\n            <NewCallToAction />\n          </>\n        )}\n      </Card.Group>\n    </>\n  ) : (\n    <h2>Pobieramy dane...</h2>\n  );\n};\n\nexport default AllUsersSubmits;\n","/home/tomek/apps/stypendia/client/src/components/NewCallToAction.js",["352"],"import React, { useContext, useEffect} from 'react';\nimport {Link} from 'react-router-dom'\nimport {SubmitContext, AuthContext} from '../context';\nimport { Button, Card, Icon, } from 'semantic-ui-react';\n\nconst NewCallToAction = () => {\n    const authContext = useContext(AuthContext);\n    const { resetTimeLeft } = authContext;\n\n    const submitContext = useContext(SubmitContext);\n    const {setSubmitUuid, setSubmitMode } = submitContext;\n\n\n  const handleOnClick = (mode) => {\n    setSubmitMode(mode);\n    setSubmitUuid(null)\n\n  };\n\n\n\n  useEffect(() => {\n    resetTimeLeft()\n  }, []);\n\n  return (\n    <>\n      <Link to='/submit'>\n        <Card.Group\n          itemsPerRow={5}\n          stackable\n          centered\n          className='cards'\n          onClick={() => handleOnClick('new')}\n        >\n\n                <Card  className='card' raised>\n                  <Card.Content textAlign='center'>\n                    <Icon name='plus' size='big' color='black' />\n                    <Icon name='pencil' size='huge' color='black' />\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button primary size='large' icon labelPosition='right'>\n                      Złóż nowy wniosek\n                      <Icon name='right arrow' />\n                    </Button>\n                  </Card.Content>\n                </Card>\n\n        </Card.Group>\n      </Link>\n    </>\n  );\n};\n\nexport default NewCallToAction;\n","/home/tomek/apps/stypendia/client/src/components/Nav.js",["353","354"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport axios from 'axios';\n\nimport { useHistory } from 'react-router-dom';\nimport {\n  AlertContext,\n  AppContext,\n  AuthContext,\n  SubmitContext,\n} from '../context';\nimport { Wrapper } from './styles/nav.styles';\n\nconst Nav = ({ activeItem, setActiveItem, ...props }) => {\n  let history = useHistory();\n\n  const authContext = useContext(AuthContext);\n  const { resetTimeLeft } = authContext;\n\n  const submitContext = useContext(SubmitContext);\n  const { newSubmit, submitMode, curSubmit, setSubmitErrors } = submitContext;\n\n  const appContext = useContext(AppContext);\n  const { setIsLoading, isLoading } = appContext;\n\n  const alertContext = useContext(AlertContext);\n  const { addAlert } = alertContext;\n\n  // const [errors, setErrors] = useState('');\n\n  const addNewSubmit = async (submit) => {\n    setIsLoading(true);\n     setSubmitErrors('');\n    // const csrfData = await axios.get('/api/v1/csrf');\n    const newSubmit = { ...submit\n      // , _csrf: csrfData.data.csrfToken\n    };\n    axios\n      .post('/api/v1/submits', newSubmit)\n      .then((data) => {\n        if (data.data.resStatus || data.data.resStatus === 'success') {\n          addAlert(data.data);\n        }\n        setIsLoading(false);\n        history.push('/');\n      })\n      .catch((err) => {\n        if (err.response) {\n          console.log(err.response.data);\n          setSubmitErrors(err.response?.data);\n          setIsLoading(false);\n          return;\n        }\n      });\n  };\n\n  const updateSubmit = async (submit) => {\n    setIsLoading(true);\n    setSubmitErrors('');\n    // const csrfData = await axios.get('/api/v1/csrf');\n    const newSubmit = { ...submit\n      // , _csrf: csrfData.data.csrfToken\n     };\n    axios\n      .put('/api/v1/submits', newSubmit)\n      .then((data) => {\n        if (data.data.resStatus || data.data.resStatus === 'success') {\n          addAlert(data.data);\n          setIsLoading(false);\n          history.push('/');\n        }\n      })\n      .catch((err) => {\n        if (err.response) {\n          console.log(err.response.data);\n          setSubmitErrors(err.response?.data);\n          setIsLoading(false);\n\n          return;\n        }\n      });\n  };\n\n  useEffect(() => {\n    resetTimeLeft();\n  }, []);\n\n  return (\n    <Wrapper mode={submitMode}>\n      <Button.Group size='medium'>\n        <Button\n          onClick={() => setActiveItem(activeItem - 1)}\n          className='nav-button'\n          labelPosition='left'\n          icon='left chevron'\n          content='Wróć'\n        />\n        <Button\n          className='nav-button save'\n          onClick={() => updateSubmit(curSubmit)}\n          primary\n          loading={isLoading}\n          icon='save'\n          content='Zapisz'\n        />\n\n        <Button\n          className='nav-button submit'\n          positive\n          loading={isLoading}\n          onClick={() => addNewSubmit(newSubmit)}\n          icon='thumbs up'\n          content='Złóż'\n        />\n        <Button\n          onClick={() => setActiveItem(activeItem + 1)}\n          className='nav-button'\n          labelPosition='right'\n          icon='right chevron'\n          content='Dalej'\n        />\n      </Button.Group>\n    </Wrapper>\n  );\n};\n\nexport default Nav;\n","/home/tomek/apps/stypendia/client/src/components/Rodo.js",[],"/home/tomek/apps/stypendia/client/src/components/subALayout.js",["355","356"],"import React from 'react';\nimport {\n  Container,\n  Grid,\n  Header,\n  Label,\n  Segment,\n} from 'semantic-ui-react';\n\nimport Title from './Title';\n\nconst SubALayout = ({ children, leadHeader }) => {\n  return (\n    <>\n      <Container>\n        <Title content='Nowy wniosek' />\n\n          <Segment placeholder size='large'>\n\n            <Grid\n              className='container'\n              centered\n              columns={2}\n              relaxed='very'\n              stackable\n            >\n              {children}\n            </Grid>\n          </Segment>\n\n      </Container>\n    </>\n  );\n};\n\nexport default SubALayout;\n","/home/tomek/apps/stypendia/client/src/components/Errors.js",[],"/home/tomek/apps/stypendia/client/src/components/ConfirmModal.js",["357","358"],"import axios from 'axios';\nimport { useEffect } from 'react';\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\n\nconst ConfirmModal = ({\n  openConfirm,\n  setOpenConfirm,\n  title,\n  content,\n  greenButton,\n  redButton,\n  redAction,\n  greenAction,\n}) => {\n  const handleConfirm = () => {\n    axios.delete('/');\n  };\n\n  return (\n    <Modal\n      closeIcon\n      open={openConfirm}\n      onClose={() => setOpenConfirm(false)}\n      onOpen={() => setOpenConfirm(true)}\n    >\n      <Header icon='remove' content={title} />\n      <Modal.Content>\n        <p>{content}</p>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button color='green' onClick={greenAction}>\n          <Icon name='checkmark' /> {greenButton}\n        </Button>\n        <Button color='red' onClick={redAction}>\n          <Icon name='remove' />\n          {redButton}\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default ConfirmModal;\n","/home/tomek/apps/stypendia/client/src/components/Title.js",[],"/home/tomek/apps/stypendia/client/src/pages/404.js",[],"/home/tomek/apps/stypendia/client/src/pages/home.js",[],"/home/tomek/apps/stypendia/client/src/context/auth/AuthState.js",["359"],"import React, { useContext, useEffect, useReducer } from 'react';\nimport authReducer from './authReducer';\nimport AuthContext from './authContext';\nimport axios from 'axios';\nimport AlertContext from '../../context/alert/alertContext';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  SET_USER,\n  CHECK_IS_LOGGED_IN,\n  LOGOUT_USER,\n  RESET_TIME_LEFT,\n  SET_TIME,\n} from '../types';\n\nconst AuthState = ({ children }) => {\n  const history = useHistory();\n\n  const alertContext = useContext(AlertContext);\n  const { addAlert } = alertContext;\n\n  const initialState = {\n    user: null,\n    timeLeft: +process.env.REACT_APP_SESSION_TIMEOUT,\n    isLoggedIn: false,\n  };\n\n  const checkIsAuthenticated = async () => {\n    const result = await (\n      await fetch('api/v1/users/me', {\n        method: 'GET',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n    ).json();\n    result.resStatus === 'success' ? setIsLoggedIn(true) : setIsLoggedIn(false);\n\n    setUser(result.user);\n  };\n\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  const setUser = (user) => {\n    dispatch({\n      type: SET_USER,\n      payload: user,\n    });\n  };\n\n  const setIsLoggedIn = (is) => {\n    dispatch({\n      type: CHECK_IS_LOGGED_IN,\n      payload: is,\n    });\n  };\n\n  const resetTimeLeft = () => {\n    dispatch({\n      type: RESET_TIME_LEFT,\n    });\n  };\n\n  const setTimeLeft = (time) => {\n    dispatch({\n      type: SET_TIME,\n      payload: time,\n    });\n  };\n\n  const logOut = () => {\n    axios\n      .get('/api/v1/users/logout')\n      .then(async (data) => {\n        if (data.data.resStatus || data.data.resStatus === 'success') {\n          addAlert(data.data);\n          history.push('/login');\n        }\n\n        dispatch({\n          type: LOGOUT_USER,\n        });\n      })\n      .catch(\n        (err) => console.log(err.message)\n        //   if (err.response.data.alertTitle) {\n        //     console.log(err.response.data);\n\n        //     addAlert(err.response.data);\n        //   }\n        // });\n      );\n  };\n\n  useEffect(() => {\n    checkIsAuthenticated();\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: state.user,\n        setUser,\n        logOut,\n        checkIsAuthenticated,\n        isLoggedIn: state.isLoggedIn,\n        timeLeft: state.timeLeft,\n        resetTimeLeft,\n        setTimeLeft,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthState;\n","/home/tomek/apps/stypendia/client/src/pages/logout.js",[],"/home/tomek/apps/stypendia/client/src/pages/changePass.js",["360"],"import React, { useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport {\n  Button,\n  Container,\n  Form,\n  Grid,\n  Label,\n  Message,\n  Segment,\n} from 'semantic-ui-react';\nimport { Wrapper } from './styles/changePass.styles';\nimport Title from '../components/Title';\nimport {AlertContext,AppContext,AuthContext} from '../context';\nimport { changePassInputs } from '../parts/inputs';\n\nconst ChangePass = ({ history }) => {\n    const authContext = useContext(AuthContext);\n    const { resetTimeLeft } = authContext;\n\n  const alertContext = useContext(AlertContext);\n  const { addAlert } = alertContext;\n\n  const appContext = useContext(AppContext);\n  const { setIsLoading, isLoading } = appContext;\n\n  const [body, setBody] = useState({});\n  const [errors, setErrors] = useState('');\n\n  const handleOnClick = async (e) => {\n    e.preventDefault();\n    // const csrfData = await axios.get('/api/v1/csrf');\n    setIsLoading(true);\n    // const newBody = { ...body, _csrf: csrfData.data.csrfToken };\n\n\n    axios\n      .post(`/api/v1/changepass`, body)\n      .then(async (data) => {\n        if (data.data.resStatus || data.data.resStatus === 'success') {\n          addAlert(data.data);\n          await setIsLoading(false);\n          history.push('/');\n        }\n      })\n      .catch((err) => {\n        if (err.response.data.alertTitle) {\n          setIsLoading(false);\n          addAlert(err.response.data);\n        }\n\n        setErrors(err.response.data);\n        setIsLoading(false);\n      });\n  };\n  const handleOnChange = (e) => {\n    e.preventDefault();\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\n  };\n\n    useEffect(() => {\n      resetTimeLeft();\n    }, []);\n\n\n  return (\n    <Container>\n      <Wrapper>\n        <Title content='Zmiana hasła' />\n        <Segment placeholder className='main' size='large'>\n          <Message className='msg' info size='small' floating>\n            <Message.Header>Zmiana hasła</Message.Header>\n            <p>\n              Strona służy do zmiany hasła. Podaj obowiązujące i nowe hasło i\n              zapisz zmiany. Pamiętaj, aby nowe hasło posiadało co najmniej 1\n              wielką literę, 1 małą oraz 1 cyfrę.\n            </p>\n          </Message>\n          <Grid columns={1} relaxed='very' stackable>\n            <Grid.Column>\n              <Form>\n                <input type='hidden' name='_csrf' value=''></input>\n                {changePassInputs.map((input) => {\n                  return (\n                    <div key={input.id}>\n                      <Form.Input\n                        onChange={(e) => handleOnChange(e)}\n                        required\n                        className='input'\n                        icon={input.icon}\n                        iconPosition='left'\n                        label={input.label}\n                        placeholder={input.placeholder}\n                        type={input.type}\n                        name={input.name}\n                      />\n\n                      {errors && errors[input.name] && (\n                        <Label\n                          basic\n                          color='red'\n                          pointing='above'\n                          key={input.id}\n                          className='small'\n                        >\n                          {errors[input.name]}\n                        </Label>\n                      )}\n                    </div>\n                  );\n                })}\n                <Button\n                  loading={isLoading}\n                  type='submit'\n                  content='Zmień hasło'\n                  primary\n                  size='large'\n                  onClick={handleOnClick}\n                />\n              </Form>\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default ChangePass;\n","/home/tomek/apps/stypendia/client/src/pages/login.js",["361","362"],"import React, { useContext, useEffect, useState } from 'react';\n\nimport { Link, useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport {\n  Button,\n  Container,\n  Divider,\n  Form,\n  Grid,\n  Label,\n  Segment,\n} from 'semantic-ui-react';\nimport { Wrapper } from './styles/login.styles';\nimport {Title} from '../components';\nimport {AlertContext, AppContext,AuthContext} from '../context';\nimport { loginInputs } from '../parts/inputs';\n\nconst Login = () => {\n  const history = useHistory()\n  const alertContext = useContext(AlertContext);\n  const { addAlert } = alertContext;\n\n  const appContext = useContext(AppContext);\n  const { setIsLoading, isLoading, saveRollbar } = appContext;\n\n  const authContext = useContext(AuthContext);\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\n\n  const [body, setBody] = useState({});\n  const [errors, setErrors] = useState('');\n\n  useEffect(() => {\n    checkIsAuthenticated();\n    isLoggedIn && history.push('/');\n  }, [isLoggedIn]);\n\n  const handleOnClick = async (e) => {\n    e.preventDefault();\n\n    setIsLoading(true);\n    const csrfData = await axios.get('/api/v1/csrf');\n    const newBody = { ...body, _csrf: csrfData.data.csrfToken };\n\n    axios\n      .post(`/api/v1/users/login`, newBody)\n      .then(async (data) => {\n        if (data.data.resStatus || data.data.resStatus === 'success') {\n          addAlert(data.data);\n          setIsLoading(false);\n          // saveRollbar(data.data);\n          history.push('/');\n        }\n      })\n      .catch((err) => {\n        // saveRollbar({ err: err.response.data.message, page: 'login' });\n        if (err.response?.data?.forcePassChange) {\n          addAlert(err.response.data);\n          setIsLoading(false);\n          history.push(\n            `/reset?id=${err.response.data.resetId}&token=${err.response.data.token}`\n          );\n\n          return;\n        }\n\n        if (err.response?.data?.alertTitle) {\n          setIsLoading(false);\n          addAlert(err.response.data);\n        }\n\n        setErrors(err.response?.data);\n        setIsLoading(false);\n      });\n  };\n\n  const handleOnChange = (e) => {\n    e.preventDefault();\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\n  };\n\n  return (\n    <Wrapper>\n      <Container>\n        <Title content='Logowanie' />\n        <Segment placeholder className='main' size='large'>\n          <Grid columns={2} relaxed='very' stackable>\n            <Grid.Column>\n              <Form>\n                <input type='hidden' name='_csrf' value='_csrf'></input>\n                {loginInputs.map((input) => {\n                  return (\n                    <div key={input.id}>\n                      <Form.Input\n                        onChange={(e) => handleOnChange(e)}\n                        required\n                        className='input'\n                        icon={input.icon}\n                        iconPosition='left'\n                        label={input.label}\n                        placeholder={input.placeholder}\n                        type={input.type}\n                        name={input.name}\n                      />\n\n                      {errors && errors[input.name] && (\n                        <Label\n                          basic\n                          color='red'\n                          pointing='above'\n                          key={input.id}\n                          className='small'\n                        >\n                          {errors[input.name]}\n                        </Label>\n                      )}\n                    </div>\n                  );\n                })}\n                <span>{}</span>\n                <Button\n                  loading={isLoading}\n                  type='submit'\n                  content='Zaloguj się !'\n                  primary\n                  size='large'\n                  onClick={handleOnClick}\n                />\n              </Form>\n              <Link to='/resetsend'>\n                <div className='buttonWrapper'>\n                  <div className='span'>Zapomniałeś hasła?</div>\n                  <Button content='Resetuj hasło' icon='recycle' size='mini' />\n                </div>\n              </Link>\n            </Grid.Column>\n\n            <Grid.Column verticalAlign='middle'>\n              <Link to='/register'>\n                <Button content='Zarejestruj się' icon='user plus' size='big' />\n              </Link>\n            </Grid.Column>\n          </Grid>\n\n          <Divider className='divider' content='lub' vertical />\n        </Segment>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default Login;\n","/home/tomek/apps/stypendia/client/src/pages/protectedRoute.js",[],"/home/tomek/apps/stypendia/client/src/pages/register.js",["363"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Divider,\n  Form,\n  Grid,\n  Header,\n  Label,\n  Segment,\n} from 'semantic-ui-react';\nimport { Wrapper } from './styles/register.styles';\nimport {Rodo,Title}  from '../components';\nimport { registerInputs } from '../parts/inputs';\nimport {AlertContext, AppContext,AuthContext } from '../context';\n\nconst Register = (props) => {\n  const alertContext = useContext(AlertContext);\n  const { addAlert } = alertContext;\n\n  const appContext = useContext(AppContext);\n  const { setIsLoading, isLoading } = appContext;\n\n  const authContext = useContext(AuthContext);\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\n  isLoggedIn && props.history.push('/');\n\n  const [body, setBody] = useState({});\n  const [errors, setErrors] = useState('');\n  const [isRodoChecked, setIsRodoChecked] = useState(false);\n  const [isRegulationsChecked, setIsRegulationsChecked] = useState(false);\n\n  useEffect(() => {\n    checkIsAuthenticated();\n  }, []);\n\n  const handleOnClick = async (e) => {\n    setErrors('');\n    e.preventDefault();\n    // const csrfData = await axios.get('/api/v1/csrf');\n    setIsLoading(true);\n    // const newBody = { ...body, _csrf: csrfData.data.csrfToken };\n\n    axios\n      .post(`/api/v1/users`, body)\n      .then((data) => {\n        console.log(data.data);\n        if (data.data.resStatus || data.data.resStatus === 'success') {\n          setIsLoading(false);\n          setTimeout(() => props.history.push('/login'), 1500);\n          addAlert(data.data);\n        }\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        setErrors(err.response.data);\n        addAlert(err.response.data);\n      });\n  };\n\n  const handleOnChange = (e) => {\n    e.preventDefault();\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\n  };\n\n  return (\n    <Wrapper>\n      <div className='main'>\n        <Title content='Dodawanie konta' />\n        <Segment placeholder size='large'>\n          <Grid columns={2} relaxed='very' stackable>\n            <Grid.Column textAlign='left' verticalAlign='middle'>\n              <Header textAlign='center'>\n                Potwierdź niezbędne oświadczenia\n              </Header>\n\n              <Checkbox\n                onChange={() => setIsRegulationsChecked(!isRegulationsChecked)}\n                // value={isRegulationsChecked}\n                checked={isRegulationsChecked}\n                label={\n                  <label>\n                    Oświadczam, iż zapoznałam/em się z regulaminem i akceptuję\n                    jego postanowienia <span>*</span>\n                  </label>\n                }\n              />\n\n              <Rodo />\n\n              <Checkbox\n                onChange={() => setIsRodoChecked(!isRodoChecked)}\n                // value={isRodoChecked}\n                checked={isRodoChecked}\n                className='checkBox'\n                required\n                label={\n                  <label>\n                    Oświadczam, iż zapoznałam/em się z powyższą informacją.\n                    <span> *</span>\n                  </label>\n                }\n              />\n            </Grid.Column>\n            <Grid.Column>\n              <Container>\n                <Header>... podaj swoje dane</Header>\n                <Form>\n                  <input type='hidden' name='_csrf' value='_csrf'></input>\n                  {registerInputs.map((input) => {\n                    return (\n                      <div key={input.id}>\n                        <Form.Input\n                          loading={isLoading}\n                          onChange={(e) => handleOnChange(e)}\n                          required\n                          className='input'\n                          icon={input.icon}\n                          iconPosition='left'\n                          label={input.label}\n                          placeholder={input.placeholder}\n                          type={input.type}\n                          name={input.name}\n                        />\n                        {errors && errors[input.name] && (\n                          <Label\n                            basic\n                            color='red'\n                            pointing='above'\n                            key={input.id}\n                            className='small'\n                          >\n                            {errors[input.name]}\n                          </Label>\n                        )}\n                      </div>\n                    );\n                  })}\n                  <Button\n                    loading={isLoading}\n                    type='submit'\n                    content='Zarejestruj się'\n                    primary\n                    size='large'\n                    onClick={handleOnClick}\n                    disabled={\n                      !isRegulationsChecked || !isRodoChecked ? true : false\n                    }\n                  />\n                </Form>\n                <Link to='/login'>\n                  <div className='buttonWrapper'>\n                    <div className='span'>Masz już konto?</div>\n                    <Button content='Zaloguj się' icon='user' size='mini' />\n                  </div>\n                </Link>\n              </Container>\n            </Grid.Column>\n          </Grid>\n\n          <Divider className='divider' content='Oraz'vertical/>\n        </Segment>\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default Register;\n","/home/tomek/apps/stypendia/client/src/pages/resend.js",["364"],"import React, { useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport {\n  Button,\n  Container,\n  Form,\n  Grid,\n  Label,\n  Message,\n  Segment,\n} from 'semantic-ui-react';\n\nimport { Wrapper } from './styles/resend.styles';\nimport {Title} from '../components';\nimport {AlertContext, AuthContext,AppContext} from '../context';\n\nconst Resend = ({ history }) => {\n  const alertContext = useContext(AlertContext);\n  const { addAlert } = alertContext;\n\n  const appContext = useContext(AppContext);\n  const { setIsLoading, isLoading } = appContext;\n\n  const authContext = useContext(AuthContext);\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\n\n  const [email, setEmail] = useState({});\n  const [errors, setErrors] = useState('');\n\n  useEffect(() => {\n    checkIsAuthenticated();\n    isLoggedIn && history.push('/');\n  }, [isLoggedIn]);\n\n  const handleOnClick = async (e) => {\n    setErrors('');\n    e.preventDefault();\n    setIsLoading(true);\n    // const csrfData = await axios.get('/api/v1/csrf');\n    // const newBody = { email, _csrf: csrfData.data.csrfToken };\n    axios\n      .post(`/api/v1/email/resend`, {email})\n      .then(async (data) => {\n        if (data.data.resStatus || data.data.resStatus === 'success') {\n          addAlert(data.data);\n          setUser(data.data.user);\n          await setIsLoading(false);\n          history.push('/');\n        }\n      })\n      .catch((err) => {\n        if (err.response.data.alertTitle) {\n          setIsLoading(false);\n          addAlert(err.response.data);\n        }\n\n        setErrors(err.response.data);\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <Wrapper>\n      <Container>\n        <Title content='Potwierdzanie konta' />\n        <Segment placeholder className='main' size='large'>\n          <Message className='msg' info size='small' floating>\n            <Message.Header>\n              Ponowne wysłanie linka do potwierdzenia konta\n            </Message.Header>\n            <p>\n              Strona służy do ponownego wysłania linka potwierdzającego konto,\n              jeżeli konto już założyłaś/eś, ale nie skorzystałaś/eś z niego w\n              odpowiednim czasie. Link zostanie przesłany na podany adres email\n              i będzie ważny przez <strong>12 godzin</strong> . Jeżeli nie\n              znajdziesz linka sprawdź folder <strong> spam</strong> w Twojej\n              poczcie.\n            </p>\n          </Message>\n          <Grid columns={1} relaxed='very' stackable>\n            <Grid.Column>\n              <Form>\n                <input type='hidden' name='_csrf' value=''></input>\n                <Form.Input\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  className='input'\n                  icon='mail'\n                  iconPosition='left'\n                  label='Email'\n                  placeholder='Podaj email'\n                  type='email'\n                  name='email'\n                />\n\n                {errors && errors.email && (\n                  <Label basic color='red' pointing='above' className='small'>\n                    {errors.email}\n                  </Label>\n                )}\n\n                <Button\n                  loading={isLoading}\n                  type='submit'\n                  content='Wyślij link'\n                  primary\n                  size='large'\n                  onClick={handleOnClick}\n                />\n              </Form>\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default Resend;\n","/home/tomek/apps/stypendia/client/src/pages/reset.js",["365"],"import React, { useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport {\n  Button,\n  Container,\n  Form,\n  Grid,\n  Label,\n  Message,\n  Segment,\n} from 'semantic-ui-react';\nimport {Wrapper} from './styles/reset.styles'\nimport {Title} from '../components';\nimport {AlertContext,AuthContext , AppContext}from '../context';\nimport { resetInputs } from '../parts/inputs';\n\nconst Reset = ({ location, history }) => {\n  const alertContext = useContext(AlertContext);\n  const { addAlert } = alertContext;\n\n    const appContext = useContext(AppContext);\n    const { setIsLoading, isLoading } = appContext;\n\n  const authContext = useContext(AuthContext);\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\n\n  const [body, setBody] = useState({});\n  const [errors, setErrors] = useState('');\n\n\n  useEffect(() => {\n    checkIsAuthenticated();\n    isLoggedIn && history.push('/');\n  }, [isLoggedIn]);\n\n  const handleOnClick = async (e) => {\n    setIsLoading(true);\n    setErrors('');\n    e.preventDefault();\n    // const csrfData = await axios.get('/api/v1/csrf');\n    // const newBody = { ...body, _csrf: csrfData.data.csrfToken };\n\n    axios\n      .post(`/api/v1/password/reset${location.search}`, body)\n      .then(async (data) => {\n        if (data.data.resStatus || data.data.resStatus === 'success') {\n          addAlert(data.data);\n          setUser(data.data.user);\n          await setIsLoading(false);\n          history.push('/login');\n        }\n      })\n      .catch((err) => {\n   \n        if (err.response.data.alertTitle) {\n          setIsLoading(false);\n          addAlert(err.response.data);\n        }\n\n        setErrors(err.response.data);\n        setIsLoading(false);\n      });\n  };\n  const handleOnChange = (e) => {\n    e.preventDefault();\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\n  };\n\n  return (\n    <Wrapper>\n      <Container>\n        <Title content='Nowe hasło' />\n        <Segment placeholder className='main' size='large'>\n          <Message className='msg' info size='small' floating>\n            <Message.Header>Nowe hasło</Message.Header>\n            <p>\n              Strona służy do nadawania nowego hasła. Podaj niezbędne dane i\n              zapisz zmiany. Pamiętaj, aby nowe hasło posiadało co najmniej 1\n              wielką literę, 1 małą oraz 1 cyfrę.\n            </p>\n          </Message>\n          <Grid columns={1} relaxed='very' stackable>\n            <Grid.Column>\n              <Form>\n                <input type='hidden' name='_csrf' value=''></input>\n                {resetInputs.map((input) => {\n                  return (\n                    <div key={input.id}>\n                      <Form.Input\n                        onChange={(e) => handleOnChange(e)}\n                        required\n                        className='input'\n                        icon={input.icon}\n                        iconPosition='left'\n                        label={input.label}\n                        placeholder={input.placeholder}\n                        type={input.type}\n                        name={input.name}\n                      />\n\n                      {errors && errors[input.name] && (\n                        <Label\n                          basic\n                          color='red'\n                          pointing='above'\n                          key={input.id}\n                          className='small'\n                        >\n                          {errors[input.name]}\n                        </Label>\n                      )}\n                    </div>\n                  );\n                })}\n                <Button\n                  loading={isLoading}\n                  type='submit'\n                  content='Zapisz nowe hasło'\n                  primary\n                  size='large'\n                  onClick={handleOnClick}\n                />\n              </Form>\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      </Container>\n    </Wrapper>\n  );\n};\n\n\nexport default Reset;\n","/home/tomek/apps/stypendia/client/src/pages/submit.js",["366","367","368","369","370"],"import React, { useContext, useState } from 'react';\nimport { Grid, Menu } from 'semantic-ui-react';\n\nimport { SubA_I_II, SubA_III_IV, Attachments, Nav, Errors } from '../components';\nimport { Wrapper } from './styles/submit.styles';\nimport { SubmitContext } from '../context';\n\nconst Submit = () => {\n  const submitContext = useContext(SubmitContext);\n  const { submitMode } = submitContext;\n\n  const [activeItem, setActiveItem] = useState(1);\n\n  const renderComponent = () => {\n    if (activeItem > 5) setActiveItem(1);\n    if (activeItem < 1) setActiveItem(1);\n    switch (activeItem) {\n      case 1:\n        return <SubA_I_II />;\n      case 2:\n        return <SubA_III_IV />;\n      case 3:\n        return <Attachments />;\n      case 4:\n        return <SubA_III_IV />;\n      case 5:\n        return <SubA_III_IV />;\n\n      default:\n        return <SubA_I_II />;\n    }\n  };\n\n  return (\n    <Wrapper submitMode={submitMode}>\n      <Errors/>\n      <Grid>\n        <Grid.Column width={4}>\n          <Menu fluid vertical tabular className='menu' >\n            <Menu.Item\n              icon='student'\n              name='Dane ucznia'\n              active={activeItem === 1}\n              onClick={() => setActiveItem(1)}\n            />\n            <Menu.Item\n              icon='university'\n              name='dane szkoły'\n              content='Dane szkoły'\n              active={activeItem === 2}\n              onClick={() => setActiveItem(2)}\n            />\n            <Menu.Item\n              icon='attach'\n              name='dane szkoły'\n              content='Załączniki'\n              active={activeItem === 3}\n              onClick={() => setActiveItem(3)}\n            />\n            <Menu.Item\n              icon='university'\n              name='dane szkoły'\n              content='Dane szkoły'\n              active={activeItem === 4}\n              onClick={() => setActiveItem(4)}\n            />\n            <Menu.Item\n              icon='university'\n              name='dane szkoły'\n              content='Dane szkoły'\n              active={activeItem === 5}\n              onClick={() => setActiveItem(5)}\n            />\n          </Menu>\n        </Grid.Column>\n\n        <Grid.Column stretched width={12}>\n          {renderComponent()}\n        <Nav activeItem={activeItem} setActiveItem={setActiveItem} />\n        </Grid.Column>\n      </Grid>\n    </Wrapper>\n  );\n};\n\nexport default Submit;\n","/home/tomek/apps/stypendia/client/src/pages/resetSend.js",["371"],"import React, { useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport {\n  Button,\n  Container,\n  Form,\n  Grid,\n  Label,\n  Message,\n  Segment,\n} from 'semantic-ui-react';\nimport {Wrapper} from './styles/resetSend.styles'\nimport {Title} from '../components';\nimport {AlertContext,AuthContext ,AppContext} from '../context';\nimport { resetReqInputs } from '../parts/inputs';\n\nconst ResetSend = ({ history }) => {\n\n  const appContext = useContext(AppContext);\n  const { setIsLoading, isLoading } = appContext;\n\n\n  const alertContext = useContext(AlertContext);\n  const { addAlert } = alertContext;\n\n  const authContext = useContext(AuthContext);\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\n\n  const [body, setBody] = useState({});\n  const [errors, setErrors] = useState('');\n\n  useEffect(() => {\n    checkIsAuthenticated();\n    isLoggedIn && history.push('/');\n  }, [isLoggedIn]);\n\n  const handleOnClick = async (e) => {\n    setIsLoading(true);\n    setErrors('');\n    e.preventDefault();\n\n    const csrfData = await axios.get('/api/v1/csrf');\n    const newBody = { ...body, _csrf: csrfData.data.csrfToken };\n\n    axios\n      .post(`/api/v1/password/email`, newBody)\n      .then(async (data) => {\n        if (data.data.resStatus || data.data.resStatus === 'success') {\n          addAlert(data.data);\n          setUser(data.data.user);\n          await setIsLoading(false);\n          history.push('/login');\n        }\n      })\n      .catch((err) => {\n \n        if (err.response.data.alertTitle) {\n          setIsLoading(false);\n          addAlert(err.response.data);\n        }\n\n        setErrors(err.response.data);\n        setIsLoading(false);\n      });\n  };\n    const handleOnChange = (e) => {\n      e.preventDefault();\n      setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\n    };\n\n\n  return (\n    <Wrapper>\n      <Container>\n        <Title content='Resetowanie hasła' />\n        <Segment placeholder className='main' size='large'>\n          <Message className='msg' info size='small' floating>\n            <Message.Header>Resetowanie hasła</Message.Header>\n            <p>\n              Strona służy do resetowania hasła do konta. Zostanie wygenerowany\n              specjalny link oraz przesłany na podany adres email i będzie ważny\n              przez <strong>12 godzin</strong>. Jeżeli nie znajdziesz linka\n              sprawdź folder <strong> spam</strong> w Twojej poczcie. W\n              formularzu poniżej podaj nazwę użytkownika oraz email, które\n              podałaś/eś w trakcie rejestracji.\n            </p>\n          </Message>\n          <Grid columns={1} relaxed='very' stackable>\n            <Grid.Column>\n              <Form>\n                <input type='hidden' name='_csrf' value=''></input>\n                {resetReqInputs.map((input) => {\n                  return (\n                    <div key={input.id}>\n                      <Form.Input\n                        onChange={(e) => handleOnChange(e)}\n                        required\n                        className='input'\n                        icon={input.icon}\n                        iconPosition='left'\n                        label={input.label}\n                        placeholder={input.placeholder}\n                        type={input.type}\n                        name={input.name}\n                      />\n\n                      {errors && errors[input.name] && (\n                        <Label\n                          basic\n                          color='red'\n                          pointing='above'\n                          key={input.id}\n                          className='small'\n                        >\n                          {errors[input.name]}\n                        </Label>\n                      )}\n                    </div>\n                  );\n                })}\n                <Button\n                  loading={isLoading}\n                  type='submit'\n                  content='Wyślij link'\n                  primary\n                  size='large'\n                  onClick={handleOnClick}\n                />\n              </Form>\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      </Container>\n    </Wrapper>\n  );\n};\n\n\nexport default ResetSend;\n","/home/tomek/apps/stypendia/client/src/pages/profile.js",["372"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Container, Header, Icon } from 'semantic-ui-react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { Wrapper } from './styles/profile.styles';\nimport { AuthContext, AppContext, AlertContext } from '../context';\nimport { Title, Confirm } from '../components';\nimport { capitalize, toLocaleDate } from '../utils';\nimport axios from 'axios';\n\nconst Profile = () => {\n  const history = useHistory();\n\n  const appContext = useContext(AppContext);\n  const { setIsLoading } = appContext;\n\n  const alertContext = useContext(AlertContext);\n  const { addAlert } = alertContext;\n\n  const authContext = useContext(AuthContext);\n  const { checkIsAuthenticated, isLoggedIn, user, resetTimeLeft, logOut } = authContext;\n\n  const [openConfirm, setOpenConfirm] = useState(false);\n\n  const handleDelete = async () => {\n    setIsLoading(true);\n    // const csrfData = await axios.get('/api/v1/csrf');\n    axios\n      .put(`/api/v1/users/${user.uuid}`\n      // , { _csrf: csrfData.data.csrfToken }\n      )\n      .then(async (data) => {\n        console.log(data);\n        if (data.data.resStatus || data.data.resStatus === 'success') {    setOpenConfirm(false)\n          setIsLoading(false);\n          logOut()\n          history.push('/register');\n        }\n      })\n      .catch((err) => {\n        if (err.response?.data?.alertTitle) {\n          setIsLoading(false);\n          addAlert(err.response.data);\n\n        }\n        setIsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    checkIsAuthenticated();\n    resetTimeLeft();\n    !isLoggedIn && history.push('/login');\n  }, [isLoggedIn, openConfirm]);\n  return (\n    <Wrapper>\n      <Confirm\n        openConfirm={openConfirm}\n        setOpenConfirm={setOpenConfirm}\n        greenButton='Nie, rezygnuję'\n        redButton={'Tak, usuń konto'}\n        greenAction={() => setOpenConfirm(false)}\n        redAction={handleDelete}\n        title='Usuwanie konta'\n        content='Zamierzasz usunąć konto. Pamiętaj, że usunięcie konta oznacza usunięcie użytkownika, jego wniosków, kopii roboczych. Usunięcie konta nie jest możliwe, jeżeli złożyłaś/eś już wniosek. Czy jesteś pewna/y?'\n      />\n      <Title content='Twoje dane' />\n      <Container className='container'>\n        <Header as='h2' icon textAlign='center'>\n          <Icon name='user' circular />\n          <Header.Content>\n            {user.firstName} {user.lastName}{' '}\n          </Header.Content>\n        </Header>\n        <Header\n          className='header'\n          textAlign='left'\n          as='h2'\n          content={capitalize(user.role)}\n          subheader='Typ posiadanego konta / poziom uprawnień'\n          dividing\n        />\n        <Header\n          className='header'\n          textAlign='left'\n          as='h2'\n          content={user.login}\n          subheader='Nazwa użytkownika / służy do logowania i odzyskiwania hasła'\n          dividing\n        />\n        <Header\n          className='header'\n          textAlign='left'\n          as='h2'\n          content={user.email}\n          subheader='Email użytkownika / służy do odzyskiwania hasła oraz kontaktu z użytkownikiem'\n          dividing\n        />\n        <Header\n          className='header'\n          textAlign='left'\n          as='h3'\n          content={toLocaleDate(user.verifiedAt)}\n          subheader='Data potwierdzenia konta'\n          dividing\n        />\n        <Header className='header' textAlign='left' as='h3' dividing>\n          {toLocaleDate(user.lastPassChangeAt)}\n          <Header.Subheader>\n            Ostatnia zmiana hasła{' '}\n            <Link to='/changepass'>\n              <Button className='link' primary floated='right' size='large'>\n                <Icon name='exchange' />\n                Zmień hasło\n              </Button>\n            </Link>\n          </Header.Subheader>\n        </Header>\n\n        <Header className='header' textAlign='left' as='h3' dividing>\n          Usuwanie konta\n          <Header.Subheader>\n            Ostatnia zmiana hasła{' '}\n            <Button\n              onClick={() => setOpenConfirm(true)}\n              className='link'\n              negative\n              floated='right'\n              size='small'\n\n            >\n              <Icon name='trash' />\n              Usuń konto\n            </Button>\n          </Header.Subheader>\n        </Header>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default Profile;\n","/home/tomek/apps/stypendia/client/src/pages/verify.js",["373","374"],"import axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport {AlertContext,AuthContext, AppContext} from '../context';\nimport { Link } from 'react-router-dom';\nimport { verItems } from '../parts/items';\nimport {\n  Button,\n  Container,\n  Header,\n  Icon,\n  List,\n  Loader,\n  Message,\n  Segment,\n} from 'semantic-ui-react';\n\nimport {Wrapper} from './styles/verify.styles'\nimport Title from '../components/Title';\n\nconst Verify = ({ location: { search }, history }) => {\n  const appContext = useContext(AppContext);\n  const { setIsLoading, isLoading } = appContext;\n\n  const alertContext = useContext(AlertContext);\n  const { addAlert } = alertContext;\n\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  const authContext = useContext(AuthContext);\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\n  isLoggedIn && history.push('/');\n\n  const [query, setQuery] = useState(search);\n\n  useEffect(() => {\n    checkIsAuthenticated();\n\n    axios\n      .post(`/api/v1/email/verify${query}`)\n      .then((data) => {\n        setIsLoading(false);\n        setIsSuccess(true);\n        addAlert(data.data);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        addAlert(err.response.data);\n      });\n  }, [isLoggedIn]);\n\n  return (\n    <Wrapper>\n      <Title content='Weryfikacja konta' />\n      <Loader active={isLoading} size='huge'>\n        Weryfikujemy\n      </Loader>\n\n      {!isLoading && !isSuccess && (\n        <Container className='msg'>\n          <Message error size='big' floating>\n            <Message.Header>Błąd weryfikacji danych</Message.Header>\n            <p>\n              Nie udało się potwierdzić konta przy użyciu tego linka. Być może\n              link jest już przestarzały lub uszkodzony. Możesz skorzystać z\n              mechanizmu ponownej wysyłki linka korzystając z tej strony:\n              <br />\n              <br />\n              <Link to='/resend'>\n                <Button primary size='large'>\n                  Ponownie wyślij link\n                </Button>\n              </Link>\n            </p>\n          </Message>\n        </Container>\n      )}\n\n      {!isLoading && isSuccess && (\n        <>\n          <Segment placeholder className='main' size='large'>\n            <Message success size='medium' floating>\n              <Message.Header>Potwierdzono konto!!!</Message.Header>\n              <p>\n                Udało się potwierdzić konto. Od tej chili możesz się zalogować i\n                złożyć wniosek.\n              </p>\n            </Message>\n\n            <List\n              size='large'\n              selection\n              animated\n              divided\n              verticalAlign='middle'\n              hor\n            >\n              {verItems.map((item) => (\n                <List.Item key={item.id}>\n                  <Link to={item.to}>\n                    <List.Content floated='right'>\n                      <Button\n                        size={item.button === 'Logowanie' ? 'big' : null}\n                        primary={item.button === 'Logowanie'}\n                        icon\n                        labelPosition='right'\n                      >\n                        {item.button}\n                        <Icon name='right arrow' />\n                      </Button>\n                    </List.Content>\n                    <List.Content verticalAlign='bottom' floated='left'>\n                      <Header as='h3' className='itemheader'>\n                        <Icon size='large' name={item.icon} /> {item.name}\n                      </Header>\n                    </List.Content>\n                  </Link>\n                </List.Item>\n              ))}\n            </List>\n          </Segment>\n        </>\n      )}\n    </Wrapper>\n  );\n};\n\n\nexport default Verify;\n","/home/tomek/apps/stypendia/client/src/components/alert/Alert.js",["375"],"import React, { useContext } from 'react';\nimport { Message } from 'semantic-ui-react';\nimport { Wrapper } from '../styles/alert.styles';\n// import './Alert.css';\nimport AlertContext from '../../context/alert/alertContext';\n\nconst Alert = (props) => {\n  const alertContext = useContext(AlertContext);\n  const { alerts, deleteAlert } = alertContext;\n\n  return (\n    <Wrapper>\n      <div className={`notification-container ${props.position}`}>\n        {alerts.map((alert, i) => {\n          if (props.autoDeleteInterval) {\n            setInterval(() => {\n              deleteAlert(alert.id);\n            }, props.autoDeleteInterval);\n          }\n\n          switch (alert.resStatus) {\n            case 'error':\n              return (\n                <div key={alert.id} className={`${props.position}`}>\n                  <Message error className='toast'>\n                    <Message.Header className='notification-title'>\n                      {alert.alertTitle}\n                    </Message.Header>\n                    <Message.Content className='notification-message'>\n                      <p> {alert.msgPL}</p>\n                    </Message.Content>\n                  </Message>\n                </div>\n              );\n            case 'info':\n              return (\n                <div key={alert.id} className={`${props.position}`}>\n                  <Message info className='toast'>\n                    <Message.Header className='notification-title'>\n                      {alert.alertTitle}\n                    </Message.Header>\n                    <Message.Content className='notification-message'>\n                      <p> {alert.msgPL}</p>\n                    </Message.Content>\n                  </Message>\n                </div>\n              );\n\n            case 'warning':\n              return (\n                <div key={alert.id} className={`${props.position}`}>\n                  <Message warning className='toast'>\n                    <Message.Header className='notification-title'>\n                      {alert.alertTitle}\n                    </Message.Header>\n                    <Message.Content className='notification-message'>\n                      <p> {alert.msgPL}</p>\n                    </Message.Content>\n                  </Message>\n                </div>\n              );\n\n            case 'success':\n              return (\n                <div key={alert.id} className={`${props.position}`}>\n                  <Message success className='toast'>\n                    <Message.Header className='notification-title'>\n                      {alert.alertTitle}\n                    </Message.Header>\n                    <Message.Content className='notification-message'>\n                      <p> {alert.msgPL}</p>\n                    </Message.Content>\n                  </Message>\n                </div>\n              );\n\n            default:\n              break;\n          }\n        })}\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default Alert;\n","/home/tomek/apps/stypendia/client/src/components/submit/subA_I_II.js",["376"],"import React, { useContext, useEffect } from 'react';\nimport { Form, Grid, Header, Label } from 'semantic-ui-react';\nimport SubALayout from '../subALayout';\n\nimport {AuthContext, SubmitContext }from '../../context';\nimport { optionsAttachment } from '../../parts/options';\n\nconst SubA_I_II = () => {\n  const authContext = useContext(AuthContext);\n  const { user, resetTimeLeft } = authContext;\n\n  const submitContext = useContext(SubmitContext);\n  const {\n    newSubmit,\n    updateNewSubmit,\n    submitMode,\n    curSubmit,\n    updateCurSubmit,\n    submitToWatch,\n    submitErrors,\n  } = submitContext;\n\n  const handleOnChange = async (e) => {\n    e.preventDefault();\n\n    if (submitMode === 'edit') {\n      await updateCurSubmit({\n        ...curSubmit,\n        [e.target.name]: e.target.value,\n      });\n    } else if (submitMode === 'new') {\n      await updateNewSubmit({\n        ...newSubmit,\n        [e.target.name]: e.target.value,\n      });\n    }\n  };\n  useEffect(() => {\n    resetTimeLeft();\n  }, []);\n\n  return (\n    <SubALayout leadHeader='CZĘŚĆ A – INFORMACJE DOTYCZĄCE UCZNIA/UCZENNICY'>\n      <Grid.Column className='column'>\n        <Header className='sub-header' floated='left' as='h4'>\n          I. DANE OSOBOWE WNIOSKODAWCY:\n        </Header>\n        <Form className='form'>\n          <Form.Group grouped>\n            <Form.Input\n              className='input'\n              label='Imię wnioskodawcy'\n              name='firstName'\n              icon='user'\n              iconPosition='left'\n              value={user?.firstName} // usynąć znak zapytania\n            />\n            <Form.Input\n              icon='user'\n              iconPosition='left'\n              className='input'\n              label='Nazwisko wnioskodawcy'\n              name='lastName'\n              value={user?.lastName}\n            />\n\n            <Form.Input\n              className='input'\n              label='Email wnioskodawcy'\n              icon='at'\n              iconPosition='left'\n              placeholder='Podaj email wnioskodawcy'\n              name='phone'\n              value={user?.email}\n            />\n            <Form.Input\n              className='input'\n              label='Numer telefonu wnioskodawcy'\n              icon='phone'\n              iconPosition='left'\n              placeholder='Podaj numer telefonu wnioskodawcy'\n              name='phone'\n              onChange={(e) => handleOnChange(e)}\n              value={\n                (submitMode === 'edit'\n                  ? curSubmit?.phone\n                  : submitMode === 'new'\n                  ? newSubmit?.phone\n                  : submitToWatch?.phone) || ''\n              }\n            />\n            {submitErrors?.phone && (\n              <Label basic color='red' pointing='above' className='small'>\n                {submitErrors?.phone}\n              </Label>\n            )}\n\n            <Form.Input\n              onChange={(e) => handleOnChange(e)}\n              className='input'\n              icon='box'\n              iconPosition='left'\n              label='Adres skrzynki ePuap (opcjonalnie)'\n              placeholder='Podaj adres ePuap (opcjonalnie)'\n              name='epuapAdr'\n              value={\n                (submitMode === 'edit'\n                  ? curSubmit?.epuapAdr\n                  : submitMode === 'new'\n                  ? newSubmit?.epuapAdr\n                  : submitToWatch?.epuapAdr) || ''\n              }\n            />\n\n            <div className='select-wrapper'>\n              <Header className='select-header' as='h5'>\n                Status Wnioskodawcy\n              </Header>\n              <select\n                onChange={(e) => handleOnChange(e)}\n                name='isSelf'\n                value={\n                  (submitMode === 'edit'\n                    ? curSubmit?.isSelf\n                    : submitMode === 'new'\n                    ? newSubmit?.isSelf\n                    : submitToWatch?.isSelf) || 'default'\n                }\n              >\n                {optionsAttachment.map((o) => (\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\n                    {o.text}\n                  </option>\n                ))}\n              </select>\n              {submitErrors?.isSelf && (\n                <Label basic color='red' pointing='above' className='select'>\n                  {submitErrors?.isSelf}\n                </Label>\n              )}\n            </div>\n          </Form.Group>\n        </Form>\n      </Grid.Column>\n      <Grid.Column>\n        <Header className='sub-header' floated='left' as='h4'>\n          II. DANE OSOBOWE UCZNIA:\n        </Header>\n        <Form className='form'>\n          <Form.Group grouped>\n            <Form.Input\n              onChange={(e) => handleOnChange(e)}\n              className='input'\n              placeholder='Podaj PESEL ucznia'\n              label='PESEL ucznia'\n              name='pupilPesel'\n              icon='id card outline'\n              iconPosition='left'\n              value={\n                (submitMode === 'edit'\n                  ? curSubmit?.pupilPesel\n                  : submitMode === 'new'\n                  ? newSubmit?.pupilPesel\n                  : submitToWatch?.pupilPesel) || ''\n              }\n            />\n            {submitErrors?.pupilPesel && (\n              <Label basic color='red' pointing='above' className='small'>\n                {submitErrors?.pupilPesel}\n              </Label>\n            )}\n            <Form.Input\n              onChange={(e) => handleOnChange(e)}\n              className='input'\n              icon='user'\n              iconPosition='left'\n              label='Imię ucznia'\n              name='pupilFirstName'\n              placeholder='Podaj imię ucznia'\n              value={\n                (newSubmit.isSelf === '1'\n                  ? user.firstName\n                  : submitMode === 'edit'\n                  ? curSubmit?.pupilFirstName\n                  : submitMode === 'new'\n                  ? newSubmit?.pupilFirstName\n                  : submitToWatch?.pupilFirstName) || ''\n              }\n            />\n            {submitErrors?.pupilFirstName && (\n              <Label basic color='red' pointing='above' className='small'>\n                {submitErrors?.pupilFirstName}\n              </Label>\n            )}\n\n            <Form.Input\n              onChange={(e) => handleOnChange(e)}\n              icon='user'\n              iconPosition='left'\n              className='input'\n              label='Nazwisko ucznia'\n              name='pupilLastName'\n              placeholder='Podaj nazwisko ucznia'\n              value={\n                (newSubmit.isSelf === '1'\n                  ? user.lastName\n                  : submitMode === 'edit'\n                  ? curSubmit?.pupilLastName\n                  : submitMode === 'new'\n                  ? newSubmit?.pupilLastName\n                  : submitToWatch?.pupilLastName) || ''\n              }\n            />\n            {submitErrors?.pupilLastName && (\n              <Label basic color='red' pointing='above' className='small'>\n                {submitErrors?.pupilLastName}\n              </Label>\n            )}\n            <Form.Input\n              onChange={(e) => handleOnChange(e)}\n              icon='at'\n              iconPosition='left'\n              className='input'\n              label='Email ucznia'\n              type='email'\n              name='pupilEmail'\n              placeholder='Podaj adres email ucznia'\n              value={\n                (newSubmit.isSelf === '1'\n                  ? user.email\n                  : submitMode === 'edit'\n                  ? curSubmit?.pupilEmail\n                  : submitMode === 'new'\n                  ? newSubmit?.pupilEmail\n                  : submitToWatch?.pupilEmail) || ''\n              }\n            />\n            {submitErrors?.pupilEmail && (\n              <Label basic color='red' pointing='above' className='small'>\n                {submitErrors?.pupilEmail}\n              </Label>\n            )}\n            <Form.Input\n              onChange={(e) => handleOnChange(e)}\n              className='input'\n              label='Numer telefonu ucznia'\n              icon='phone'\n              iconPosition='left'\n              placeholder='Podaj numer telefonu ucznia'\n              type='phone'\n              name='pupilPhone'\n              value={\n                (submitMode === 'edit'\n                  ? curSubmit?.pupilPhone\n                  : submitMode === 'new'\n                  ? newSubmit?.pupilPhone\n                  : submitToWatch?.pupilPhone) || ''\n              }\n            />\n            {submitErrors?.pupilPhone && (\n              <Label basic color='red' pointing='above' className='small'>\n                {submitErrors?.pupilPhone}\n              </Label>\n            )}\n          </Form.Group>\n        </Form>\n      </Grid.Column>\n    </SubALayout>\n  );\n};\n\nexport default SubA_I_II;\n","/home/tomek/apps/stypendia/client/src/components/submit/Attachments.js",["377"],"import React, { createRef, useContext, useEffect, useState } from 'react';\nimport { Button, Card, Icon, Image, Label, Message } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { AuthContext, SubmitContext, AlertContext } from '../../context';\nimport { Wrapper } from '../styles/attachments.styles';\n\nimport addedImg from '../../assets/img/wireframe.png';\nimport statementImg from '../../assets/img/statement.jpg';\nimport reportImg from '../../assets/img/reportCard.jpg';\nimport SubALayout from '../subALayout';\nimport { toLocaleDate } from '../../utils/toLocaleDate';\n\nconst Attachments = () => {\n  const authContext = useContext(AuthContext);\n  const { resetTimeLeft } = authContext;\n  const alertContext = useContext(AlertContext);\n\n  const { addAlert } = alertContext;\n\n  const submitContext = useContext(SubmitContext);\n  const {\n    newSubmit,\n    updateNewSubmit,\n    submitMode,\n    curSubmit,\n    updateCurSubmit,\n    submitToWatch,\n    submitErrors,\n  } = submitContext;\n\n  const [curDocument, setCurDocument] = useState(null);\n\n  const fileInputRef = createRef();\n  const openFileInput = (type) => {\n    if (submitMode === 'watch') return;\n    fileInputRef.current.name = type;\n    fileInputRef.current.click();\n  };\n\n  const deleteFile = async (e, id) => {\n    e.stopPropagation();\n    const res = await axios.delete(`/api/v1/files/${id}`);\n    addAlert(res.data);\n    if (submitMode === 'edit') {\n      await updateCurSubmit({\n        ...curSubmit,\n        [`${res.data.type}Id`]: null,\n        [`${res.data.type}Checksum`]: null, //virtual\n        [`${res.data.type}CreatedAt`]: null, //virtual\n      });\n    } else if (submitMode === 'new') {\n      await updateNewSubmit({\n        ...newSubmit,\n        [`${res.data.type}Id`]: null,\n        [`${res.data.type}Checksum`]: null, //virtual\n        [`${res.data.type}CreatedAt`]: null, //virtual\n      });\n    }\n  };\n\n  const callFetch = async (e, id) => {\n    e.stopPropagation();\n    const res = await axios.get(`/api/v1/files/info/${id}`);\n\n    axios\n      .get(`/api/v1/files/download/${id}`, {\n        responseType: 'blob',\n      })\n      .then((response) => {\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', res.data.file.fileName); //or any other extension\n        document.body.appendChild(link);\n        link.click();\n      })\n      .catch((err) => {\n        console.log(err);\n        addAlert(err.response.data);\n      });\n  };\n\n  const uploadImage = async (e) => {\n    const file = e.target.files[0];\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('type', fileInputRef.current.name);\n\n    try {\n      const res = await axios.post('/api/v1/files/upload', formData);\n\n      res.data.resStatus !== 'success' && addAlert(res.data);\n\n      if (submitMode === 'edit') {\n        await updateCurSubmit({\n          ...curSubmit,\n          [`${res.data.file.type}Id`]: res.data.file.id,\n          [`${res.data.file.type}Checksum`]: res.data.file.checksum, //virtual\n          [`${res.data.file.type}CreatedAt`]: res.data.file.createdAt, //virtual\n        });\n      } else if (submitMode === 'new') {\n        await updateNewSubmit({\n          ...newSubmit,\n          [`${res.data.file.type}Id`]: res.data.file.id,\n          [`${res.data.file.type}Checksum`]: res.data.file.checksum, //virtual\n          [`${res.data.file.type}CreatedAt`]: res.data.file.createdAt, //virtual\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    resetTimeLeft();\n    if (submitMode === 'new') {\n      setCurDocument(newSubmit);\n    } else if (submitMode === 'edit') {\n      setCurDocument(curSubmit);\n    } else if (submitMode === 'watch') {\n      setCurDocument(submitToWatch);\n    }\n  }, [submitMode, submitToWatch, newSubmit, curSubmit]);\n\n  return (\n    <Wrapper submitMode={submitMode}>\n      <SubALayout leadHeader='CZĘŚĆ A – ZAŁĄCZNIKI'>\n        <input\n          type='file'\n          hidden={true}\n          ref={fileInputRef}\n          onChange={uploadImage}\n        />\n        <Message info floating>\n          <Message.Header>Dodawanie załączników</Message.Header>\n          <p>\n            W tej części wniosku należy dodać 2 różne typy załączników:{' '}\n            <strong>Oświadczenie opiekuna dydaktycznego</strong> oraz{' '}\n            <strong>Świadectwo szkolne za ostatni rok szkolny</strong>\n            Pamiętaj, iż dopuszczalna wielkość każdego z plików (załączników) to\n            20MB. Dopuszatne formaty plików to: <strong> .pdf, .jpg. </strong>\n            oraz <strong>.png.</strong> Kliknij w odpowiednie pole, aby dodać\n            dokument właściwego typu. Jeśli chcesz zamienić plik, klikniej\n            ponownie we włąściwą część.\n          </p>\n        </Message>\n        <Card.Group itemsPerRow={4} stackable>\n          <Card className='card' onClick={() => openFileInput('statement')}>\n            {curDocument &&\n              (curDocument.statementId ? (\n<>\n                  <div className='img-button'>\n                    <Button\n                      onClick={(e) => callFetch(e, curDocument.statementId)}\n                      primary\n                      icon\n                      size='tiny'\n                      className='download-btn btn'\n                    >\n                      <Icon name='download' />\n                    </Button>\n                    <Button\n                      onClick={(e) => deleteFile(e, curDocument.statementId)}\n                      className='trash-btn btn'\n                      color='red'\n                      icon\n                      size='tiny'\n                    >\n                      <Icon name='trash' />\n                    </Button>\n                  </div>\n                  <Image\n                    fluid\n                    label={{\n                      as: 'div',\n                      color: 'green',\n                      content: 'Plik dodany',\n                      icon: 'thumbs up',\n                      ribbon: true,\n                    }}\n                    src={statementImg}\n                  />\n</>\n              ) : (\n                <Image\n                  fluid\n                  label={{\n                    as: 'div',\n                    color: 'red',\n                    content: 'Kliknij i dodaj plik',\n                    icon: 'upload',\n                    ribbon: true,\n                  }}\n                  src={addedImg}\n                />\n              ))}\n            {submitErrors?.statementId && (\n              <Label basic color='red' pointing='above' className='small'>\n                {submitErrors?.statementId}\n              </Label>\n            )}\n            <Card.Content>\n              <Card.Header textAlign='left'>\n                Oświadczenie opiekuna dydaktycznego\n              </Card.Header>\n              <Card.Meta textAlign='left'>\n                {curDocument && curDocument.statementCreatedAt && (\n                  <span className='date'>\n                    Dodano:{' '}\n                    {toLocaleDate(curDocument?.statementCreatedAt)}\n                  </span>\n                )}\n              </Card.Meta>\n              <Card.Meta textAlign='left'>\n                {curDocument && curDocument.statementChecksum && (\n                  <div className='date' style={{ wordWrap: 'break-word' }}>\n                    Suma kontrolna pliku:{' '}\n                    <strong> {curDocument.statementChecksum}</strong>\n                  </div>\n                )}\n              </Card.Meta>\n            </Card.Content>\n          </Card>\n\n          <Card onClick={() => openFileInput('report_card')}>\n            {curDocument &&\n              (curDocument.report_cardId ? (\n                <div className='placeholder-image'>\n                  <div className='img-button'>\n                    <Button\n                      onClick={(e) => callFetch(e, curDocument.report_cardId)}\n                      primary\n                      icon\n                      size='tiny'\n                      className='download-btn btn'\n                    >\n                      <Icon name='download' />\n                    </Button>\n                    <Button\n\n                      onClick={(e) => deleteFile(e, curDocument.report_cardId)}\n                      className='trash-btn btn'\n                      color='red'\n                      icon\n                      size='tiny'\n                    >\n                      <Icon name='trash' />\n                    </Button>\n                  </div>\n                  <Image\n                    fluid\n                    label={{\n                      as: 'div',\n                      color: 'green',\n                      content: 'Plik dodany',\n                      icon: 'thumbs up',\n                      ribbon: true,\n                    }}\n                    src={reportImg}\n                  />\n                </div>\n              ) : (\n                <Image\n                  fluid\n                  label={{\n                    as: 'div',\n                    color: 'red',\n                    content: 'Kliknij i dodaj plik',\n                    icon: 'upload',\n                    ribbon: true,\n                  }}\n                  src={addedImg}\n                />\n              ))}\n\n            <Card.Content>\n              <Card.Header textAlign='left'>\n                {submitErrors?.report_cardId && (\n                  <Label basic color='red' pointing='above' className='small'>\n                    {submitErrors?.report_cardId}\n                  </Label>\n                )}\n                Świadectwo szkolne - ostatni rok szkolny\n              </Card.Header>\n              <Card.Meta textAlign='left'>\n                {curDocument && curDocument.report_cardCreatedAt && (\n                  <span className='date'>\n                    Dodano:{' '}\n                    {toLocaleDate(curDocument?.report_cardCreatedAt)}{' '}\n                  </span>\n                )}\n              </Card.Meta>\n              <Card.Meta textAlign='left'>\n                {curDocument && curDocument.report_cardChecksum && (\n                  <div className='date' style={{ wordWrap: 'break-word' }}>\n                    Suma kontrolna pliku:{' '}\n                    <strong> {curDocument.report_cardChecksum}</strong>\n                  </div>\n                )}\n              </Card.Meta>\n              <Card.Description textAlign='left'></Card.Description>\n            </Card.Content>\n          </Card>\n        </Card.Group>{' '}\n      </SubALayout>\n    </Wrapper>\n  );\n};\n\nexport default Attachments;\n","/home/tomek/apps/stypendia/client/src/components/submit/subA_III_IV.js",["378"],"import React, { useContext, useEffect } from 'react';\nimport { Form, Grid, Header, Label, Segment } from 'semantic-ui-react';\nimport SubALayout from '../subALayout';\nimport { SubmitContext, AuthContext } from '../../context';\nimport { optionsVoyev, optionsSchoolType, optionsProfile } from '../../parts';\n\nconst SubA_III_IV = () => {\n  const authContext = useContext(AuthContext);\n  const { resetTimeLeft } = authContext;\n\n  const submitContext = useContext(SubmitContext);\n  const {\n    newSubmit,\n    updateNewSubmit,\n    submitMode,\n    curSubmit,\n    updateCurSubmit,\n    submitToWatch,\n    submitErrors,\n  } = submitContext;\n\n  const handleOnChange = async (e) => {\n    e.preventDefault();\n\n    if (submitMode === 'edit') {\n      await updateCurSubmit({\n        ...curSubmit,\n        [e.target.name]: e.target.value,\n      });\n    } else if (submitMode === 'new') {\n      await updateNewSubmit({\n        ...newSubmit,\n        [e.target.name]: e.target.value,\n      });\n    }\n  };\n\n  useEffect(() => {\n    resetTimeLeft();\n  }, []);\n\n  return (\n    <SubALayout leadHeader='CZĘŚĆ A – INFORMACJE DOTYCZĄCE UCZNIA/UCZENNICY'>\n      <Grid.Column className='column'>\n        <Header className='sub-header' floated='left' as='h4'>\n          III. DANE SZKOŁY:\n        </Header>\n        <Form className='form'>\n          <Form.Group grouped>\n            <Form.Input\n              className='input'\n              label='Pełna nazwa szkoły'\n              name='schoolName'\n              icon='building outline'\n              placeholder='Podaj pełną nazwę szkoły'\n              iconPosition='left'\n              onChange={(e) => handleOnChange(e)}\n              value={\n                (submitMode === 'edit'\n                  ? curSubmit?.schoolName\n                  : submitMode === 'new'\n                  ? newSubmit?.schoolName\n                  : submitToWatch?.schoolName) || ''\n              }\n            />\n\n            {submitErrors?.schoolName && (\n              <Label basic color='red' pointing='above' className='small'>\n                {submitErrors?.schoolName}\n              </Label>\n            )}\n            <div className='select-wrapper'>\n              <Header className='select-header' as='h5'>\n                Profil doradcy\n              </Header>\n              <select\n                name='schoolType'\n                onChange={(e) => handleOnChange(e)}\n                value={\n                  (submitMode === 'edit'\n                    ? curSubmit?.schoolType\n                    : submitMode === 'new'\n                    ? newSubmit?.schoolType\n                    : submitToWatch?.schoolType) || 'default'\n                }\n              >\n                {optionsSchoolType.map((o) => (\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\n                    {o.text}\n                  </option>\n                ))}\n              </select>{' '}\n              {submitErrors?.schoolType && (\n                <Label basic color='red' pointing='above' className='select'>\n                  {submitErrors?.schoolType}\n                </Label>\n              )}\n            </div>\n\n            <div className='adress-wrapper'>\n              <Header as='h4'>Adres szkoły</Header>\n              <Segment>\n                <Form.Input\n                  className='input'\n                  icon='user'\n                  iconPosition='left'\n                  placeholder='Podaj ulicę'\n                  name='schoolStreetName'\n                  value={\n                    (submitMode === 'edit'\n                      ? curSubmit?.schoolStreetName\n                      : submitMode === 'new'\n                      ? newSubmit?.schoolStreetName\n                      : submitToWatch?.schoolStreetName) || ''\n                  }\n                  onChange={(e) => handleOnChange(e)}\n                />\n                {submitErrors?.schoolStreetName && (\n                  <Label basic color='red' pointing='above' className='small'>\n                    {submitErrors?.schoolStreetName}\n                  </Label>\n                )}\n                <Form.Input\n                  className='input'\n                  // label='Adres szkoły (numer domu)'\n                  icon='phone'\n                  iconPosition='left'\n                  placeholder='Podaj numer domu'\n                  name='schoolStreetNr'\n                  value={\n                    (submitMode === 'edit'\n                      ? curSubmit?.schoolStreetNr\n                      : submitMode === 'new'\n                      ? newSubmit?.schoolStreetNr\n                      : submitToWatch?.schoolStreetNr) || ''\n                  }\n                  onChange={(e) => handleOnChange(e)}\n                />\n                {submitErrors?.schoolStreetNr && (\n                  <Label basic color='red' pointing='above' className='small'>\n                    {submitErrors?.schoolStreetNr}\n                  </Label>\n                )}\n                <Form.Input\n                  className='input'\n                  icon='zip'\n                  iconPosition='left'\n                  placeholder='Podaj kod pocztowy w formacie XX-XXX'\n                  name='schoolZip'\n                  value={\n                    (submitMode === 'edit'\n                      ? curSubmit?.schoolZip\n                      : submitMode === 'new'\n                      ? newSubmit?.schoolZip\n                      : submitToWatch?.schoolZip) || ''\n                  }\n                  onChange={(e) => handleOnChange(e)}\n                />\n                {submitErrors?.schoolZip && (\n                  <Label basic color='red' pointing='above' className='small'>\n                    {submitErrors?.schoolZip}\n                  </Label>\n                )}\n                <Form.Input\n                  className='input'\n                  icon='zip'\n                  iconPosition='left'\n                  // label='Adres szkoły (miejscowość)'\n                  placeholder='Podaj miejscowość'\n                  name='schoolTown'\n                  value={\n                    (submitMode === 'edit'\n                      ? curSubmit?.schoolTown\n                      : submitMode === 'new'\n                      ? newSubmit?.schoolTown\n                      : submitToWatch?.schoolTown) || ''\n                  }\n                  onChange={(e) => handleOnChange(e)}\n                />\n                {submitErrors?.schoolTown && (\n                  <Label basic color='red' pointing='above' className='small'>\n                    {submitErrors?.schoolTown}\n                  </Label>\n                )}\n                <div className='select-wrapper'>\n                  <select\n                    name='schoolVoyev'\n                    onChange={(e) => handleOnChange(e)}\n                    value={\n                      (submitMode === 'edit'\n                        ? curSubmit?.schoolVoyev\n                        : submitMode === 'new'\n                        ? newSubmit?.schoolVoyev\n                        : submitToWatch?.schoolVoyev) || 'default'\n                    }\n                  >\n                    {optionsVoyev.map((o) => (\n                      <option disabled={o.disabled} key={o.key} value={o.value}>\n                        {o.text}\n                      </option>\n                    ))}\n                  </select>\n                  {submitErrors?.schoolVoyev && (\n                    <Label\n                      basic\n                      color='red'\n                      pointing='above'\n                      className='select'\n                    >\n                      {submitErrors?.schoolVoyev}\n                    </Label>\n                  )}\n                </div>\n              </Segment>\n            </div>\n          </Form.Group>\n        </Form>\n      </Grid.Column>\n      <Grid.Column>\n        <Header className='sub-header' floated='left' as='h4'>\n          IV. DANE OPIEKUNA DYDAKTYCZNEGO:\n        </Header>\n        <Form className='form'>\n          <Form.Group grouped>\n            <Form.Input\n              className='input'\n              icon='user'\n              iconPosition='left'\n              label='Imię doradcy'\n              name='counselorFirstName'\n              placeholder='Podaj imię doradcy'\n              value={\n                (submitMode === 'edit'\n                  ? curSubmit?.counselorFirstName\n                  : submitMode === 'new'\n                  ? newSubmit?.counselorFirstName\n                  : submitToWatch?.counselorFirstName) || ''\n              }\n              onChange={(e) => handleOnChange(e)}\n            />\n            {submitErrors?.counselorFirstName && (\n              <Label basic color='red' pointing='above' className='small'>\n                {submitErrors?.counselorFirstName}\n              </Label>\n            )}\n            <Form.Input\n              icon='user'\n              iconPosition='left'\n              className='input'\n              label='Nazwisko doradcy'\n              name='counselorLastName'\n              placeholder='Podaj nazwisko doradcy'\n              value={\n                (submitMode === 'edit'\n                  ? curSubmit?.counselorLastName\n                  : submitMode === 'new'\n                  ? newSubmit?.counselorLastName\n                  : submitToWatch?.counselorLastName) || ''\n              }\n              onChange={(e) => handleOnChange(e)}\n            />\n            {submitErrors?.counselorLastName && (\n              <Label basic color='red' pointing='above' className='small'>\n                {submitErrors?.counselorLastName}\n              </Label>\n            )}\n            <div className='select-wrapper'>\n              <Header className='select-header' as='h5'>\n                Profil doradcy\n              </Header>\n              <select\n                name='counselorProfile'\n                onChange={(e) => handleOnChange(e)}\n                placeholder='Wybierz profil doradcy'\n                value={\n                  (submitMode === 'edit'\n                    ? curSubmit?.counselorProfile\n                    : submitMode === 'new'\n                    ? newSubmit?.counselorProfile\n                    : submitToWatch?.counselorProfile) || 'default'\n                }\n              >\n                {optionsProfile.map((o) => (\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\n                    {o.text}\n                  </option>\n                ))}\n              </select>\n              {submitErrors?.counselorProfile && (\n                <Label basic color='red' pointing='above' className='select'>\n                  {submitErrors?.counselorProfile}\n                </Label>\n              )}\n            </div>\n          </Form.Group>\n        </Form>\n      </Grid.Column>\n    </SubALayout>\n  );\n};\n\nexport default SubA_III_IV;\n","/home/tomek/apps/stypendia/client/src/context/alert/alertContext.js",[],"/home/tomek/apps/stypendia/client/src/context/alert/AlertState.js",[],"/home/tomek/apps/stypendia/client/src/context/submit/submitContext.js",[],"/home/tomek/apps/stypendia/client/src/context/app/appContext.js",[],"/home/tomek/apps/stypendia/client/src/context/app/appState.js",[],"/home/tomek/apps/stypendia/client/src/context/submit/submitState.js",[],"/home/tomek/apps/stypendia/client/src/components/styles/rodo.styles.js",[],"/home/tomek/apps/stypendia/client/src/components/styles/nav.styles.js",[],"/home/tomek/apps/stypendia/client/src/context/types.js",[],"/home/tomek/apps/stypendia/client/src/components/styles/errors.style.js",[],"/home/tomek/apps/stypendia/client/src/hooks/useFetch.js",["379"],"import axios from 'axios';\nimport { useContext, useEffect, useState } from 'react';\nimport { AlertContext, AppContext, AuthContext } from '../context';\n\nconst useFetch = (url) => {\n  const appContext = useContext(AppContext);\n  const { setIsLoading } = appContext;\n\n  const authContext = useContext(AuthContext);\n  const { resetTimeLeft, isLoggedIn } = authContext;\n\n  const alertContext = useContext(AlertContext);\n  const { addAlert } = alertContext;\n\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    isLoggedIn &&\n    axios\n      .get(`/api/v1/${url}`)\n      .then((data) => {\n        setData(data.data.data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        if (err.response.data) {\n          addAlert(err.response.data);\n          setIsLoading(false);\n          return;\n        }\n      });\n    resetTimeLeft();\n  }, []);\n\n  return { data };\n};\n\nexport default useFetch;\n","/home/tomek/apps/stypendia/client/src/utils/mapErrors.js",["380"],"export const mapErrors = (object) => {\n  if (!object) return;\n  const errors = [];\n  for (const [key, value] of Object.entries(object)) {\n    errors.push(value);\n  }\n\n  return errors;\n};\n","/home/tomek/apps/stypendia/client/src/pages/styles/home.styles.js",[],"/home/tomek/apps/stypendia/client/src/context/alert/alertReducer.js",[],"/home/tomek/apps/stypendia/client/src/pages/styles/submit.styles.js",[],"/home/tomek/apps/stypendia/client/src/pages/styles/verify.styles.js",[],"/home/tomek/apps/stypendia/client/src/context/submit/submitReducer.js",[],"/home/tomek/apps/stypendia/client/src/context/app/appReducer.js",[],"/home/tomek/apps/stypendia/client/src/components/styles/attachments.styles.js",[],"/home/tomek/apps/stypendia/client/src/utils/toLocaleDate.js",[],"/home/tomek/apps/stypendia/client/src/parts/options.js",[],"/home/tomek/apps/stypendia/client/src/components/styles/alert.styles.js",[],"/home/tomek/apps/stypendia/client/src/pages/styles/profile.styles.js",[],"/home/tomek/apps/stypendia/client/src/parts/inputs.js",[],"/home/tomek/apps/stypendia/client/src/pages/styles/resetSend.styles.js",[],"/home/tomek/apps/stypendia/client/src/pages/styles/reset.styles.js",[],"/home/tomek/apps/stypendia/client/src/pages/styles/resend.styles.js",[],"/home/tomek/apps/stypendia/client/src/parts/index.js",[],"/home/tomek/apps/stypendia/client/src/services/index.js",[],"/home/tomek/apps/stypendia/client/src/utils/index.js",[],"/home/tomek/apps/stypendia/client/src/services/fetchPdf.js",[],"/home/tomek/apps/stypendia/client/src/services/saveRollbar.js",[],"/home/tomek/apps/stypendia/client/src/pages/styles/register.styles.js",[],"/home/tomek/apps/stypendia/client/src/pages/styles/login.styles.js",[],"/home/tomek/apps/stypendia/client/src/pages/styles/changePass.styles.js",[],"/home/tomek/apps/stypendia/client/src/pages/styles/logout.styles.js",[],"/home/tomek/apps/stypendia/client/src/context/auth/authReducer.js",[],"/home/tomek/apps/stypendia/client/src/pages/styles/404.styles.js",[],"/home/tomek/apps/stypendia/client/src/utils/capitalize.js",[],["381","382"],{"ruleId":"383","replacedBy":"384"},{"ruleId":"385","replacedBy":"386"},{"ruleId":"387","severity":1,"message":"388","line":2,"column":8,"nodeType":"389","messageId":"390","endLine":2,"endColumn":13},{"ruleId":"387","severity":1,"message":"391","line":13,"column":21,"nodeType":"389","messageId":"390","endLine":13,"endColumn":33},{"ruleId":"392","severity":1,"message":"393","line":29,"column":6,"nodeType":"394","endLine":29,"endColumn":16,"suggestions":"395"},{"ruleId":"392","severity":1,"message":"396","line":19,"column":6,"nodeType":"394","endLine":19,"endColumn":8,"suggestions":"397"},{"ruleId":"392","severity":1,"message":"396","line":39,"column":6,"nodeType":"394","endLine":39,"endColumn":12,"suggestions":"398"},{"ruleId":"392","severity":1,"message":"396","line":24,"column":6,"nodeType":"394","endLine":24,"endColumn":8,"suggestions":"399"},{"ruleId":"387","severity":1,"message":"400","line":1,"column":40,"nodeType":"389","messageId":"390","endLine":1,"endColumn":48},{"ruleId":"392","severity":1,"message":"396","line":86,"column":6,"nodeType":"394","endLine":86,"endColumn":8,"suggestions":"401"},{"ruleId":"387","severity":1,"message":"402","line":5,"column":3,"nodeType":"389","messageId":"390","endLine":5,"endColumn":9},{"ruleId":"387","severity":1,"message":"403","line":6,"column":3,"nodeType":"389","messageId":"390","endLine":6,"endColumn":8},{"ruleId":"387","severity":1,"message":"404","line":2,"column":10,"nodeType":"389","messageId":"390","endLine":2,"endColumn":19},{"ruleId":"387","severity":1,"message":"405","line":15,"column":9,"nodeType":"389","messageId":"390","endLine":15,"endColumn":22},{"ruleId":"392","severity":1,"message":"406","line":98,"column":6,"nodeType":"394","endLine":98,"endColumn":8,"suggestions":"407"},{"ruleId":"392","severity":1,"message":"396","line":63,"column":8,"nodeType":"394","endLine":63,"endColumn":10,"suggestions":"408"},{"ruleId":"387","severity":1,"message":"409","line":25,"column":36,"nodeType":"389","messageId":"390","endLine":25,"endColumn":47},{"ruleId":"392","severity":1,"message":"410","line":36,"column":6,"nodeType":"394","endLine":36,"endColumn":18,"suggestions":"411"},{"ruleId":"392","severity":1,"message":"406","line":38,"column":6,"nodeType":"394","endLine":38,"endColumn":8,"suggestions":"412"},{"ruleId":"392","severity":1,"message":"410","line":33,"column":6,"nodeType":"394","endLine":33,"endColumn":18,"suggestions":"413"},{"ruleId":"392","severity":1,"message":"410","line":34,"column":6,"nodeType":"394","endLine":34,"endColumn":18,"suggestions":"414"},{"ruleId":"415","severity":1,"message":"416","line":19,"column":16,"nodeType":"417","endLine":19,"endColumn":29},{"ruleId":"415","severity":1,"message":"418","line":21,"column":16,"nodeType":"417","endLine":21,"endColumn":31},{"ruleId":"415","severity":1,"message":"418","line":25,"column":16,"nodeType":"417","endLine":25,"endColumn":31},{"ruleId":"415","severity":1,"message":"418","line":27,"column":16,"nodeType":"417","endLine":27,"endColumn":31},{"ruleId":"415","severity":1,"message":"416","line":30,"column":16,"nodeType":"417","endLine":30,"endColumn":29},{"ruleId":"392","severity":1,"message":"410","line":35,"column":6,"nodeType":"394","endLine":35,"endColumn":18,"suggestions":"419"},{"ruleId":"392","severity":1,"message":"420","line":53,"column":6,"nodeType":"394","endLine":53,"endColumn":31,"suggestions":"421"},{"ruleId":"387","severity":1,"message":"422","line":33,"column":17,"nodeType":"389","messageId":"390","endLine":33,"endColumn":25},{"ruleId":"392","severity":1,"message":"423","line":49,"column":6,"nodeType":"394","endLine":49,"endColumn":18,"suggestions":"424"},{"ruleId":"425","severity":1,"message":"426","line":14,"column":32,"nodeType":"427","messageId":"428","endLine":14,"endColumn":34},{"ruleId":"392","severity":1,"message":"396","line":40,"column":6,"nodeType":"394","endLine":40,"endColumn":8,"suggestions":"429"},{"ruleId":"392","severity":1,"message":"396","line":124,"column":6,"nodeType":"394","endLine":124,"endColumn":55,"suggestions":"430"},{"ruleId":"392","severity":1,"message":"396","line":40,"column":6,"nodeType":"394","endLine":40,"endColumn":8,"suggestions":"431"},{"ruleId":"392","severity":1,"message":"432","line":34,"column":6,"nodeType":"394","endLine":34,"endColumn":8,"suggestions":"433"},{"ruleId":"387","severity":1,"message":"434","line":4,"column":15,"nodeType":"389","messageId":"390","endLine":4,"endColumn":18},{"ruleId":"383","replacedBy":"435"},{"ruleId":"385","replacedBy":"436"},"no-native-reassign",["437"],"no-negated-in-lhs",["438"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'setHasOwnSub' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'logOut' and 'setTimeLeft'. Either include them or remove the dependency array.","ArrayExpression",["439"],"React Hook useEffect has a missing dependency: 'resetTimeLeft'. Either include it or remove the dependency array.",["440"],["441"],["442"],"'useState' is defined but never used.",["443"],"'Header' is defined but never used.","'Label' is defined but never used.","'useEffect' is defined but never used.","'handleConfirm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkIsAuthenticated'. Either include it or remove the dependency array.",["444"],["445"],"'saveRollbar' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkIsAuthenticated' and 'history'. Either include them or remove the dependency array.",["446"],["447"],["448"],["449"],"react/jsx-pascal-case","Imported JSX component SubA_I_II must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component SubA_III_IV must be in PascalCase or SCREAMING_SNAKE_CASE",["450"],"React Hook useEffect has missing dependencies: 'checkIsAuthenticated', 'history', and 'resetTimeLeft'. Either include them or remove the dependency array.",["451"],"'setQuery' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addAlert', 'checkIsAuthenticated', 'query', and 'setIsLoading'. Either include them or remove the dependency array.",["452"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["453"],["454"],["455"],"React Hook useEffect has missing dependencies: 'addAlert', 'isLoggedIn', 'resetTimeLeft', 'setIsLoading', and 'url'. Either include them or remove the dependency array.",["456"],"'key' is assigned a value but never used.",["437"],["438"],"no-global-assign","no-unsafe-negation",{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"459","fix":"463"},{"desc":"459","fix":"464"},{"desc":"465","fix":"466"},{"desc":"459","fix":"467"},{"desc":"468","fix":"469"},{"desc":"465","fix":"470"},{"desc":"468","fix":"471"},{"desc":"468","fix":"472"},{"desc":"468","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"459","fix":"478"},{"desc":"479","fix":"480"},{"desc":"459","fix":"481"},{"desc":"482","fix":"483"},"Update the dependencies array to be: [logOut, setTimeLeft, timeLeft]",{"range":"484","text":"485"},"Update the dependencies array to be: [resetTimeLeft]",{"range":"486","text":"487"},"Update the dependencies array to be: [data, resetTimeLeft]",{"range":"488","text":"489"},{"range":"490","text":"487"},{"range":"491","text":"487"},"Update the dependencies array to be: [checkIsAuthenticated]",{"range":"492","text":"493"},{"range":"494","text":"487"},"Update the dependencies array to be: [checkIsAuthenticated, history, isLoggedIn]",{"range":"495","text":"496"},{"range":"497","text":"493"},{"range":"498","text":"496"},{"range":"499","text":"496"},{"range":"500","text":"496"},"Update the dependencies array to be: [checkIsAuthenticated, history, isLoggedIn, openConfirm, resetTimeLeft]",{"range":"501","text":"502"},"Update the dependencies array to be: [addAlert, checkIsAuthenticated, isLoggedIn, query, setIsLoading]",{"range":"503","text":"504"},{"range":"505","text":"487"},"Update the dependencies array to be: [submitMode, submitToWatch, newSubmit, curSubmit, resetTimeLeft]",{"range":"506","text":"507"},{"range":"508","text":"487"},"Update the dependencies array to be: [addAlert, isLoggedIn, resetTimeLeft, setIsLoading, url]",{"range":"509","text":"510"},[1051,1061],"[logOut, setTimeLeft, timeLeft]",[561,563],"[resetTimeLeft]",[1052,1058],"[data, resetTimeLeft]",[582,584],[2320,2322],[2146,2148],"[checkIsAuthenticated]",[1717,1719],[983,995],"[checkIsAuthenticated, history, isLoggedIn]",[1109,1111],[863,875],[917,929],[915,927],[1653,1678],"[checkIsAuthenticated, history, isLoggedIn, openConfirm, resetTimeLeft]",[1258,1270],"[addAlert, checkIsAuthenticated, isLoggedIn, query, setIsLoading]",[1003,1005],[3876,3925],"[submitMode, submitToWatch, newSubmit, curSubmit, resetTimeLeft]",[1032,1034],[882,884],"[addAlert, isLoggedIn, resetTimeLeft, setIsLoading, url]"]