[{"C:\\dev\\stypendia\\client\\src\\index.js":"1","C:\\dev\\stypendia\\client\\src\\App.js":"2","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\Layout.js":"3","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\MainMenu.js":"4","C:\\dev\\stypendia\\client\\src\\pages\\login.js":"5","C:\\dev\\stypendia\\client\\src\\pages\\register.js":"6","C:\\dev\\stypendia\\client\\src\\pages\\home.js":"7","C:\\dev\\stypendia\\client\\src\\components\\Rodo.js":"8","C:\\dev\\stypendia\\client\\src\\components\\Title.js":"9","C:\\dev\\stypendia\\client\\src\\context\\auth\\AuthState.js":"10","C:\\dev\\stypendia\\client\\src\\context\\auth\\authReducer.js":"11","C:\\dev\\stypendia\\client\\src\\context\\types.js":"12","C:\\dev\\stypendia\\client\\src\\context\\auth\\authContext.js":"13","C:\\dev\\stypendia\\client\\src\\components\\alert\\Alert.js":"14","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertContext.js":"15","C:\\dev\\stypendia\\client\\src\\pages\\verify.js":"16","C:\\dev\\stypendia\\client\\src\\context\\alert\\AlertState.js":"17","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertReducer.js":"18","C:\\dev\\stypendia\\client\\src\\items.js":"19","C:\\dev\\stypendia\\client\\src\\pages\\resend.js":"20","C:\\dev\\stypendia\\client\\src\\pages\\resetSend.js":"21","C:\\dev\\stypendia\\client\\src\\inputs.js":"22","C:\\dev\\stypendia\\client\\src\\pages\\reset.js":"23","C:\\dev\\stypendia\\client\\src\\pages\\logout.js":"24","C:\\dev\\stypendia\\client\\src\\pages\\changePass.js":"25","C:\\dev\\stypendia\\client\\src\\pages\\protectedRoute.js":"26","C:\\dev\\stypendia\\client\\src\\pages\\newSubmit.js":"27","C:\\dev\\stypendia\\client\\src\\pages\\styles\\submit.styles.js":"28","C:\\dev\\stypendia\\client\\src\\components\\subA_I_II.js":"29","C:\\dev\\stypendia\\client\\src\\components\\subALayout.js":"30"},{"size":220,"mtime":1608816802276,"results":"31","hashOfConfig":"32"},{"size":1933,"mtime":1609707433933,"results":"33","hashOfConfig":"32"},{"size":436,"mtime":1609709774473,"results":"34","hashOfConfig":"32"},{"size":2178,"mtime":1609605668315,"results":"35","hashOfConfig":"32"},{"size":4968,"mtime":1609693072891,"results":"36","hashOfConfig":"32"},{"size":6042,"mtime":1609147378233,"results":"37","hashOfConfig":"32"},{"size":168,"mtime":1609693453885,"results":"38","hashOfConfig":"32"},{"size":4589,"mtime":1608724734557,"results":"39","hashOfConfig":"32"},{"size":792,"mtime":1608799587288,"results":"40","hashOfConfig":"32"},{"size":2187,"mtime":1609665906928,"results":"41","hashOfConfig":"32"},{"size":425,"mtime":1608890663144,"results":"42","hashOfConfig":"32"},{"size":249,"mtime":1609080271357,"results":"43","hashOfConfig":"32"},{"size":105,"mtime":1608848462800,"results":"44","hashOfConfig":"32"},{"size":2110,"mtime":1609080271355,"results":"45","hashOfConfig":"32"},{"size":109,"mtime":1609080271356,"results":"46","hashOfConfig":"32"},{"size":4135,"mtime":1609110895221,"results":"47","hashOfConfig":"32"},{"size":837,"mtime":1609111776421,"results":"48","hashOfConfig":"32"},{"size":359,"mtime":1609111873258,"results":"49","hashOfConfig":"32"},{"size":2582,"mtime":1609707301310,"results":"50","hashOfConfig":"32"},{"size":4118,"mtime":1609147183867,"results":"51","hashOfConfig":"32"},{"size":4746,"mtime":1609173897605,"results":"52","hashOfConfig":"32"},{"size":2661,"mtime":1609695788271,"results":"53","hashOfConfig":"32"},{"size":4536,"mtime":1609696801457,"results":"54","hashOfConfig":"32"},{"size":1463,"mtime":1609693453885,"results":"55","hashOfConfig":"32"},{"size":4188,"mtime":1609693453884,"results":"56","hashOfConfig":"32"},{"size":665,"mtime":1609693453885,"results":"57","hashOfConfig":"32"},{"size":453,"mtime":1609709428136,"results":"58","hashOfConfig":"32"},{"size":510,"mtime":1609713550536,"results":"59","hashOfConfig":"32"},{"size":2388,"mtime":1609714504162,"results":"60","hashOfConfig":"32"},{"size":849,"mtime":1609714352500,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1cla2w0",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"64"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\dev\\stypendia\\client\\src\\index.js",[],["134","135"],"C:\\dev\\stypendia\\client\\src\\App.js",[],"C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\Layout.js",[],"C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\MainMenu.js",["136"],"import React, { useContext, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { leftMenuItems, rightMenuItems } from '../../items';\r\nimport AuthContext from '../../context/auth/authContext';\r\n\r\n\r\nconst MainMenu = ({ history }) => {\r\n\r\n\r\n  const [activeItem, setActiveItem] = useState('home');\r\n  const [hasOwnSub, setHasOwnSub] = useState(false);\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { isLoggedIn, logOut } = authContext;\r\n\r\n\r\n  return (\r\n    <Menu icon='labeled' style={styles.main}>\r\n      {leftMenuItems\r\n        .filter(\r\n          (item) =>\r\n            (item.noOwnSubDisplay === !hasOwnSub ||\r\n              item.hasOwnSubDisplay === hasOwnSub) &&\r\n            item.isLoggedInDisplay === isLoggedIn\r\n        )\r\n        .map((item) => (\r\n          <Link to={item.url} key={item.id}>\r\n            <Menu.Item\r\n              as='div'\r\n              icon={item.icon}\r\n              content={item.title}\r\n              name={item.name}\r\n              active={activeItem === item.name}\r\n              onClick={() => setActiveItem(item.name)}\r\n            />\r\n          </Link>\r\n        ))}\r\n\r\n      <Menu.Menu position='right' style={styles.right}>\r\n        {rightMenuItems\r\n          .filter((item) => item.isLoggedInDisplay === isLoggedIn)\r\n          .map((item) => (\r\n            <Link to={item.url} key={item.id}>\r\n              <Menu.Item\r\n                as='div'\r\n                icon={item.icon}\r\n                content={item.title}\r\n                name={item.name}\r\n                active={activeItem === item.name}\r\n                onClick={() => {\r\n                  item.name === 'logout'\r\n                    ? logOut()\r\n                    : setActiveItem(item.name);\r\n                }}\r\n              />\r\n            </Link>\r\n          ))}\r\n      </Menu.Menu>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  main: {\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    width: '100%',\r\n    zIndex: 100,\r\n  },\r\n  right: {\r\n    position: 'fixed',\r\n    top: 0,\r\n    right: 0,\r\n    zIndex: 100,\r\n    marginLeft: 0,\r\n    marginRight: 0,\r\n  },\r\n};\r\nexport default MainMenu;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\login.js",["137"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { loginInputs } from '../inputs';\r\n\r\nconst Login = ({ history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .post(`/api/v1/users/login`, body, headers)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n\r\n      })\r\n      .catch((err) => {\r\n\r\n        if (err.response.data.forcePassChange) {\r\n\r\n          addAlert(err.response.data);\r\n          setIsLoading(false);\r\n          history.push(\r\n            `/reset?id=${err.response.data.resetId}&token=${err.response.data.token}`\r\n          );\r\n          return\r\n        }\r\n\r\n\r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Title content='Logowanie' />\r\n      <Segment placeholder style={styles.main} size='large'>\r\n        <Grid columns={2} relaxed='very' stackable>\r\n          <Grid.Column>\r\n            <Form>\r\n              {loginInputs.map((input) => {\r\n                return (\r\n                  <div key={input.id}>\r\n                    <Form.Input\r\n                      onChange={(e) => handleOnChange(e)}\r\n                      required\r\n                      style={styles.input}\r\n                      icon={input.icon}\r\n                      iconPosition='left'\r\n                      label={input.label}\r\n                      placeholder={input.placeholder}\r\n                      type={input.type}\r\n                      name={input.name}\r\n                    />\r\n\r\n                    {errors && errors[input.name] && (\r\n                      <Label\r\n                        basic\r\n                        color='red'\r\n                        pointing='above'\r\n                        key={input.id}\r\n                        style={styles.small}\r\n                      >\r\n                        {errors[input.name]}\r\n                      </Label>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n              <span>{}</span>\r\n              <Button\r\n                loading={isLoading}\r\n                type='submit'\r\n                content='Zaloguj się'\r\n                primary\r\n                size='large'\r\n                onClick={handleOnClick}\r\n              />\r\n            </Form>\r\n            <Link to='/resetsend' style={styles.link}>\r\n              <div style={styles.buttonWrapper}>\r\n                <div style={styles.span}>Zapomniałeś hasła?</div>\r\n                <Button content='Resetuj hasło' icon='recycle' size='mini' />\r\n              </div>\r\n            </Link>\r\n          </Grid.Column>\r\n\r\n          <Grid.Column verticalAlign='middle'>\r\n            <Link to='/register'>\r\n              <Button content='Zarejestruj się' icon='user plus' size='big' />\r\n            </Link>\r\n          </Grid.Column>\r\n        </Grid>\r\n\r\n        <Divider vertical>lub</Divider>\r\n      </Segment>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  main: {\r\n    marginTop: '7rem',\r\n    width: '95%',\r\n    marginBottom: '5rem',\r\n  },\r\n  column: {},\r\n  buttonWrapper: {\r\n    marginTop: '10px',\r\n  },\r\n  ol: {\r\n    fontSize: '.85rem',\r\n    color: '#666',\r\n  },\r\n  intro: {\r\n    fontSize: '.85rem',\r\n    marginLeft: '1.8rem',\r\n    marginTop: '2rem',\r\n    color: '#666',\r\n  },\r\n  input: {\r\n    width: '290px',\r\n    marginLeft: '-35px',\r\n    marginBottom: '20px',\r\n  },\r\n  small: {\r\n    fontSize: '.9rem',\r\n    textAlign: 'center',\r\n    transform: 'translateY(-35px)',\r\n    color: 'red',\r\n  },\r\n\r\n  span: {\r\n    fontSize: '1rem',\r\n  },\r\n  link: {},\r\n};\r\n\r\nexport default Login;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\register.js",["138","139"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Container,\r\n  Divider,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Rodo from '../components/Rodo';\r\nimport Title from '../components/Title';\r\nimport { registerInputs } from '../inputs';\r\nimport AlertContext from '../context/alert/alertContext';\r\n\r\nconst Register = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n  isLoggedIn && props.history.push('/');\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isRodoChecked, setIsRodoChecked] = useState(false);\r\n  const [isRegulationsChecked, setIsRegulationsChecked] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n  }, []);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .post(`${process.env.REACT_APP_ORIGIN}/api/v1/users`, body, headers)\r\n      .then((data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          setIsLoading(false);\r\n          setTimeout(() => props.history.push('/login'), 1500);\r\n          addAlert(data.data);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        setErrors(err.response.data);\r\n        addAlert(err.response.data);\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <div style={styles.main}>\r\n      <Title content='Dodawanie konta' />\r\n      <Segment placeholder size='large'>\r\n        <Grid columns={2} relaxed='very' stackable>\r\n          <Grid.Column textAlign='left' verticalAlign='middle'>\r\n            <Header textAlign='center'>Potwierdź niezbędne oświadczenia</Header>\r\n\r\n            <Checkbox\r\n              onChange={() => setIsRegulationsChecked(!isRegulationsChecked)}\r\n              // value={isRegulationsChecked}\r\n              checked={isRegulationsChecked}\r\n              label={\r\n                <label>\r\n                  Oświadczam, iż zapoznałam/em się z regulaminem i akceptuję\r\n                  jego postanowienia <span style={{ color: 'red' }}>*</span>\r\n                </label>\r\n              }\r\n            />\r\n\r\n            <Rodo />\r\n\r\n            <Checkbox\r\n              onChange={() => setIsRodoChecked(!isRodoChecked)}\r\n              // value={isRodoChecked}\r\n              checked={isRodoChecked}\r\n              style={{ marginBottom: '30px' }}\r\n              required\r\n              label={\r\n                <label>\r\n                  Oświadczam, iż zapoznałam/em się z powyższą informacją\r\n                  <span style={{ color: 'red' }}> *</span>\r\n                </label>\r\n              }\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column style={styles.column}>\r\n            <Container>\r\n              <Header>... podaj swoje dane</Header>\r\n              <Form>\r\n                {registerInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        loading={isLoading}\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        style={styles.input}\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          style={styles.small}\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Zarejestruj się'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                  disabled={\r\n                    !isRegulationsChecked || !isRodoChecked ? true : false\r\n                  }\r\n                />\r\n              </Form>\r\n              <Link to='/login'>\r\n                <div style={styles.buttonWrapper}>\r\n                  <div style={styles.span}>Masz już konto?</div>\r\n                  <Button content='Zaloguj się' icon='user' size='mini' />\r\n                </div>\r\n              </Link>\r\n            </Container>\r\n          </Grid.Column>\r\n        </Grid>\r\n\r\n        <Divider vertical>oraz</Divider>\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  main: {\r\n    marginTop: '7rem',\r\n    width: '95%',\r\n    marginBottom: '5rem',\r\n  },\r\n\r\n  buttonWrapper: {\r\n    marginTop: '20px',\r\n  },\r\n  span: {\r\n    fontSize: '1rem',\r\n  },\r\n  ol: {\r\n    fontSize: '.85rem',\r\n    color: '#666',\r\n  },\r\n  intro: {\r\n    fontSize: '.85rem',\r\n    marginLeft: '1.8rem',\r\n    marginTop: '2rem',\r\n    color: '#666',\r\n  },\r\n\r\n  input: {\r\n    width: '290px',\r\n    marginLeft: '-35px',\r\n    marginBottom: '20px',\r\n  },\r\n  small: {\r\n    fontSize: '.9rem',\r\n    textAlign: 'center',\r\n    transform: 'translateY(-35px)',\r\n    color: 'red',\r\n  },\r\n};\r\n\r\nexport default Register;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\home.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Rodo.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Title.js",[],"C:\\dev\\stypendia\\client\\src\\context\\auth\\AuthState.js",["140"],"import React, { useContext, useEffect, useReducer } from 'react';\r\nimport authReducer from './authReducer';\r\nimport AuthContext from './authContext';\r\nimport axios from 'axios';\r\nimport AlertContext from '../../context/alert/alertContext';\r\n\r\nimport { SET_USER, CHECK_IS_LOGGED_IN, LOGOUT_USER } from '../types';\r\n\r\nconst AuthState = (props) => {\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n\r\n\r\n\r\n  const initialState = {\r\n    user: null,\r\n    isLoggedIn: false,\r\n  };\r\n\r\n  const checkIsAuthenticated = async () => {\r\n    const result = await (\r\n      await fetch('http://localhost:5003/api/v1/users/me', {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n    ).json();\r\n    result.resStatus === 'success' ? setIsLoggedIn(true) : setIsLoggedIn(false);\r\n    setUser(result.user);\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n  }, []);\r\n\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  const setUser = (user) => {\r\n    dispatch({\r\n      type: SET_USER,\r\n      payload: user,\r\n    });\r\n  };\r\n\r\n  const setIsLoggedIn = (is) => {\r\n    dispatch({\r\n      type: CHECK_IS_LOGGED_IN,\r\n      payload: is,\r\n    });\r\n  };\r\n\r\n  const logOut = () => {\r\n\r\n    axios\r\n      .get('/api/v1/users/logout')\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n           await props?.history?.push('/login');\r\n        }\r\n      })\r\n      .catch(\r\n        (err) => console.log(err.message)\r\n        //   if (err.response.data.alertTitle) {\r\n        //     console.log(err.response.data);\r\n\r\n        //     addAlert(err.response.data);\r\n        //   }\r\n        // });\r\n      );\r\n\r\n    dispatch({\r\n      type: LOGOUT_USER\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user: state.user,\r\n        setUser,\r\n        logOut,\r\n        checkIsAuthenticated,\r\n        isLoggedIn: state.isLoggedIn,\r\n            }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthState;\r\n","C:\\dev\\stypendia\\client\\src\\context\\auth\\authReducer.js",[],"C:\\dev\\stypendia\\client\\src\\context\\types.js",[],"C:\\dev\\stypendia\\client\\src\\context\\auth\\authContext.js",[],"C:\\dev\\stypendia\\client\\src\\components\\alert\\Alert.js",["141"],"import React, { useContext } from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\nimport './Alert.css';\r\nimport AlertContext from '../../context/alert/alertContext';\r\n\r\nconst Alert = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { alerts, deleteAlert } = alertContext;\r\n\r\n  return (\r\n    <div className={`notification-container ${props.position}`}>\r\n      {alerts.map((alert, i) => {\r\n        if (props.autoDeleteInterval) {\r\n          setInterval(() => {\r\n            deleteAlert(alert.id);\r\n          }, props.autoDeleteInterval);\r\n        }\r\n\r\n        switch (alert.resStatus) {\r\n          case 'error':\r\n            return (\r\n              <div key={alert.id} className={`${props.position}`}>\r\n                <Message error className='toast'>\r\n                  <Message.Header>{alert.alertTitle}</Message.Header>\r\n                  <p>{alert.msgPL}</p>\r\n                </Message>\r\n              </div>\r\n            );\r\n          case 'info':\r\n            return (\r\n              <div key={alert.id} className={`${props.position}`}>\r\n                <Message info className='toast'>\r\n                  <Message.Header>{alert.alertTitle}</Message.Header>\r\n                  <p>{alert.msgPL}</p>\r\n                </Message>\r\n              </div>\r\n            );\r\n\r\n          case 'warning':\r\n            return (\r\n              <div key={alert.id} className={`${props.position}`}>\r\n                <Message warning className='toast'>\r\n                  <Message.Header>{alert.alertTitle}</Message.Header>\r\n                  <p>{alert.msgPL}</p>\r\n                </Message>\r\n              </div>\r\n            );\r\n\r\n          case 'success':\r\n            return (\r\n              <div key={alert.id} className={`${props.position}`}>\r\n                <Message success className='toast'>\r\n                  <Message.Header>{alert.alertTitle}</Message.Header>\r\n                  <p>{alert.msgPL}</p>\r\n                </Message>\r\n              </div>\r\n            );\r\n\r\n          default:\r\n            break;\r\n        }\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertContext.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\verify.js",["142","143"],"import axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { Link } from 'react-router-dom';\r\nimport { verItems } from '../items';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Header,\r\n  Icon,\r\n  List,\r\n  Loader,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Title from '../components/Title';\r\n\r\nconst Verify = ({ location: { search }, history }) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\r\n  isLoggedIn && history.push('/');\r\n\r\n  const [query, setQuery] = useState(search);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    axios\r\n      .post(`/api/v1/email/verify${query}`)\r\n      .then((data) => {\r\n        setIsLoading(false);\r\n        setIsSuccess(true);\r\n        addAlert(data.data);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        addAlert(err.response.data);\r\n      });\r\n  }, [isLoggedIn]);\r\n\r\n  return (\r\n    <>\r\n      <Title content='Weryfikacja konta' />\r\n      <Loader active={isLoading} size='huge'>\r\n        Weryfikujemy\r\n      </Loader>\r\n\r\n      {!isLoading && !isSuccess && (\r\n        <Container style={styles.msg}>\r\n          <Message error size='big' floating>\r\n            <Message.Header>Błąd weryfikacji danych</Message.Header>\r\n            <p>\r\n              Nie udało się potwierdzić konta przy użyciu tego linka. Być może\r\n              link jest już przestarzały lub uszkodzony. Możesz skorzystać z\r\n              mechanizmu ponownej wysyłki linka korzystając z tej strony:\r\n              <br />\r\n              <br />\r\n              <Link to='/resend'>\r\n                <Button primary size='large'>\r\n                  Ponownie wyślij link\r\n                </Button>\r\n              </Link>\r\n            </p>\r\n          </Message>\r\n        </Container>\r\n      )}\r\n\r\n      {!isLoading && isSuccess && (\r\n        <>\r\n          <Segment placeholder style={styles.main} size='large'>\r\n            <Message success size='medium' floating>\r\n              <Message.Header>Potwierdzono konto!!!</Message.Header>\r\n              <p>\r\n                Udało się potwierdzić konto. Od tej chili możesz się zalogować i\r\n                złożyć wniosek.\r\n              </p>\r\n            </Message>\r\n\r\n            <List\r\n              size='large'\r\n              selection\r\n              animated\r\n              divided\r\n              verticalAlign='middle'\r\n              hor\r\n            >\r\n              {verItems.map((item) => (\r\n                <List.Item key={item.id}>\r\n                  <Link to={item.to}>\r\n                    <List.Content floated='right'>\r\n                      <Button\r\n                        size={item.button === 'Logowanie' ? 'big' : null}\r\n                        primary={item.button === 'Logowanie'}\r\n                        icon\r\n                        labelPosition='right'\r\n                      >\r\n                        {item.button}\r\n                        <Icon name='right arrow' />\r\n                      </Button>\r\n                    </List.Content>\r\n                    <List.Content verticalAlign='bottom' floated='left'>\r\n                      <Header as='h3' style={styles.itemHeader}>\r\n                        <Icon size='large' name={item.icon} /> {item.name}\r\n                      </Header>\r\n                    </List.Content>\r\n                  </Link>\r\n                </List.Item>\r\n              ))}\r\n            </List>\r\n          </Segment>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  main: {\r\n    marginTop: '8rem',\r\n  },\r\n  leadingHeader: {\r\n    marginBottom: '5rem',\r\n    marginTop: '8rem',\r\n  },\r\n  itemHeader: {\r\n    transform: 'translateY(8px)',\r\n  },\r\n  msg: {\r\n    textAlign: 'left',\r\n    marginTop: '15%',\r\n  },\r\n};\r\n\r\nexport default Verify;\r\n","C:\\dev\\stypendia\\client\\src\\context\\alert\\AlertState.js",[],"C:\\dev\\stypendia\\client\\src\\context\\alert\\alertReducer.js",[],"C:\\dev\\stypendia\\client\\src\\items.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\resend.js",["144"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\n\r\nconst Resend = ({ history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [email, setEmail] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .post(`/api/v1/email/resend`, { email }, headers)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Title content='Potwierdzanie konta' />\r\n      <Segment placeholder style={styles.main} size='large'>\r\n        <Message style={styles.msg} info size='small' floating>\r\n          <Message.Header>\r\n            Ponowne wysłanie linka do potwierdzenia konta\r\n          </Message.Header>\r\n          <p>\r\n            Strona służy do ponownego wysłania linka potwierdzającego konto,\r\n            jeżeli konto już założyłaś/eś, ale nie skorzystałaś/eś z niego w\r\n            odpowiednim czasie. Link zostanie przesłany na podany adres email i\r\n            będzie ważny przez <strong>12 godzin</strong> . Jeżeli nie znajdziesz linka sprawdź\r\n            folder <strong> spam</strong> w Twojej poczcie.\r\n          </p>\r\n        </Message>\r\n        <Grid columns={1} relaxed='very' stackable>\r\n          <Grid.Column>\r\n            <Form>\r\n              <Form.Input\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n                style={styles.input}\r\n                icon='mail'\r\n                iconPosition='left'\r\n                label='Email'\r\n                placeholder='Podaj email'\r\n                type='email'\r\n                name='email'\r\n              />\r\n\r\n              {errors && errors.email && (\r\n                <Label basic color='red' pointing='above' style={styles.small}>\r\n                  {errors.email}\r\n                </Label>\r\n              )}\r\n\r\n              <Button\r\n                loading={isLoading}\r\n                type='submit'\r\n                content='Wyślij link'\r\n                primary\r\n                size='large'\r\n                onClick={handleOnClick}\r\n              />\r\n            </Form>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    </Container>\r\n  );\r\n};\r\nconst styles = {\r\n  main: {\r\n    marginTop: '7rem',\r\n    width: '95%',\r\n    marginBottom: '5rem',\r\n  },\r\n  column: {},\r\n  buttonWrapper: {\r\n    marginTop: '10px',\r\n  },\r\n  ol: {\r\n    fontSize: '.85rem',\r\n    color: '#666',\r\n  },\r\n  intro: {\r\n    fontSize: '.85rem',\r\n    marginLeft: '1.8rem',\r\n    marginTop: '2rem',\r\n    color: '#666',\r\n  },\r\n  input: {\r\n    width: '290px',\r\n    marginLeft: '-35px',\r\n    marginBottom: '20px',\r\n  },\r\n  small: {\r\n    fontSize: '.9rem',\r\n    textAlign: 'center',\r\n    transform: 'translateY(-35px)',\r\n    color: 'red',\r\n  },\r\n  msg: {\r\n    textAlign: 'left',\r\n    marginBottom: '30px',\r\n  },\r\n};\r\n\r\nexport default Resend;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\resetSend.js",["145"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { resetReqInputs } from '../inputs';\r\n\r\nconst ResetSend = ({ history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .post(`/api/v1/password/email`, {...body}, headers)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/login');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n    const handleOnChange = (e) => {\r\n      e.preventDefault();\r\n      setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n    };\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <Title content='Resetowanie hasła' />\r\n      <Segment placeholder style={styles.main} size='large'>\r\n        <Message style={styles.msg} info size='small' floating>\r\n          <Message.Header>Resetowanie hasła</Message.Header>\r\n          <p>\r\n            Strona służy do resetowania hasła do konta. Zostanie wygenerowany\r\n            specjalny link oraz przesłany na podany adres email i będzie\r\n            ważny przez <strong>12 godzin</strong>. Jeżeli nie znajdziesz linka\r\n            sprawdź folder <strong> spam</strong> w Twojej poczcie. W formularzu poniżej podaj nazwę użytkownika oraz email, które podałaś/eś w trakcie rejestracji.\r\n          </p>\r\n        </Message>\r\n        <Grid columns={1} relaxed='very' stackable>\r\n          <Grid.Column>\r\n            <Form>\r\n              {resetReqInputs.map((input) => {\r\n                return (\r\n                  <div key={input.id}>\r\n                    <Form.Input\r\n                      onChange={(e) => handleOnChange(e)}\r\n                      required\r\n                      style={styles.input}\r\n                      icon={input.icon}\r\n                      iconPosition='left'\r\n                      label={input.label}\r\n                      placeholder={input.placeholder}\r\n                      type={input.type}\r\n                      name={input.name}\r\n                    />\r\n\r\n                    {errors && errors[input.name] && (\r\n                      <Label\r\n                        basic\r\n                        color='red'\r\n                        pointing='above'\r\n                        key={input.id}\r\n                        style={styles.small}\r\n                      >\r\n                        {errors[input.name]}\r\n                      </Label>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n              <Button\r\n                loading={isLoading}\r\n                type='submit'\r\n                content='Wyślij link'\r\n                primary\r\n                size='large'\r\n                onClick={handleOnClick}\r\n              />\r\n            </Form>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    </Container>\r\n  );\r\n};\r\nconst styles = {\r\n  main: {\r\n    marginTop: '7rem',\r\n    width: '95%',\r\n    marginBottom: '5rem',\r\n  },\r\n  column: {},\r\n  buttonWrapper: {\r\n    marginTop: '10px',\r\n  },\r\n  ol: {\r\n    fontSize: '.85rem',\r\n    color: '#666',\r\n  },\r\n  intro: {\r\n    fontSize: '.85rem',\r\n    marginLeft: '1.8rem',\r\n    marginTop: '2rem',\r\n    color: '#666',\r\n  },\r\n  input: {\r\n    width: '290px',\r\n    marginLeft: '-35px',\r\n    marginBottom: '20px',\r\n  },\r\n  small: {\r\n    fontSize: '.9rem',\r\n    textAlign: 'center',\r\n    transform: 'translateY(-35px)',\r\n    color: 'red',\r\n  },\r\n  msg: {\r\n    textAlign: 'left',\r\n    marginBottom: '30px',\r\n  },\r\n};\r\n\r\nexport default ResetSend;\r\n","C:\\dev\\stypendia\\client\\src\\inputs.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\reset.js",["146"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { resetInputs } from '../inputs';\r\n\r\nconst Reset = ({ location, history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .post(`/api/v1/password/reset${location.search}`, body, headers)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/login');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Title content='Nowe hasło' />\r\n      <Segment placeholder style={styles.main} size='large'>\r\n        <Message style={styles.msg} info size='small' floating>\r\n          <Message.Header>Nowe hasło</Message.Header>\r\n          <p>\r\n            Strona służy do nadawania nowego hasła. Podaj niezbędne dane i\r\n            zapisz zmiany. Pamiętaj, aby nowe hasło posiadało co najmniej 1\r\n            wielką literę, 1 małą oraz 1 cyfrę.\r\n          </p>\r\n        </Message>\r\n        <Grid columns={1} relaxed='very' stackable>\r\n          <Grid.Column>\r\n            <Form>\r\n              {resetInputs.map((input) => {\r\n                return (\r\n                  <div key={input.id}>\r\n                    <Form.Input\r\n                      onChange={(e) => handleOnChange(e)}\r\n                      required\r\n                      style={styles.input}\r\n                      icon={input.icon}\r\n                      iconPosition='left'\r\n                      label={input.label}\r\n                      placeholder={input.placeholder}\r\n                      type={input.type}\r\n                      name={input.name}\r\n                    />\r\n\r\n                    {errors && errors[input.name] && (\r\n                      <Label\r\n                        basic\r\n                        color='red'\r\n                        pointing='above'\r\n                        key={input.id}\r\n                        style={styles.small}\r\n                      >\r\n                        {errors[input.name]}\r\n                      </Label>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n              <Button\r\n                loading={isLoading}\r\n                type='submit'\r\n                content='Zapisz nowe hasło'\r\n                primary\r\n                size='large'\r\n                onClick={handleOnClick}\r\n              />\r\n            </Form>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    </Container>\r\n  );\r\n};\r\nconst styles = {\r\n  main: {\r\n    marginTop: '7rem',\r\n    width: '95%',\r\n    marginBottom: '5rem',\r\n  },\r\n  column: {},\r\n  buttonWrapper: {\r\n    marginTop: '10px',\r\n  },\r\n  ol: {\r\n    fontSize: '.85rem',\r\n    color: '#666',\r\n  },\r\n  intro: {\r\n    fontSize: '.85rem',\r\n    marginLeft: '1.8rem',\r\n    marginTop: '2rem',\r\n    color: '#666',\r\n  },\r\n  input: {\r\n    width: '290px',\r\n    marginLeft: '-35px',\r\n    marginBottom: '20px',\r\n  },\r\n  small: {\r\n    fontSize: '.9rem',\r\n    textAlign: 'center',\r\n    transform: 'translateY(-35px)',\r\n    color: 'red',\r\n  },\r\n  msg: {\r\n    textAlign: 'left',\r\n    marginBottom: '30px',\r\n  },\r\n};\r\n\r\nexport default Reset;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\logout.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\changePass.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\protectedRoute.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\newSubmit.js",["147","148","149","150","151","152","153","154","155"],"import React, { useState } from 'react';\r\nimport { Container, Form, Grid, Header, Segment } from 'semantic-ui-react';\r\nimport SubA_I_II from '../components/subA_I_II';\r\nimport Title from '../components/Title';\r\nimport { Wrapper } from './styles/submit.styles';\r\n\r\n\r\n\r\nconst NewSubmit = () => {\r\n\r\nconst [part, setPart] = useState(1)\r\n\r\n\r\n\r\nswitch (part) {\r\n  case 1:\r\nreturn <SubA_I_II/>\r\n  default:\r\n    break;\r\n}\r\n\r\n};\r\n\r\n\r\nexport default NewSubmit;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\styles\\submit.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\subA_I_II.js",["156","157"],"import React, { useState } from 'react';\r\nimport { Form, Grid, Header } from 'semantic-ui-react';\r\nimport SubALayout from './subALayout';\r\n\r\nconst options = [\r\n  { key: 'p', text: 'Rodzic/Opiekun prawny', value: 'parent' },\r\n  { key: 'u', text: 'Pełnoletni uczeń', value: 'pupil' },\r\n];\r\n\r\nconst SubA_I_II = () => {\r\n  const [body, setBody] = useState({});\r\n\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({\r\n      ...prevBody,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <SubALayout leadHeader='CZĘŚĆ A – INFORMACJE DOTYCZĄCE UCZNIA/UCZENNICY'>\r\n      <Grid.Column className='column'>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          I. DANE OSOBOWE WNIOSKODAWCY:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              label='Imię wnioskodawcy'\r\n              name='firstName'\r\n            />\r\n            <Form.Input\r\n              className='input'\r\n              label='Nazwisko wnioskoodawcy'\r\n              name='lastName'\r\n            />\r\n            <Form.Input\r\n              className='input'\r\n              label='Numer telefonu wnioskodawcy'\r\n              name='lastName'\r\n            />\r\n            <Form.Select\r\n              className='input'\r\n              label='Status wnioskodawcy'\r\n              options={options}\r\n              placeholder='status'\r\n              name='status'\r\n            />\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n      <Grid.Column>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          II. DANE OSOBOWE UCZNIA:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              label='Imię ucznia'\r\n              placeholder='First name'\r\n            />\r\n            <Form.Input\r\n              className='input'\r\n              label='Last name'\r\n              placeholder='Last name'\r\n            />\r\n            <Form.Select\r\n              className='input'\r\n              label='Gender'\r\n              options={options}\r\n              placeholder='Gender'\r\n            />\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n    </SubALayout>\r\n  );\r\n};\r\n\r\nexport default SubA_I_II;\r\n","C:\\dev\\stypendia\\client\\src\\components\\subALayout.js",[],{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":13,"column":21,"nodeType":"164","messageId":"165","endLine":13,"endColumn":33},{"ruleId":"166","severity":1,"message":"167","line":33,"column":6,"nodeType":"168","endLine":33,"endColumn":18,"suggestions":"169"},{"ruleId":"162","severity":1,"message":"170","line":26,"column":11,"nodeType":"164","messageId":"165","endLine":26,"endColumn":18},{"ruleId":"166","severity":1,"message":"171","line":37,"column":6,"nodeType":"168","endLine":37,"endColumn":8,"suggestions":"172"},{"ruleId":"166","severity":1,"message":"171","line":38,"column":6,"nodeType":"168","endLine":38,"endColumn":8,"suggestions":"173"},{"ruleId":"174","severity":1,"message":"175","line":12,"column":30,"nodeType":"176","messageId":"177","endLine":12,"endColumn":32},{"ruleId":"162","severity":1,"message":"178","line":30,"column":17,"nodeType":"164","messageId":"165","endLine":30,"endColumn":25},{"ruleId":"166","severity":1,"message":"179","line":45,"column":6,"nodeType":"168","endLine":45,"endColumn":18,"suggestions":"180"},{"ruleId":"166","severity":1,"message":"167","line":30,"column":6,"nodeType":"168","endLine":30,"endColumn":18,"suggestions":"181"},{"ruleId":"166","severity":1,"message":"167","line":31,"column":6,"nodeType":"168","endLine":31,"endColumn":18,"suggestions":"182"},{"ruleId":"166","severity":1,"message":"167","line":31,"column":6,"nodeType":"168","endLine":31,"endColumn":18,"suggestions":"183"},{"ruleId":"162","severity":1,"message":"184","line":2,"column":10,"nodeType":"164","messageId":"165","endLine":2,"endColumn":19},{"ruleId":"162","severity":1,"message":"185","line":2,"column":21,"nodeType":"164","messageId":"165","endLine":2,"endColumn":25},{"ruleId":"162","severity":1,"message":"186","line":2,"column":27,"nodeType":"164","messageId":"165","endLine":2,"endColumn":31},{"ruleId":"162","severity":1,"message":"187","line":2,"column":33,"nodeType":"164","messageId":"165","endLine":2,"endColumn":39},{"ruleId":"162","severity":1,"message":"188","line":2,"column":41,"nodeType":"164","messageId":"165","endLine":2,"endColumn":48},{"ruleId":"162","severity":1,"message":"189","line":4,"column":8,"nodeType":"164","messageId":"165","endLine":4,"endColumn":13},{"ruleId":"162","severity":1,"message":"190","line":5,"column":10,"nodeType":"164","messageId":"165","endLine":5,"endColumn":17},{"ruleId":"162","severity":1,"message":"191","line":11,"column":14,"nodeType":"164","messageId":"165","endLine":11,"endColumn":21},{"ruleId":"192","severity":1,"message":"193","line":17,"column":8,"nodeType":"194","endLine":17,"endColumn":20},{"ruleId":"162","severity":1,"message":"195","line":11,"column":10,"nodeType":"164","messageId":"165","endLine":11,"endColumn":14},{"ruleId":"162","severity":1,"message":"196","line":13,"column":9,"nodeType":"164","messageId":"165","endLine":13,"endColumn":23},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],"no-unused-vars","'setHasOwnSub' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkIsAuthenticated' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["199"],"'setUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkIsAuthenticated'. Either include it or remove the dependency array.",["200"],["201"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setQuery' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addAlert', 'checkIsAuthenticated', and 'query'. Either include them or remove the dependency array.",["202"],["203"],["204"],["205"],"'Container' is defined but never used.","'Form' is defined but never used.","'Grid' is defined but never used.","'Header' is defined but never used.","'Segment' is defined but never used.","'Title' is defined but never used.","'Wrapper' is defined but never used.","'setPart' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component SubA_I_II must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'body' is assigned a value but never used.","'handleOnChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"208","fix":"210"},{"desc":"211","fix":"212"},{"desc":"206","fix":"213"},{"desc":"206","fix":"214"},{"desc":"206","fix":"215"},"Update the dependencies array to be: [checkIsAuthenticated, history, isLoggedIn]",{"range":"216","text":"217"},"Update the dependencies array to be: [checkIsAuthenticated]",{"range":"218","text":"219"},{"range":"220","text":"219"},"Update the dependencies array to be: [addAlert, checkIsAuthenticated, isLoggedIn, query]",{"range":"221","text":"222"},{"range":"223","text":"217"},{"range":"224","text":"217"},{"range":"225","text":"217"},[933,945],"[checkIsAuthenticated, history, isLoggedIn]",[1137,1139],"[checkIsAuthenticated]",[990,992],[1251,1263],"[addAlert, checkIsAuthenticated, isLoggedIn, query]",[850,862],[896,908],[899,911]]