[{"C:\\dev\\stypendia\\client\\src\\index.js":"1","C:\\dev\\stypendia\\client\\src\\App.js":"2","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\Layout.js":"3","C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\MainMenu.js":"4","C:\\dev\\stypendia\\client\\src\\pages\\login.js":"5","C:\\dev\\stypendia\\client\\src\\pages\\register.js":"6","C:\\dev\\stypendia\\client\\src\\pages\\home.js":"7","C:\\dev\\stypendia\\client\\src\\components\\Rodo.js":"8","C:\\dev\\stypendia\\client\\src\\components\\Title.js":"9","C:\\dev\\stypendia\\client\\src\\context\\auth\\AuthState.js":"10","C:\\dev\\stypendia\\client\\src\\context\\auth\\authReducer.js":"11","C:\\dev\\stypendia\\client\\src\\context\\types.js":"12","C:\\dev\\stypendia\\client\\src\\context\\auth\\authContext.js":"13","C:\\dev\\stypendia\\client\\src\\components\\alert\\Alert.js":"14","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertContext.js":"15","C:\\dev\\stypendia\\client\\src\\pages\\verify.js":"16","C:\\dev\\stypendia\\client\\src\\context\\alert\\AlertState.js":"17","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertReducer.js":"18","C:\\dev\\stypendia\\client\\src\\items.js":"19","C:\\dev\\stypendia\\client\\src\\pages\\resend.js":"20","C:\\dev\\stypendia\\client\\src\\pages\\resetSend.js":"21","C:\\dev\\stypendia\\client\\src\\inputs.js":"22","C:\\dev\\stypendia\\client\\src\\pages\\reset.js":"23","C:\\dev\\stypendia\\client\\src\\pages\\logout.js":"24","C:\\dev\\stypendia\\client\\src\\pages\\changePass.js":"25","C:\\dev\\stypendia\\client\\src\\pages\\protectedRoute.js":"26","C:\\dev\\stypendia\\client\\src\\pages\\styles\\submit.styles.js":"27","C:\\dev\\stypendia\\client\\src\\components\\subALayout.js":"28","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitState.js":"29","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitContext.js":"30","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitReducer.js":"31","C:\\dev\\stypendia\\client\\src\\pages\\styles\\newSubmit.styles.js":"32","C:\\dev\\stypendia\\client\\src\\pages\\styles\\home.styles.js":"33","C:\\dev\\stypendia\\client\\src\\components\\Nav.js":"34","C:\\dev\\stypendia\\client\\src\\components\\allUsersSubmits.js":"35","C:\\dev\\stypendia\\client\\src\\components\\AllUsersSubmits.js":"36","C:\\dev\\stypendia\\client\\src\\components\\AllUsersDrafts.js":"37","C:\\dev\\stypendia\\client\\src\\components\\NewCallToAction.js":"38","C:\\dev\\stypendia\\client\\src\\pages\\submit.js":"39","C:\\dev\\stypendia\\client\\src\\components\\styles\\nav.styles.js":"40","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_I_II.js":"41","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_III_IV.js":"42"},{"size":220,"mtime":1608816802276,"results":"43","hashOfConfig":"44"},{"size":2017,"mtime":1610197296983,"results":"45","hashOfConfig":"44"},{"size":463,"mtime":1610026105370,"results":"46","hashOfConfig":"44"},{"size":2178,"mtime":1609605668315,"results":"47","hashOfConfig":"44"},{"size":4968,"mtime":1609693072891,"results":"48","hashOfConfig":"44"},{"size":6042,"mtime":1609147378233,"results":"49","hashOfConfig":"44"},{"size":1563,"mtime":1610097982868,"results":"50","hashOfConfig":"44"},{"size":4589,"mtime":1608724734557,"results":"51","hashOfConfig":"44"},{"size":792,"mtime":1608799587288,"results":"52","hashOfConfig":"44"},{"size":2187,"mtime":1609665906928,"results":"53","hashOfConfig":"44"},{"size":425,"mtime":1608890663144,"results":"54","hashOfConfig":"44"},{"size":614,"mtime":1610141672835,"results":"55","hashOfConfig":"44"},{"size":105,"mtime":1608848462800,"results":"56","hashOfConfig":"44"},{"size":2110,"mtime":1609080271355,"results":"57","hashOfConfig":"44"},{"size":109,"mtime":1609080271356,"results":"58","hashOfConfig":"44"},{"size":4135,"mtime":1609110895221,"results":"59","hashOfConfig":"44"},{"size":837,"mtime":1609111776421,"results":"60","hashOfConfig":"44"},{"size":359,"mtime":1609111873258,"results":"61","hashOfConfig":"44"},{"size":2581,"mtime":1610192629255,"results":"62","hashOfConfig":"44"},{"size":4081,"mtime":1610097821401,"results":"63","hashOfConfig":"44"},{"size":4708,"mtime":1610097814869,"results":"64","hashOfConfig":"44"},{"size":2661,"mtime":1609695788271,"results":"65","hashOfConfig":"44"},{"size":4500,"mtime":1610097818664,"results":"66","hashOfConfig":"44"},{"size":1463,"mtime":1609693453885,"results":"67","hashOfConfig":"44"},{"size":4149,"mtime":1610097824135,"results":"68","hashOfConfig":"44"},{"size":665,"mtime":1609693453885,"results":"69","hashOfConfig":"44"},{"size":947,"mtime":1610026612898,"results":"70","hashOfConfig":"44"},{"size":748,"mtime":1609776209345,"results":"71","hashOfConfig":"44"},{"size":3880,"mtime":1610210335617,"results":"72","hashOfConfig":"44"},{"size":109,"mtime":1609777155673,"results":"73","hashOfConfig":"44"},{"size":799,"mtime":1610210150111,"results":"74","hashOfConfig":"44"},{"size":213,"mtime":1610192148737,"results":"75","hashOfConfig":"44"},{"size":412,"mtime":1610191284535,"results":"76","hashOfConfig":"44"},{"size":1366,"mtime":1610193649403,"results":"77","hashOfConfig":"44"},{"size":884,"mtime":1610049531415,"results":"78","hashOfConfig":"44"},{"size":3715,"mtime":1610210092638,"results":"79","hashOfConfig":"44"},{"size":2291,"mtime":1610057665930,"results":"80","hashOfConfig":"44"},{"size":2163,"mtime":1610210114564,"results":"81","hashOfConfig":"44"},{"size":2463,"mtime":1610196357152,"results":"82","hashOfConfig":"44"},{"size":388,"mtime":1610192919098,"results":"83","hashOfConfig":"44"},{"size":7714,"mtime":1610197010628,"results":"84","hashOfConfig":"44"},{"size":10039,"mtime":1610196884254,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1cla2w0",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"88"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":2,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"88"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"88"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"88"},"C:\\dev\\stypendia\\client\\src\\index.js",[],["185","186"],"C:\\dev\\stypendia\\client\\src\\App.js",[],"C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\Layout.js",[],"C:\\dev\\stypendia\\client\\src\\components\\commonLayout\\MainMenu.js",["187"],"import React, { useContext, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { leftMenuItems, rightMenuItems } from '../../items';\r\nimport AuthContext from '../../context/auth/authContext';\r\n\r\n\r\nconst MainMenu = ({ history }) => {\r\n\r\n\r\n  const [activeItem, setActiveItem] = useState('home');\r\n  const [hasOwnSub, setHasOwnSub] = useState(false);\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { isLoggedIn, logOut } = authContext;\r\n\r\n\r\n  return (\r\n    <Menu icon='labeled' style={styles.main}>\r\n      {leftMenuItems\r\n        .filter(\r\n          (item) =>\r\n            (item.noOwnSubDisplay === !hasOwnSub ||\r\n              item.hasOwnSubDisplay === hasOwnSub) &&\r\n            item.isLoggedInDisplay === isLoggedIn\r\n        )\r\n        .map((item) => (\r\n          <Link to={item.url} key={item.id}>\r\n            <Menu.Item\r\n              as='div'\r\n              icon={item.icon}\r\n              content={item.title}\r\n              name={item.name}\r\n              active={activeItem === item.name}\r\n              onClick={() => setActiveItem(item.name)}\r\n            />\r\n          </Link>\r\n        ))}\r\n\r\n      <Menu.Menu position='right' style={styles.right}>\r\n        {rightMenuItems\r\n          .filter((item) => item.isLoggedInDisplay === isLoggedIn)\r\n          .map((item) => (\r\n            <Link to={item.url} key={item.id}>\r\n              <Menu.Item\r\n                as='div'\r\n                icon={item.icon}\r\n                content={item.title}\r\n                name={item.name}\r\n                active={activeItem === item.name}\r\n                onClick={() => {\r\n                  item.name === 'logout'\r\n                    ? logOut()\r\n                    : setActiveItem(item.name);\r\n                }}\r\n              />\r\n            </Link>\r\n          ))}\r\n      </Menu.Menu>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  main: {\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    width: '100%',\r\n    zIndex: 100,\r\n  },\r\n  right: {\r\n    position: 'fixed',\r\n    top: 0,\r\n    right: 0,\r\n    zIndex: 100,\r\n    marginLeft: 0,\r\n    marginRight: 0,\r\n  },\r\n};\r\nexport default MainMenu;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\login.js",["188"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { loginInputs } from '../inputs';\r\n\r\nconst Login = ({ history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .post(`/api/v1/users/login`, body, headers)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n\r\n      })\r\n      .catch((err) => {\r\n\r\n        if (err.response.data.forcePassChange) {\r\n\r\n          addAlert(err.response.data);\r\n          setIsLoading(false);\r\n          history.push(\r\n            `/reset?id=${err.response.data.resetId}&token=${err.response.data.token}`\r\n          );\r\n          return\r\n        }\r\n\r\n\r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Title content='Logowanie' />\r\n      <Segment placeholder style={styles.main} size='large'>\r\n        <Grid columns={2} relaxed='very' stackable>\r\n          <Grid.Column>\r\n            <Form>\r\n              {loginInputs.map((input) => {\r\n                return (\r\n                  <div key={input.id}>\r\n                    <Form.Input\r\n                      onChange={(e) => handleOnChange(e)}\r\n                      required\r\n                      style={styles.input}\r\n                      icon={input.icon}\r\n                      iconPosition='left'\r\n                      label={input.label}\r\n                      placeholder={input.placeholder}\r\n                      type={input.type}\r\n                      name={input.name}\r\n                    />\r\n\r\n                    {errors && errors[input.name] && (\r\n                      <Label\r\n                        basic\r\n                        color='red'\r\n                        pointing='above'\r\n                        key={input.id}\r\n                        style={styles.small}\r\n                      >\r\n                        {errors[input.name]}\r\n                      </Label>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n              <span>{}</span>\r\n              <Button\r\n                loading={isLoading}\r\n                type='submit'\r\n                content='Zaloguj się'\r\n                primary\r\n                size='large'\r\n                onClick={handleOnClick}\r\n              />\r\n            </Form>\r\n            <Link to='/resetsend' style={styles.link}>\r\n              <div style={styles.buttonWrapper}>\r\n                <div style={styles.span}>Zapomniałeś hasła?</div>\r\n                <Button content='Resetuj hasło' icon='recycle' size='mini' />\r\n              </div>\r\n            </Link>\r\n          </Grid.Column>\r\n\r\n          <Grid.Column verticalAlign='middle'>\r\n            <Link to='/register'>\r\n              <Button content='Zarejestruj się' icon='user plus' size='big' />\r\n            </Link>\r\n          </Grid.Column>\r\n        </Grid>\r\n\r\n        <Divider vertical>lub</Divider>\r\n      </Segment>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  main: {\r\n    marginTop: '7rem',\r\n    width: '95%',\r\n    marginBottom: '5rem',\r\n  },\r\n  column: {},\r\n  buttonWrapper: {\r\n    marginTop: '10px',\r\n  },\r\n  ol: {\r\n    fontSize: '.85rem',\r\n    color: '#666',\r\n  },\r\n  intro: {\r\n    fontSize: '.85rem',\r\n    marginLeft: '1.8rem',\r\n    marginTop: '2rem',\r\n    color: '#666',\r\n  },\r\n  input: {\r\n    width: '290px',\r\n    marginLeft: '-35px',\r\n    marginBottom: '20px',\r\n  },\r\n  small: {\r\n    fontSize: '.9rem',\r\n    textAlign: 'center',\r\n    transform: 'translateY(-35px)',\r\n    color: 'red',\r\n  },\r\n\r\n  span: {\r\n    fontSize: '1rem',\r\n  },\r\n  link: {},\r\n};\r\n\r\nexport default Login;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\register.js",["189","190"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Container,\r\n  Divider,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Rodo from '../components/Rodo';\r\nimport Title from '../components/Title';\r\nimport { registerInputs } from '../inputs';\r\nimport AlertContext from '../context/alert/alertContext';\r\n\r\nconst Register = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n  isLoggedIn && props.history.push('/');\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isRodoChecked, setIsRodoChecked] = useState(false);\r\n  const [isRegulationsChecked, setIsRegulationsChecked] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n  }, []);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .post(`${process.env.REACT_APP_ORIGIN}/api/v1/users`, body, headers)\r\n      .then((data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          setIsLoading(false);\r\n          setTimeout(() => props.history.push('/login'), 1500);\r\n          addAlert(data.data);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        setErrors(err.response.data);\r\n        addAlert(err.response.data);\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <div style={styles.main}>\r\n      <Title content='Dodawanie konta' />\r\n      <Segment placeholder size='large'>\r\n        <Grid columns={2} relaxed='very' stackable>\r\n          <Grid.Column textAlign='left' verticalAlign='middle'>\r\n            <Header textAlign='center'>Potwierdź niezbędne oświadczenia</Header>\r\n\r\n            <Checkbox\r\n              onChange={() => setIsRegulationsChecked(!isRegulationsChecked)}\r\n              // value={isRegulationsChecked}\r\n              checked={isRegulationsChecked}\r\n              label={\r\n                <label>\r\n                  Oświadczam, iż zapoznałam/em się z regulaminem i akceptuję\r\n                  jego postanowienia <span style={{ color: 'red' }}>*</span>\r\n                </label>\r\n              }\r\n            />\r\n\r\n            <Rodo />\r\n\r\n            <Checkbox\r\n              onChange={() => setIsRodoChecked(!isRodoChecked)}\r\n              // value={isRodoChecked}\r\n              checked={isRodoChecked}\r\n              style={{ marginBottom: '30px' }}\r\n              required\r\n              label={\r\n                <label>\r\n                  Oświadczam, iż zapoznałam/em się z powyższą informacją\r\n                  <span style={{ color: 'red' }}> *</span>\r\n                </label>\r\n              }\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column style={styles.column}>\r\n            <Container>\r\n              <Header>... podaj swoje dane</Header>\r\n              <Form>\r\n                {registerInputs.map((input) => {\r\n                  return (\r\n                    <div key={input.id}>\r\n                      <Form.Input\r\n                        loading={isLoading}\r\n                        onChange={(e) => handleOnChange(e)}\r\n                        required\r\n                        style={styles.input}\r\n                        icon={input.icon}\r\n                        iconPosition='left'\r\n                        label={input.label}\r\n                        placeholder={input.placeholder}\r\n                        type={input.type}\r\n                        name={input.name}\r\n                      />\r\n                      {errors && errors[input.name] && (\r\n                        <Label\r\n                          basic\r\n                          color='red'\r\n                          pointing='above'\r\n                          key={input.id}\r\n                          style={styles.small}\r\n                        >\r\n                          {errors[input.name]}\r\n                        </Label>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <Button\r\n                  loading={isLoading}\r\n                  type='submit'\r\n                  content='Zarejestruj się'\r\n                  primary\r\n                  size='large'\r\n                  onClick={handleOnClick}\r\n                  disabled={\r\n                    !isRegulationsChecked || !isRodoChecked ? true : false\r\n                  }\r\n                />\r\n              </Form>\r\n              <Link to='/login'>\r\n                <div style={styles.buttonWrapper}>\r\n                  <div style={styles.span}>Masz już konto?</div>\r\n                  <Button content='Zaloguj się' icon='user' size='mini' />\r\n                </div>\r\n              </Link>\r\n            </Container>\r\n          </Grid.Column>\r\n        </Grid>\r\n\r\n        <Divider vertical>oraz</Divider>\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  main: {\r\n    marginTop: '7rem',\r\n    width: '95%',\r\n    marginBottom: '5rem',\r\n  },\r\n\r\n  buttonWrapper: {\r\n    marginTop: '20px',\r\n  },\r\n  span: {\r\n    fontSize: '1rem',\r\n  },\r\n  ol: {\r\n    fontSize: '.85rem',\r\n    color: '#666',\r\n  },\r\n  intro: {\r\n    fontSize: '.85rem',\r\n    marginLeft: '1.8rem',\r\n    marginTop: '2rem',\r\n    color: '#666',\r\n  },\r\n\r\n  input: {\r\n    width: '290px',\r\n    marginLeft: '-35px',\r\n    marginBottom: '20px',\r\n  },\r\n  small: {\r\n    fontSize: '.9rem',\r\n    textAlign: 'center',\r\n    transform: 'translateY(-35px)',\r\n    color: 'red',\r\n  },\r\n};\r\n\r\nexport default Register;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\home.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Rodo.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Title.js",[],"C:\\dev\\stypendia\\client\\src\\context\\auth\\AuthState.js",["191"],"import React, { useContext, useEffect, useReducer } from 'react';\r\nimport authReducer from './authReducer';\r\nimport AuthContext from './authContext';\r\nimport axios from 'axios';\r\nimport AlertContext from '../../context/alert/alertContext';\r\n\r\nimport { SET_USER, CHECK_IS_LOGGED_IN, LOGOUT_USER } from '../types';\r\n\r\nconst AuthState = (props) => {\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n\r\n\r\n\r\n  const initialState = {\r\n    user: null,\r\n    isLoggedIn: false,\r\n  };\r\n\r\n  const checkIsAuthenticated = async () => {\r\n    const result = await (\r\n      await fetch('http://localhost:5003/api/v1/users/me', {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n    ).json();\r\n    result.resStatus === 'success' ? setIsLoggedIn(true) : setIsLoggedIn(false);\r\n    setUser(result.user);\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n  }, []);\r\n\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  const setUser = (user) => {\r\n    dispatch({\r\n      type: SET_USER,\r\n      payload: user,\r\n    });\r\n  };\r\n\r\n  const setIsLoggedIn = (is) => {\r\n    dispatch({\r\n      type: CHECK_IS_LOGGED_IN,\r\n      payload: is,\r\n    });\r\n  };\r\n\r\n  const logOut = () => {\r\n\r\n    axios\r\n      .get('/api/v1/users/logout')\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n           await props?.history?.push('/login');\r\n        }\r\n      })\r\n      .catch(\r\n        (err) => console.log(err.message)\r\n        //   if (err.response.data.alertTitle) {\r\n        //     console.log(err.response.data);\r\n\r\n        //     addAlert(err.response.data);\r\n        //   }\r\n        // });\r\n      );\r\n\r\n    dispatch({\r\n      type: LOGOUT_USER\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user: state.user,\r\n        setUser,\r\n        logOut,\r\n        checkIsAuthenticated,\r\n        isLoggedIn: state.isLoggedIn,\r\n            }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthState;\r\n","C:\\dev\\stypendia\\client\\src\\context\\auth\\authReducer.js",[],"C:\\dev\\stypendia\\client\\src\\context\\types.js",[],"C:\\dev\\stypendia\\client\\src\\context\\auth\\authContext.js",[],"C:\\dev\\stypendia\\client\\src\\components\\alert\\Alert.js",["192"],"import React, { useContext } from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\nimport './Alert.css';\r\nimport AlertContext from '../../context/alert/alertContext';\r\n\r\nconst Alert = (props) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { alerts, deleteAlert } = alertContext;\r\n\r\n  return (\r\n    <div className={`notification-container ${props.position}`}>\r\n      {alerts.map((alert, i) => {\r\n        if (props.autoDeleteInterval) {\r\n          setInterval(() => {\r\n            deleteAlert(alert.id);\r\n          }, props.autoDeleteInterval);\r\n        }\r\n\r\n        switch (alert.resStatus) {\r\n          case 'error':\r\n            return (\r\n              <div key={alert.id} className={`${props.position}`}>\r\n                <Message error className='toast'>\r\n                  <Message.Header>{alert.alertTitle}</Message.Header>\r\n                  <p>{alert.msgPL}</p>\r\n                </Message>\r\n              </div>\r\n            );\r\n          case 'info':\r\n            return (\r\n              <div key={alert.id} className={`${props.position}`}>\r\n                <Message info className='toast'>\r\n                  <Message.Header>{alert.alertTitle}</Message.Header>\r\n                  <p>{alert.msgPL}</p>\r\n                </Message>\r\n              </div>\r\n            );\r\n\r\n          case 'warning':\r\n            return (\r\n              <div key={alert.id} className={`${props.position}`}>\r\n                <Message warning className='toast'>\r\n                  <Message.Header>{alert.alertTitle}</Message.Header>\r\n                  <p>{alert.msgPL}</p>\r\n                </Message>\r\n              </div>\r\n            );\r\n\r\n          case 'success':\r\n            return (\r\n              <div key={alert.id} className={`${props.position}`}>\r\n                <Message success className='toast'>\r\n                  <Message.Header>{alert.alertTitle}</Message.Header>\r\n                  <p>{alert.msgPL}</p>\r\n                </Message>\r\n              </div>\r\n            );\r\n\r\n          default:\r\n            break;\r\n        }\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","C:\\dev\\stypendia\\client\\src\\context\\alert\\alertContext.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\verify.js",["193","194"],"import axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { Link } from 'react-router-dom';\r\nimport { verItems } from '../items';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Header,\r\n  Icon,\r\n  List,\r\n  Loader,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Title from '../components/Title';\r\n\r\nconst Verify = ({ location: { search }, history }) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { checkIsAuthenticated, isLoggedIn } = authContext;\r\n  isLoggedIn && history.push('/');\r\n\r\n  const [query, setQuery] = useState(search);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    axios\r\n      .post(`/api/v1/email/verify${query}`)\r\n      .then((data) => {\r\n        setIsLoading(false);\r\n        setIsSuccess(true);\r\n        addAlert(data.data);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        addAlert(err.response.data);\r\n      });\r\n  }, [isLoggedIn]);\r\n\r\n  return (\r\n    <>\r\n      <Title content='Weryfikacja konta' />\r\n      <Loader active={isLoading} size='huge'>\r\n        Weryfikujemy\r\n      </Loader>\r\n\r\n      {!isLoading && !isSuccess && (\r\n        <Container style={styles.msg}>\r\n          <Message error size='big' floating>\r\n            <Message.Header>Błąd weryfikacji danych</Message.Header>\r\n            <p>\r\n              Nie udało się potwierdzić konta przy użyciu tego linka. Być może\r\n              link jest już przestarzały lub uszkodzony. Możesz skorzystać z\r\n              mechanizmu ponownej wysyłki linka korzystając z tej strony:\r\n              <br />\r\n              <br />\r\n              <Link to='/resend'>\r\n                <Button primary size='large'>\r\n                  Ponownie wyślij link\r\n                </Button>\r\n              </Link>\r\n            </p>\r\n          </Message>\r\n        </Container>\r\n      )}\r\n\r\n      {!isLoading && isSuccess && (\r\n        <>\r\n          <Segment placeholder style={styles.main} size='large'>\r\n            <Message success size='medium' floating>\r\n              <Message.Header>Potwierdzono konto!!!</Message.Header>\r\n              <p>\r\n                Udało się potwierdzić konto. Od tej chili możesz się zalogować i\r\n                złożyć wniosek.\r\n              </p>\r\n            </Message>\r\n\r\n            <List\r\n              size='large'\r\n              selection\r\n              animated\r\n              divided\r\n              verticalAlign='middle'\r\n              hor\r\n            >\r\n              {verItems.map((item) => (\r\n                <List.Item key={item.id}>\r\n                  <Link to={item.to}>\r\n                    <List.Content floated='right'>\r\n                      <Button\r\n                        size={item.button === 'Logowanie' ? 'big' : null}\r\n                        primary={item.button === 'Logowanie'}\r\n                        icon\r\n                        labelPosition='right'\r\n                      >\r\n                        {item.button}\r\n                        <Icon name='right arrow' />\r\n                      </Button>\r\n                    </List.Content>\r\n                    <List.Content verticalAlign='bottom' floated='left'>\r\n                      <Header as='h3' style={styles.itemHeader}>\r\n                        <Icon size='large' name={item.icon} /> {item.name}\r\n                      </Header>\r\n                    </List.Content>\r\n                  </Link>\r\n                </List.Item>\r\n              ))}\r\n            </List>\r\n          </Segment>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  main: {\r\n    marginTop: '8rem',\r\n  },\r\n  leadingHeader: {\r\n    marginBottom: '5rem',\r\n    marginTop: '8rem',\r\n  },\r\n  itemHeader: {\r\n    transform: 'translateY(8px)',\r\n  },\r\n  msg: {\r\n    textAlign: 'left',\r\n    marginTop: '15%',\r\n  },\r\n};\r\n\r\nexport default Verify;\r\n","C:\\dev\\stypendia\\client\\src\\context\\alert\\AlertState.js",[],"C:\\dev\\stypendia\\client\\src\\context\\alert\\alertReducer.js",[],"C:\\dev\\stypendia\\client\\src\\items.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\resend.js",["195"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\n\r\nconst Resend = ({ history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [email, setEmail] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .post(`/api/v1/email/resend`, { email }, headers)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n  \r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Title content='Potwierdzanie konta' />\r\n      <Segment placeholder style={styles.main} size='large'>\r\n        <Message style={styles.msg} info size='small' floating>\r\n          <Message.Header>\r\n            Ponowne wysłanie linka do potwierdzenia konta\r\n          </Message.Header>\r\n          <p>\r\n            Strona służy do ponownego wysłania linka potwierdzającego konto,\r\n            jeżeli konto już założyłaś/eś, ale nie skorzystałaś/eś z niego w\r\n            odpowiednim czasie. Link zostanie przesłany na podany adres email i\r\n            będzie ważny przez <strong>12 godzin</strong> . Jeżeli nie znajdziesz linka sprawdź\r\n            folder <strong> spam</strong> w Twojej poczcie.\r\n          </p>\r\n        </Message>\r\n        <Grid columns={1} relaxed='very' stackable>\r\n          <Grid.Column>\r\n            <Form>\r\n              <Form.Input\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n                style={styles.input}\r\n                icon='mail'\r\n                iconPosition='left'\r\n                label='Email'\r\n                placeholder='Podaj email'\r\n                type='email'\r\n                name='email'\r\n              />\r\n\r\n              {errors && errors.email && (\r\n                <Label basic color='red' pointing='above' style={styles.small}>\r\n                  {errors.email}\r\n                </Label>\r\n              )}\r\n\r\n              <Button\r\n                loading={isLoading}\r\n                type='submit'\r\n                content='Wyślij link'\r\n                primary\r\n                size='large'\r\n                onClick={handleOnClick}\r\n              />\r\n            </Form>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    </Container>\r\n  );\r\n};\r\nconst styles = {\r\n  main: {\r\n    marginTop: '7rem',\r\n    width: '95%',\r\n    marginBottom: '5rem',\r\n  },\r\n  column: {},\r\n  buttonWrapper: {\r\n    marginTop: '10px',\r\n  },\r\n  ol: {\r\n    fontSize: '.85rem',\r\n    color: '#666',\r\n  },\r\n  intro: {\r\n    fontSize: '.85rem',\r\n    marginLeft: '1.8rem',\r\n    marginTop: '2rem',\r\n    color: '#666',\r\n  },\r\n  input: {\r\n    width: '290px',\r\n    marginLeft: '-35px',\r\n    marginBottom: '20px',\r\n  },\r\n  small: {\r\n    fontSize: '.9rem',\r\n    textAlign: 'center',\r\n    transform: 'translateY(-35px)',\r\n    color: 'red',\r\n  },\r\n  msg: {\r\n    textAlign: 'left',\r\n    marginBottom: '30px',\r\n  },\r\n};\r\n\r\nexport default Resend;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\resetSend.js",["196"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { resetReqInputs } from '../inputs';\r\n\r\nconst ResetSend = ({ history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .post(`/api/v1/password/email`, {...body}, headers)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/login');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n \r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n    const handleOnChange = (e) => {\r\n      e.preventDefault();\r\n      setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n    };\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <Title content='Resetowanie hasła' />\r\n      <Segment placeholder style={styles.main} size='large'>\r\n        <Message style={styles.msg} info size='small' floating>\r\n          <Message.Header>Resetowanie hasła</Message.Header>\r\n          <p>\r\n            Strona służy do resetowania hasła do konta. Zostanie wygenerowany\r\n            specjalny link oraz przesłany na podany adres email i będzie\r\n            ważny przez <strong>12 godzin</strong>. Jeżeli nie znajdziesz linka\r\n            sprawdź folder <strong> spam</strong> w Twojej poczcie. W formularzu poniżej podaj nazwę użytkownika oraz email, które podałaś/eś w trakcie rejestracji.\r\n          </p>\r\n        </Message>\r\n        <Grid columns={1} relaxed='very' stackable>\r\n          <Grid.Column>\r\n            <Form>\r\n              {resetReqInputs.map((input) => {\r\n                return (\r\n                  <div key={input.id}>\r\n                    <Form.Input\r\n                      onChange={(e) => handleOnChange(e)}\r\n                      required\r\n                      style={styles.input}\r\n                      icon={input.icon}\r\n                      iconPosition='left'\r\n                      label={input.label}\r\n                      placeholder={input.placeholder}\r\n                      type={input.type}\r\n                      name={input.name}\r\n                    />\r\n\r\n                    {errors && errors[input.name] && (\r\n                      <Label\r\n                        basic\r\n                        color='red'\r\n                        pointing='above'\r\n                        key={input.id}\r\n                        style={styles.small}\r\n                      >\r\n                        {errors[input.name]}\r\n                      </Label>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n              <Button\r\n                loading={isLoading}\r\n                type='submit'\r\n                content='Wyślij link'\r\n                primary\r\n                size='large'\r\n                onClick={handleOnClick}\r\n              />\r\n            </Form>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    </Container>\r\n  );\r\n};\r\nconst styles = {\r\n  main: {\r\n    marginTop: '7rem',\r\n    width: '95%',\r\n    marginBottom: '5rem',\r\n  },\r\n  column: {},\r\n  buttonWrapper: {\r\n    marginTop: '10px',\r\n  },\r\n  ol: {\r\n    fontSize: '.85rem',\r\n    color: '#666',\r\n  },\r\n  intro: {\r\n    fontSize: '.85rem',\r\n    marginLeft: '1.8rem',\r\n    marginTop: '2rem',\r\n    color: '#666',\r\n  },\r\n  input: {\r\n    width: '290px',\r\n    marginLeft: '-35px',\r\n    marginBottom: '20px',\r\n  },\r\n  small: {\r\n    fontSize: '.9rem',\r\n    textAlign: 'center',\r\n    transform: 'translateY(-35px)',\r\n    color: 'red',\r\n  },\r\n  msg: {\r\n    textAlign: 'left',\r\n    marginBottom: '30px',\r\n  },\r\n};\r\n\r\nexport default ResetSend;\r\n","C:\\dev\\stypendia\\client\\src\\inputs.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\reset.js",["197"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Label,\r\n  Message,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport Title from '../components/Title';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport AuthContext from '../context/auth/authContext';\r\nimport { resetInputs } from '../inputs';\r\n\r\nconst Reset = ({ location, history }) => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { setUser, checkIsAuthenticated, isLoggedIn } = authContext;\r\n\r\n  const [body, setBody] = useState({});\r\n  const [errors, setErrors] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkIsAuthenticated();\r\n    isLoggedIn && history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  const handleOnClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .post(`/api/v1/password/reset${location.search}`, body, headers)\r\n      .then(async (data) => {\r\n        if (data.data.resStatus || data.data.resStatus === 'success') {\r\n          addAlert(data.data);\r\n          setUser(data.data.user);\r\n          await setIsLoading(false);\r\n          history.push('/login');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n   \r\n        if (err.response.data.alertTitle) {\r\n          setIsLoading(false);\r\n          addAlert(err.response.data);\r\n        }\r\n\r\n        setErrors(err.response.data);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n  const handleOnChange = (e) => {\r\n    e.preventDefault();\r\n    setBody((prevBody) => ({ ...prevBody, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Title content='Nowe hasło' />\r\n      <Segment placeholder style={styles.main} size='large'>\r\n        <Message style={styles.msg} info size='small' floating>\r\n          <Message.Header>Nowe hasło</Message.Header>\r\n          <p>\r\n            Strona służy do nadawania nowego hasła. Podaj niezbędne dane i\r\n            zapisz zmiany. Pamiętaj, aby nowe hasło posiadało co najmniej 1\r\n            wielką literę, 1 małą oraz 1 cyfrę.\r\n          </p>\r\n        </Message>\r\n        <Grid columns={1} relaxed='very' stackable>\r\n          <Grid.Column>\r\n            <Form>\r\n              {resetInputs.map((input) => {\r\n                return (\r\n                  <div key={input.id}>\r\n                    <Form.Input\r\n                      onChange={(e) => handleOnChange(e)}\r\n                      required\r\n                      style={styles.input}\r\n                      icon={input.icon}\r\n                      iconPosition='left'\r\n                      label={input.label}\r\n                      placeholder={input.placeholder}\r\n                      type={input.type}\r\n                      name={input.name}\r\n                    />\r\n\r\n                    {errors && errors[input.name] && (\r\n                      <Label\r\n                        basic\r\n                        color='red'\r\n                        pointing='above'\r\n                        key={input.id}\r\n                        style={styles.small}\r\n                      >\r\n                        {errors[input.name]}\r\n                      </Label>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n              <Button\r\n                loading={isLoading}\r\n                type='submit'\r\n                content='Zapisz nowe hasło'\r\n                primary\r\n                size='large'\r\n                onClick={handleOnClick}\r\n              />\r\n            </Form>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    </Container>\r\n  );\r\n};\r\nconst styles = {\r\n  main: {\r\n    marginTop: '7rem',\r\n    width: '95%',\r\n    marginBottom: '5rem',\r\n  },\r\n  column: {},\r\n  buttonWrapper: {\r\n    marginTop: '10px',\r\n  },\r\n  ol: {\r\n    fontSize: '.85rem',\r\n    color: '#666',\r\n  },\r\n  intro: {\r\n    fontSize: '.85rem',\r\n    marginLeft: '1.8rem',\r\n    marginTop: '2rem',\r\n    color: '#666',\r\n  },\r\n  input: {\r\n    width: '290px',\r\n    marginLeft: '-35px',\r\n    marginBottom: '20px',\r\n  },\r\n  small: {\r\n    fontSize: '.9rem',\r\n    textAlign: 'center',\r\n    transform: 'translateY(-35px)',\r\n    color: 'red',\r\n  },\r\n  msg: {\r\n    textAlign: 'left',\r\n    marginBottom: '30px',\r\n  },\r\n};\r\n\r\nexport default Reset;\r\n","C:\\dev\\stypendia\\client\\src\\pages\\logout.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\changePass.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\protectedRoute.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\submit.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\subALayout.js",["198","199"],"import React from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Header,\r\n  Label,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport { Wrapper } from '../pages/styles/submit.styles';\r\nimport Title from './Title';\r\n\r\nconst SubALayout = ({ children, leadHeader }) => {\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Title content='Nowy wniosek' />\r\n        <Wrapper>\r\n          <Segment placeholder size='large'>\r\n            <Label attached='top'>\r\n              <Header>{leadHeader}</Header>\r\n            </Label>\r\n            <Grid\r\n              className='container'\r\n              centered\r\n              columns={2}\r\n              relaxed='very'\r\n              stackable\r\n            >\r\n              {children}\r\n            </Grid>\r\n          </Segment>\r\n        </Wrapper>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SubALayout;\r\n","C:\\dev\\stypendia\\client\\src\\context\\submit\\submitState.js",[],"C:\\dev\\stypendia\\client\\src\\context\\submit\\submitContext.js",[],"C:\\dev\\stypendia\\client\\src\\context\\submit\\submitReducer.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\newSubmit.styles.js",[],"C:\\dev\\stypendia\\client\\src\\pages\\styles\\home.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\Nav.js",[],"C:\\dev\\stypendia\\client\\src\\components\\allUsersSubmits.js",["200","201","202","203"],"C:\\dev\\stypendia\\client\\src\\components\\AllUsersSubmits.js",["204"],"C:\\dev\\stypendia\\client\\src\\components\\AllUsersDrafts.js",["205","206"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport AlertContext from '../context/alert/alertContext';\r\nimport { Button, Card, Icon, Image, Label } from 'semantic-ui-react';\r\n\r\nconst AllUsersDrafts = () => {\r\n  const alertContext = useContext(AlertContext);\r\n  const { addAlert } = alertContext;\r\n\r\n  const [drafts, setDrafts] = useState([]);\r\n\r\n  const setAllUsersDrafts = () => {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    axios\r\n      .get('/api/v1/drafts/oneuser', headers)\r\n      .then((data) => {console.log(data); setDrafts(data.data.drafts)})\r\n      .catch((err) => {\r\n        if (err.response.data) {\r\n          addAlert(err.response.data);\r\n          return;\r\n        }\r\n      });\r\n\r\n    // console.log(submits);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setAllUsersDrafts();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Card.Group itemsPerRow={5} stackable className='cards'>\r\n        {drafts.length > 0 ? (\r\n          drafts.map((s) => (\r\n            <div key={s.id}>\r\n              <Card className='card'>\r\n                <Card.Content textAlign='left'>\r\n                <Label className='label'basic  content={'wersja robocza'} ></Label>\r\n                  <Image\r\n                    floated='right'\r\n                    size='mini'\r\n                    src='https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'\r\n                  />\r\n                  <Card.Header>{s.pupilFirstName} {s.pupilLastName}</Card.Header>\r\n                  <Card.Meta>{s.schoolType}</Card.Meta>\r\n                  <Card.Description>\r\n                    {s.schoolName}\r\n                  </Card.Description>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                  <div className='ui two buttons'>\r\n\r\n                    <Button color='orange'>\r\n                      Edytuj\r\n                    </Button>\r\n                    <Button basic color='red'>\r\n                      Usuń\r\n                    </Button>\r\n                  </div>\r\n                </Card.Content>\r\n              </Card>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <h1>Brak wniosków</h1>\r\n        )}\r\n      </Card.Group>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllUsersDrafts;\r\n","C:\\dev\\stypendia\\client\\src\\components\\NewCallToAction.js",["207","208","209","210","211"],"C:\\dev\\stypendia\\client\\src\\pages\\submit.js",["212","213","214","215","216","217","218","219"],"import React, { useState } from 'react';\r\nimport { Grid, Menu, Segment } from 'semantic-ui-react';\r\nimport SubA_I_II from '../components/submit/subA_I_II';\r\nimport SubA_III_IV from '../components/submit/subA_III_IV';\r\nimport Nav from '../components/Nav';\r\nimport { Wrapper } from './styles/newSubmit.styles';\r\n\r\nconst Submit = ({ mode }) => {\r\n  const [activeItem, setActiveItem] = useState(1);\r\n\r\n  const renderComponent = () => {\r\n    if (activeItem>5) setActiveItem(1)\r\n    if (activeItem<1) setActiveItem(1)\r\n    switch (activeItem) {\r\n      case 1:\r\n        return <SubA_I_II />;\r\n      case 2:\r\n        return <SubA_III_IV />;\r\n      case 3:\r\n        return <SubA_III_IV />;\r\n      case 3:\r\n        return <SubA_III_IV />;\r\n      case 5:\r\n        return <SubA_III_IV />;\r\n\r\n      default:\r\n        return <SubA_I_II />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n\r\n        <Grid>\r\n          <Grid.Column width={4}>\r\n            <Menu fluid vertical tabular>\r\n              <Menu.Item\r\n                icon='student'\r\n                name='Dane ucznia'\r\n                active={activeItem === 1}\r\n                onClick={() => setActiveItem(1)}\r\n              />\r\n              <Menu.Item\r\n                icon='university'\r\n                name='dane szkoły'\r\n                content='Dane szkoły'\r\n                active={activeItem === 2}\r\n                onClick={() => setActiveItem(2)}\r\n              />\r\n              <Menu.Item\r\n                icon='university'\r\n                name='dane szkoły'\r\n                content='Dane szkoły'\r\n                active={activeItem === 3}\r\n                onClick={() => setActiveItem(3)}\r\n              />\r\n              <Menu.Item\r\n                icon='university'\r\n                name='dane szkoły'\r\n                content='Dane szkoły'\r\n                active={activeItem === 4}\r\n                onClick={() => setActiveItem(4)}\r\n              />\r\n              <Menu.Item\r\n                icon='university'\r\n                name='dane szkoły'\r\n                content='Dane szkoły'\r\n                active={activeItem === 5}\r\n                onClick={() => setActiveItem(5)}\r\n              />\r\n            </Menu>\r\n          </Grid.Column>\r\n\r\n          <Grid.Column stretched width={12}>\r\n            {renderComponent()}\r\n          </Grid.Column>\r\n          <Nav activeItem={activeItem} setActiveItem={setActiveItem}/>\r\n        </Grid>\r\n\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Submit;\r\n","C:\\dev\\stypendia\\client\\src\\components\\styles\\nav.styles.js",[],"C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_I_II.js",["220","221"],"import React, { useContext, useState } from 'react';\r\nimport { Form, Grid, Header, Label } from 'semantic-ui-react';\r\nimport SubALayout from '../subALayout';\r\n\r\nimport AuthContext from '../../context/auth/authContext';\r\nimport SubmitContext from '../../context/submit/submitContext';\r\n\r\nconst options = [\r\n  {\r\n    key: 's',\r\n    text: 'Wybierz status wnioskodawcy',\r\n    value: 'default',\r\n    disabled: true,\r\n  },\r\n  {\r\n    key: 'p',\r\n    text: 'Rodzic/Opiekun prawny',\r\n    value: 0,\r\n  },\r\n  { key: 'u', text: 'Pełnoletni uczeń', value: 1 },\r\n];\r\n\r\nconst SubA_I_II = () => {\r\n  const authContext = useContext(AuthContext);\r\n  const { user } = authContext;\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const {\r\n    newSubmit,\r\n    updateNewSubmit,\r\n    submitMode,\r\n    curSubmit,\r\n    updateCurSubmit,\r\n    submitToWatch,\r\n  } = submitContext;\r\n\r\n  const handleOnChange = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (submitMode === 'edit') {\r\n      console.log('edit');\r\n      await updateCurSubmit({\r\n        ...curSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    } else if (submitMode === 'new') {\r\n      console.log('new');\r\n      await updateNewSubmit({\r\n        ...newSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SubALayout leadHeader='CZĘŚĆ A – INFORMACJE DOTYCZĄCE UCZNIA/UCZENNICY'>\r\n      <Grid.Column className='column'>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          I. DANE OSOBOWE WNIOSKODAWCY:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              label='Imię wnioskodawcy'\r\n              name='firstName'\r\n              icon='user'\r\n              iconPosition='left'\r\n              value={user?.firstName} // usynąć znak zapytania\r\n            />\r\n            <Form.Input\r\n              icon='user'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Nazwisko wnioskodawcy'\r\n              name='lastName'\r\n              value={user?.lastName}\r\n            />\r\n\r\n            <Form.Input\r\n              className='input'\r\n              label='Email wnioskodawcy'\r\n              icon='at'\r\n              iconPosition='left'\r\n              placeholder='Podaj email wnioskodawcy'\r\n              name='phone'\r\n              value={user?.email}\r\n            />\r\n            <Form.Input\r\n              className='input'\r\n              label='Numer telefonu wnioskodawcy'\r\n              icon='phone'\r\n              iconPosition='left'\r\n              placeholder='Podaj numer telefonu wnioskodawcy'\r\n              name='phone'\r\n              onChange={(e) => handleOnChange(e)}\r\n              value={\r\n                submitMode === 'edit'\r\n                  ? curSubmit?.phone\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.phone\r\n                  : submitToWatch?.phone\r\n              }\r\n            />\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              icon='box'\r\n              iconPosition='left'\r\n              label='Adres skrzynki ePuap (opcjonalnie)'\r\n              placeholder='Podaj adres ePuap (opcjonalnie)'\r\n              name='epuapAdr'\r\n              value={\r\n                submitMode === 'edit'\r\n                  ? curSubmit?.epuapAdr\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.epuapAdr\r\n                  : submitToWatch?.epuapAdr\r\n              }\r\n            />\r\n\r\n            <div className='select-wrapper'>\r\n              <Header className='select-header' as='h5'>\r\n                Status Wnioskodawcy\r\n              </Header>\r\n              <select\r\n                name='isSelf'\r\n                defaultValue='default'\r\n                onChange={(e) => handleOnChange(e)}\r\n              >\r\n                {options.map((o) => (\r\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                    {o.text}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n      <Grid.Column>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          II. DANE OSOBOWE UCZNIA:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              placeholder='Podaj PESEL ucznia'\r\n              label='PESEL ucznia'\r\n              name='pupilPesel'\r\n              icon='id card outline'\r\n              iconPosition='left'\r\n              value={\r\n                submitMode === 'edit'\r\n                  ? curSubmit?.pupilPesel\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilPesel\r\n                  : submitToWatch?.pupilPesel\r\n              }\r\n            />\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              icon='user'\r\n              iconPosition='left'\r\n              label='Imię ucznia'\r\n              name='pupilFirstName'\r\n              placeholder='Podaj imię ucznia'\r\n              value={\r\n                newSubmit.isSelf === '1'\r\n                  ? user.firstName\r\n                  : submitMode === 'edit'\r\n                  ? curSubmit?.pupilFirstName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilFirstName\r\n                  : submitToWatch?.pupilFirstName\r\n              }\r\n            />\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              icon='user'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Nazwisko ucznia'\r\n              name='pupilLastName'\r\n              placeholder='Podaj nazwisko ucznia'\r\n              value={\r\n                newSubmit.isSelf === '1'\r\n                  ? user.lastName\r\n                  : submitMode === 'edit'\r\n                  ? curSubmit?.pupilLastName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilLastName\r\n                  : submitToWatch?.pupilLastName\r\n              }\r\n            />\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              icon='at'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Email ucznia'\r\n              type='email'\r\n              name='pupilEmail'\r\n              placeholder='Podaj adres email ucznia'\r\n              value={\r\n                newSubmit.isSelf === '1'\r\n                  ? user.email\r\n                  : submitMode === 'edit'\r\n                  ? curSubmit?.pupilEmail\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilEmail\r\n                  : submitToWatch?.pupilEmail\r\n              }\r\n            />\r\n\r\n            <Form.Input\r\n              onChange={(e) => handleOnChange(e)}\r\n              className='input'\r\n              label='Numer telefonu ucznia'\r\n              icon='phone'\r\n              iconPosition='left'\r\n              placeholder='Podaj numer telefonu ucznia'\r\n              type='phone'\r\n              name='pupilPhone'\r\n              value={\r\n                submitMode === 'edit'\r\n                  ? curSubmit?.pupilPhone\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.pupilPhone\r\n                  : submitToWatch?.pupilPhone\r\n              }\r\n            />\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n    </SubALayout>\r\n  );\r\n};\r\n\r\nexport default SubA_I_II;\r\n","C:\\dev\\stypendia\\client\\src\\components\\submit\\subA_III_IV.js",["222","223"],"import React, { useContext, useState } from 'react';\r\nimport { Form, Grid, Header, Segment } from 'semantic-ui-react';\r\nimport SubALayout from '../subALayout';\r\nimport SubmitContext from '../../context/submit/submitContext';\r\nimport Nav from '../Nav';\r\n\r\nconst options = [\r\n  { key: 'a', text: 'Wybierz województwo', value: 'default', disabled: true },\r\n  { key: 's', text: 'śląskie' },\r\n  { key: 'd', text: 'dolnośląskie' },\r\n  { key: 'c', text: 'kujawsko-pomorskie' },\r\n  { key: 'l', text: 'lubelskie' },\r\n  { key: 'f', text: 'lubuskie' },\r\n  { key: 'e', text: 'łódzkie' },\r\n  { key: 'k', text: 'małopolskie' },\r\n  { key: 'w', text: 'mazowieckie' },\r\n  { key: 'o', text: 'opolskie' },\r\n  { key: 'r', text: 'podkarpackie' },\r\n  { key: 'b', text: 'podlaskie' },\r\n  { key: 'g', text: 'pomorskie' },\r\n  { key: 't', text: 'świętokrzyskie' },\r\n  { key: 'n', text: 'warmińsko-mazurskie' },\r\n  { key: 'p', text: 'wielkopolskie' },\r\n  { key: 'z', text: 'zachodniopomorskie' },\r\n  { key: 'B', text: 'podlaskie' },\r\n];\r\nconst optionsC = [\r\n  { key: 'a', text: 'Wybierz profil', value: 'default' , disabled: true},\r\n  { key: 'n', text: 'Nauczyciel', value: 'nauczyciel' , disabled: false},\r\n  { key: 'p', text: 'Pedagog szkolny', value: 'pedagog', disabled: false },\r\n  { key: 'd', text: 'Doradca zawodowy', value: 'doradca' , disabled: false},\r\n];\r\nconst optionsT = [\r\n  { key: 'a', text: 'Wybierz rodzaj szkoły', value: 'default' , disabled: true},\r\n  { key: 'n', text: 'Liceum', value: 'liceum' , disabled: false},\r\n  { key: 'p', text: 'Technikum', value: 'technikum', disabled: false },\r\n\r\n];\r\n\r\nconst SubA_III_IV = () => {\r\n\r\n  const submitContext = useContext(SubmitContext);\r\n  const {\r\n    newSubmit,\r\n    updateNewSubmit,\r\n    submitMode,\r\n    curSubmit,\r\n    updateCurSubmit,\r\n    submitToWatch,\r\n  } = submitContext;\r\n\r\n  const handleOnChange = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (submitMode === 'edit') {\r\n      console.log('edit');\r\n      await updateCurSubmit({\r\n        ...curSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    } else if (submitMode === 'new') {\r\n      console.log('new');\r\n      await updateNewSubmit({\r\n        ...newSubmit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <SubALayout leadHeader='CZĘŚĆ A – INFORMACJE DOTYCZĄCE UCZNIA/UCZENNICY'>\r\n      <Grid.Column className='column'>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          III. DANE SZKOŁY:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              label='Pełna nazwa szkoły'\r\n              name='schoolName'\r\n              icon='building outline'\r\n              placeholder='Podaj pełną nazwę szkoły'\r\n              iconPosition='left'\r\n              onChange={(e) => handleOnChange(e)}\r\n              value={\r\n                submitMode === 'edit'\r\n                  ? curSubmit?.schoolName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.schoolName\r\n                  : submitToWatch?.schoolName\r\n              }\r\n            />\r\n\r\n            <div className='select-wrapper'>\r\n              <Header className='select-header' as='h5'>\r\n                Profil doradcy\r\n              </Header>\r\n              <select\r\n                name='schoolType'\r\n                onChange={(e) => handleOnChange(e)}\r\n                value={\r\n                  submitMode === 'edit'\r\n                    ? curSubmit?.schoolType\r\n                    : submitMode === 'new'\r\n                    ? newSubmit?.schoolType\r\n                    : submitToWatch?.schoolType\r\n                }\r\n                defaultValue='default'\r\n              >\r\n                {optionsT.map((o) => (\r\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                    {o.text}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div className='adress-wrapper'>\r\n              <Header as='h4'>Adres szkoły</Header>\r\n              <Segment>\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='user'\r\n                  iconPosition='left'\r\n                  placeholder='Podaj ulicę'\r\n                  name='schoolStreetName'\r\n                  value={\r\n                    submitMode === 'edit'\r\n                      ? curSubmit?.schoolStreetName\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolStreetName\r\n                      : submitToWatch?.schoolStreetName\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n\r\n                <Form.Input\r\n                  className='input'\r\n                  // label='Adres szkoły (numer domu)'\r\n                  icon='phone'\r\n                  iconPosition='left'\r\n                  placeholder='Podaj numer domu'\r\n                  name='schoolStreetNr'\r\n                  value={\r\n                    submitMode === 'edit'\r\n                      ? curSubmit?.schoolStreetNr\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolStreetNr\r\n                      : submitToWatch?.schoolStreetNr\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='zip'\r\n                  iconPosition='left'\r\n                  // label='Adres szkoły (kod pocztowy)'\r\n                  placeholder='Podaj kod pocztowy w formacie XX-XXX'\r\n                  name='schoolZip'\r\n                  value={\r\n                    submitMode === 'edit'\r\n                      ? curSubmit?.schoolZip\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolZip\r\n                      : submitToWatch?.schoolZip\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                <Form.Input\r\n                  className='input'\r\n                  icon='zip'\r\n                  iconPosition='left'\r\n                  // label='Adres szkoły (miejscowość)'\r\n                  placeholder='Podaj miejscowość'\r\n                  name='schoolTown'\r\n                  value={\r\n                    submitMode === 'edit'\r\n                      ? curSubmit?.schoolTown\r\n                      : submitMode === 'new'\r\n                      ? newSubmit?.schoolTown\r\n                      : submitToWatch?.schoolTown\r\n                  }\r\n                  onChange={(e) => handleOnChange(e)}\r\n                />\r\n                <div className='select-wrapper'>\r\n                  <select\r\n                    name='schoolVoyev'\r\n                    onChange={(e) => handleOnChange(e)}\r\n                    value={\r\n                      submitMode === 'edit'\r\n                        ? curSubmit?.schooVoyev\r\n                        : submitMode === 'new'\r\n                        ? newSubmit?.schooVoyev\r\n                        : submitToWatch?.schooVoyev\r\n                    }\r\n                    defaultValue='default'\r\n                  >\r\n                    {options.map((o) => (\r\n                      <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                        {o.text}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              </Segment>\r\n            </div>\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n      <Grid.Column>\r\n        <Header className='sub-header' floated='left' as='h4'>\r\n          IV. DANE OPIEKUNA DYDAKTYCZNEGO:\r\n        </Header>\r\n        <Form className='form'>\r\n          <Form.Group grouped>\r\n            <Form.Input\r\n              className='input'\r\n              icon='user'\r\n              iconPosition='left'\r\n              label='Imię doradcy'\r\n              name='counselorFirstName'\r\n              placeholder='Podaj imię doradcy'\r\n              value={\r\n                submitMode === 'edit'\r\n                  ? curSubmit?.counselorFirstName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.counselorFirstName\r\n                  : submitToWatch?.counselorFirstName\r\n              }\r\n              onChange={(e) => handleOnChange(e)}\r\n            />\r\n            <Form.Input\r\n              icon='user'\r\n              iconPosition='left'\r\n              className='input'\r\n              label='Nazwisko doradcy'\r\n              name='counselorLastName'\r\n              placeholder='Podaj nazwisko doradcy'\r\n              value={\r\n                submitMode === 'edit'\r\n                  ? curSubmit?.counselorLastName\r\n                  : submitMode === 'new'\r\n                  ? newSubmit?.counselorLastName\r\n                  : submitToWatch?.counselorLastName\r\n              }\r\n              onChange={(e) => handleOnChange(e)}\r\n            />\r\n\r\n            <div className='select-wrapper'>\r\n              <Header className='select-header' as='h5'>\r\n                Profil doradcy\r\n              </Header>\r\n              <select\r\n                name='counselorProfile'\r\n                onChange={(e) => handleOnChange(e)}\r\n                placeholder='Wybierz profil doradcy'\r\n                value={\r\n                  submitMode === 'edit'\r\n                    ? curSubmit?.counselorProfile\r\n                    : submitMode === 'new'\r\n                    ? newSubmit?.counselorProfile\r\n                    : submitToWatch?.counselorProfile\r\n                }\r\n                defaultValue='default'\r\n              >\r\n                {optionsC.map((o) => (\r\n                  <option disabled={o.disabled} key={o.key} value={o.value}>\r\n                    {o.text}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </Form.Group>\r\n        </Form>\r\n      </Grid.Column>\r\n    </SubALayout>\r\n  );\r\n};\r\n\r\nexport default SubA_III_IV;\r\n",{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","severity":1,"message":"229","line":13,"column":21,"nodeType":"230","messageId":"231","endLine":13,"endColumn":33},{"ruleId":"232","severity":1,"message":"233","line":33,"column":6,"nodeType":"234","endLine":33,"endColumn":18,"suggestions":"235"},{"ruleId":"228","severity":1,"message":"236","line":26,"column":11,"nodeType":"230","messageId":"231","endLine":26,"endColumn":18},{"ruleId":"232","severity":1,"message":"237","line":37,"column":6,"nodeType":"234","endLine":37,"endColumn":8,"suggestions":"238"},{"ruleId":"232","severity":1,"message":"237","line":38,"column":6,"nodeType":"234","endLine":38,"endColumn":8,"suggestions":"239"},{"ruleId":"240","severity":1,"message":"241","line":12,"column":30,"nodeType":"242","messageId":"243","endLine":12,"endColumn":32},{"ruleId":"228","severity":1,"message":"244","line":30,"column":17,"nodeType":"230","messageId":"231","endLine":30,"endColumn":25},{"ruleId":"232","severity":1,"message":"245","line":45,"column":6,"nodeType":"234","endLine":45,"endColumn":18,"suggestions":"246"},{"ruleId":"232","severity":1,"message":"233","line":30,"column":6,"nodeType":"234","endLine":30,"endColumn":18,"suggestions":"247"},{"ruleId":"232","severity":1,"message":"233","line":31,"column":6,"nodeType":"234","endLine":31,"endColumn":18,"suggestions":"248"},{"ruleId":"232","severity":1,"message":"233","line":31,"column":6,"nodeType":"234","endLine":31,"endColumn":18,"suggestions":"249"},{"ruleId":"228","severity":1,"message":"250","line":5,"column":3,"nodeType":"230","messageId":"231","endLine":5,"endColumn":9},{"ruleId":"228","severity":1,"message":"251","line":6,"column":3,"nodeType":"230","messageId":"231","endLine":6,"endColumn":8},{"ruleId":"252","severity":2,"message":"253","line":8,"column":24,"nodeType":"230","endLine":8,"endColumn":34},{"ruleId":"252","severity":2,"message":"253","line":12,"column":23,"nodeType":"230","endLine":12,"endColumn":33},{"ruleId":"228","severity":1,"message":"254","line":15,"column":9,"nodeType":"230","messageId":"231","endLine":15,"endColumn":15},{"ruleId":"228","severity":1,"message":"255","line":16,"column":9,"nodeType":"230","messageId":"231","endLine":16,"endColumn":27},{"ruleId":"232","severity":1,"message":"256","line":55,"column":6,"nodeType":"234","endLine":55,"endColumn":8,"suggestions":"257"},{"ruleId":"228","severity":1,"message":"258","line":4,"column":24,"nodeType":"230","messageId":"231","endLine":4,"endColumn":28},{"ruleId":"232","severity":1,"message":"259","line":32,"column":6,"nodeType":"234","endLine":32,"endColumn":8,"suggestions":"260"},{"ruleId":"228","severity":1,"message":"261","line":7,"column":10,"nodeType":"230","messageId":"231","endLine":7,"endColumn":16},{"ruleId":"228","severity":1,"message":"262","line":7,"column":30,"nodeType":"230","messageId":"231","endLine":7,"endColumn":35},{"ruleId":"228","severity":1,"message":"251","line":7,"column":37,"nodeType":"230","messageId":"231","endLine":7,"endColumn":42},{"ruleId":"232","severity":1,"message":"259","line":48,"column":6,"nodeType":"234","endLine":48,"endColumn":8,"suggestions":"263"},{"ruleId":"264","severity":1,"message":"265","line":69,"column":23,"nodeType":"266","endLine":69,"endColumn":26},{"ruleId":"228","severity":1,"message":"267","line":2,"column":22,"nodeType":"230","messageId":"231","endLine":2,"endColumn":29},{"ruleId":"268","severity":1,"message":"269","line":16,"column":16,"nodeType":"266","endLine":16,"endColumn":29},{"ruleId":"268","severity":1,"message":"270","line":18,"column":16,"nodeType":"266","endLine":18,"endColumn":31},{"ruleId":"268","severity":1,"message":"270","line":20,"column":16,"nodeType":"266","endLine":20,"endColumn":31},{"ruleId":"271","severity":1,"message":"272","line":21,"column":7,"nodeType":"273","messageId":"274","endLine":22,"endColumn":32},{"ruleId":"268","severity":1,"message":"270","line":22,"column":16,"nodeType":"266","endLine":22,"endColumn":31},{"ruleId":"268","severity":1,"message":"270","line":24,"column":16,"nodeType":"266","endLine":24,"endColumn":31},{"ruleId":"268","severity":1,"message":"269","line":27,"column":16,"nodeType":"266","endLine":27,"endColumn":29},{"ruleId":"228","severity":1,"message":"275","line":1,"column":29,"nodeType":"230","messageId":"231","endLine":1,"endColumn":37},{"ruleId":"228","severity":1,"message":"251","line":2,"column":30,"nodeType":"230","messageId":"231","endLine":2,"endColumn":35},{"ruleId":"228","severity":1,"message":"275","line":1,"column":29,"nodeType":"230","messageId":"231","endLine":1,"endColumn":37},{"ruleId":"228","severity":1,"message":"276","line":5,"column":8,"nodeType":"230","messageId":"231","endLine":5,"endColumn":11},"no-native-reassign",["277"],"no-negated-in-lhs",["278"],"no-unused-vars","'setHasOwnSub' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkIsAuthenticated' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["279"],"'setUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkIsAuthenticated'. Either include it or remove the dependency array.",["280"],["281"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setQuery' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addAlert', 'checkIsAuthenticated', and 'query'. Either include them or remove the dependency array.",["282"],["283"],["284"],["285"],"'Header' is defined but never used.","'Label' is defined but never used.","react-hooks/rules-of-hooks","React Hook \"useContext\" is called in function \"allUsersSubmits\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","'userId' is assigned a value but never used.","'setAllUsersSubmits' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setAllUsersSubmits'. Either include it or remove the dependency array.",["286"],"'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'setAllUsersDrafts'. Either include it or remove the dependency array.",["287"],"'Button' is defined but never used.","'Image' is defined but never used.",["288"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Segment' is defined but never used.","react/jsx-pascal-case","Imported JSX component SubA_I_II must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SubA_III_IV must be in PascalCase or SCREAMING_SNAKE_CASE","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'useState' is defined but never used.","'Nav' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"291","fix":"293"},{"desc":"294","fix":"295"},{"desc":"289","fix":"296"},{"desc":"289","fix":"297"},{"desc":"289","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"301","fix":"303"},"Update the dependencies array to be: [checkIsAuthenticated, history, isLoggedIn]",{"range":"304","text":"305"},"Update the dependencies array to be: [checkIsAuthenticated]",{"range":"306","text":"307"},{"range":"308","text":"307"},"Update the dependencies array to be: [addAlert, checkIsAuthenticated, isLoggedIn, query]",{"range":"309","text":"310"},{"range":"311","text":"305"},{"range":"312","text":"305"},{"range":"313","text":"305"},"Update the dependencies array to be: [setAllUsersSubmits]",{"range":"314","text":"315"},"Update the dependencies array to be: [setAllUsersDrafts]",{"range":"316","text":"317"},{"range":"318","text":"317"},[933,945],"[checkIsAuthenticated, history, isLoggedIn]",[1137,1139],"[checkIsAuthenticated]",[990,992],[1251,1263],"[addAlert, checkIsAuthenticated, isLoggedIn, query]",[850,862],[896,908],[899,911],[1508,1510],"[setAllUsersSubmits]",[870,872],"[setAllUsersDrafts]",[1218,1220]]